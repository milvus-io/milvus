// Code generated by message-codegen. DO NOT EDIT.

package message

import (
	"fmt"
	"reflect"

	msgpb "github.com/milvus-io/milvus-proto/go-api/v2/msgpb"
	messagespb "github.com/milvus-io/milvus/pkg/v2/proto/messagespb"
)

// Export message types
const (
	MessageTypeUnknown            MessageType = MessageType(messagespb.MessageType_Unknown)
	MessageTypeTimeTick           MessageType = MessageType(messagespb.MessageType_TimeTick)
	MessageTypeInsert             MessageType = MessageType(messagespb.MessageType_Insert)
	MessageTypeDelete             MessageType = MessageType(messagespb.MessageType_Delete)
	MessageTypeCreateCollection   MessageType = MessageType(messagespb.MessageType_CreateCollection)
	MessageTypeDropCollection     MessageType = MessageType(messagespb.MessageType_DropCollection)
	MessageTypeCreatePartition    MessageType = MessageType(messagespb.MessageType_CreatePartition)
	MessageTypeDropPartition      MessageType = MessageType(messagespb.MessageType_DropPartition)
	MessageTypeImport             MessageType = MessageType(messagespb.MessageType_Import)
	MessageTypeCreateSegment      MessageType = MessageType(messagespb.MessageType_CreateSegment)
	MessageTypeFlush              MessageType = MessageType(messagespb.MessageType_Flush)
	MessageTypeManualFlush        MessageType = MessageType(messagespb.MessageType_ManualFlush)
	MessageTypeBeginTxn           MessageType = MessageType(messagespb.MessageType_BeginTxn)
	MessageTypeCommitTxn          MessageType = MessageType(messagespb.MessageType_CommitTxn)
	MessageTypeRollbackTxn        MessageType = MessageType(messagespb.MessageType_RollbackTxn)
	MessageTypeTxn                MessageType = MessageType(messagespb.MessageType_Txn)
	MessageTypeSchemaChange       MessageType = MessageType(messagespb.MessageType_SchemaChange)
	MessageTypePutCollection      MessageType = MessageType(messagespb.MessageType_PutCollection)
	MessageTypeCreateDatabase     MessageType = MessageType(messagespb.MessageType_CreateDatabase)
	MessageTypePutDatabase        MessageType = MessageType(messagespb.MessageType_PutDatabase)
	MessageTypeDropDatabase       MessageType = MessageType(messagespb.MessageType_DropDatabase)
	MessageTypePutAlias           MessageType = MessageType(messagespb.MessageType_PutAlias)
	MessageTypeDropAlias          MessageType = MessageType(messagespb.MessageType_DropAlias)
	MessageTypeCreateUser         MessageType = MessageType(messagespb.MessageType_CreateUser)
	MessageTypePutUser            MessageType = MessageType(messagespb.MessageType_PutUser)
	MessageTypeDropUser           MessageType = MessageType(messagespb.MessageType_DropUser)
	MessageTypeCreateRole         MessageType = MessageType(messagespb.MessageType_CreateRole)
	MessageTypePutRole            MessageType = MessageType(messagespb.MessageType_PutRole)
	MessageTypeDropRole           MessageType = MessageType(messagespb.MessageType_DropRole)
	MessageTypePutUserRole        MessageType = MessageType(messagespb.MessageType_PutUserRole)
	MessageTypeDropUserRole       MessageType = MessageType(messagespb.MessageType_DropUserRole)
	MessageTypeGrantPrivilege     MessageType = MessageType(messagespb.MessageType_GrantPrivilege)
	MessageTypeRevokePrivilege    MessageType = MessageType(messagespb.MessageType_RevokePrivilege)
	MessageTypePutPrivilegeGroup  MessageType = MessageType(messagespb.MessageType_PutPrivilegeGroup)
	MessageTypeDropPrivilegeGroup MessageType = MessageType(messagespb.MessageType_DropPrivilegeGroup)
	MessageTypePutResourceGroup   MessageType = MessageType(messagespb.MessageType_PutResourceGroup)
	MessageTypeDropResourceGroup  MessageType = MessageType(messagespb.MessageType_DropResourceGroup)
)

// Export extra message type
type (
	PartitionSegmentAssignment = messagespb.PartitionSegmentAssignment
	SegmentAssignment          = messagespb.SegmentAssignment
	ManualFlushExtraResponse   = messagespb.ManualFlushExtraResponse
)

// Export message header and body types
type (
	TimeTickMessageHeader           = messagespb.TimeTickMessageHeader
	TimeTickMsg                     = msgpb.TimeTickMsg
	InsertMessageHeader             = messagespb.InsertMessageHeader
	InsertRequest                   = msgpb.InsertRequest
	DeleteMessageHeader             = messagespb.DeleteMessageHeader
	DeleteRequest                   = msgpb.DeleteRequest
	CreateCollectionMessageHeader   = messagespb.CreateCollectionMessageHeader
	CreateCollectionRequest         = msgpb.CreateCollectionRequest
	DropCollectionMessageHeader     = messagespb.DropCollectionMessageHeader
	DropCollectionRequest           = msgpb.DropCollectionRequest
	CreatePartitionMessageHeader    = messagespb.CreatePartitionMessageHeader
	CreatePartitionRequest          = msgpb.CreatePartitionRequest
	DropPartitionMessageHeader      = messagespb.DropPartitionMessageHeader
	DropPartitionRequest            = msgpb.DropPartitionRequest
	ImportMessageHeader             = messagespb.ImportMessageHeader
	ImportMsg                       = msgpb.ImportMsg
	CreateSegmentMessageHeader      = messagespb.CreateSegmentMessageHeader
	CreateSegmentMessageBody        = messagespb.CreateSegmentMessageBody
	FlushMessageHeader              = messagespb.FlushMessageHeader
	FlushMessageBody                = messagespb.FlushMessageBody
	ManualFlushMessageHeader        = messagespb.ManualFlushMessageHeader
	ManualFlushMessageBody          = messagespb.ManualFlushMessageBody
	BeginTxnMessageHeader           = messagespb.BeginTxnMessageHeader
	BeginTxnMessageBody             = messagespb.BeginTxnMessageBody
	CommitTxnMessageHeader          = messagespb.CommitTxnMessageHeader
	CommitTxnMessageBody            = messagespb.CommitTxnMessageBody
	RollbackTxnMessageHeader        = messagespb.RollbackTxnMessageHeader
	RollbackTxnMessageBody          = messagespb.RollbackTxnMessageBody
	TxnMessageHeader                = messagespb.TxnMessageHeader
	TxnMessageBody                  = messagespb.TxnMessageBody
	SchemaChangeMessageHeader       = messagespb.SchemaChangeMessageHeader
	SchemaChangeMessageBody         = messagespb.SchemaChangeMessageBody
	PutCollectionMessageHeader      = messagespb.PutCollectionMessageHeader
	PutCollectionMessageBody        = messagespb.PutCollectionMessageBody
	CreateDatabaseMessageHeader     = messagespb.CreateDatabaseMessageHeader
	CreateDatabaseMessageBody       = messagespb.CreateDatabaseMessageBody
	PutDatabaseMessageHeader        = messagespb.PutDatabaseMessageHeader
	PutDatabaseMessageBody          = messagespb.PutDatabaseMessageBody
	DropDatabaseMessageHeader       = messagespb.DropDatabaseMessageHeader
	DropDatabaseMessageBody         = messagespb.DropDatabaseMessageBody
	PutAliasMessageHeader           = messagespb.PutAliasMessageHeader
	PutAliasMessageBody             = messagespb.PutAliasMessageBody
	DropAliasMessageHeader          = messagespb.DropAliasMessageHeader
	DropAliasMessageBody            = messagespb.DropAliasMessageBody
	CreateUserMessageHeader         = messagespb.CreateUserMessageHeader
	CreateUserMessageBody           = messagespb.CreateUserMessageBody
	PutUserMessageHeader            = messagespb.PutUserMessageHeader
	PutUserMessageBody              = messagespb.PutUserMessageBody
	DropUserMessageHeader           = messagespb.DropUserMessageHeader
	DropUserMessageBody             = messagespb.DropUserMessageBody
	CreateRoleMessageHeader         = messagespb.CreateRoleMessageHeader
	CreateRoleMessageBody           = messagespb.CreateRoleMessageBody
	PutRoleMessageHeader            = messagespb.PutRoleMessageHeader
	PutRoleMessageBody              = messagespb.PutRoleMessageBody
	DropRoleMessageHeader           = messagespb.DropRoleMessageHeader
	DropRoleMessageBody             = messagespb.DropRoleMessageBody
	PutUserRoleMessageHeader        = messagespb.PutUserRoleMessageHeader
	PutUserRoleMessageBody          = messagespb.PutUserRoleMessageBody
	DropUserRoleMessageHeader       = messagespb.DropUserRoleMessageHeader
	DropUserRoleMessageBody         = messagespb.DropUserRoleMessageBody
	GrantPrivilegeMessageHeader     = messagespb.GrantPrivilegeMessageHeader
	GrantPrivilegeMessageBody       = messagespb.GrantPrivilegeMessageBody
	RevokePrivilegeMessageHeader    = messagespb.RevokePrivilegeMessageHeader
	RevokePrivilegeMessageBody      = messagespb.RevokePrivilegeMessageBody
	PutPrivilegeGroupMessageHeader  = messagespb.PutPrivilegeGroupMessageHeader
	PutPrivilegeGroupMessageBody    = messagespb.PutPrivilegeGroupMessageBody
	DropPrivilegeGroupMessageHeader = messagespb.DropPrivilegeGroupMessageHeader
	DropPrivilegeGroupMessageBody   = messagespb.DropPrivilegeGroupMessageBody
	PutResourceGroupMessageHeader   = messagespb.PutResourceGroupMessageHeader
	PutResourceGroupMessageBody     = messagespb.PutResourceGroupMessageBody
	DropResourceGroupMessageHeader  = messagespb.DropResourceGroupMessageHeader
	DropResourceGroupMessageBody    = messagespb.DropResourceGroupMessageBody
)

// Type aliases for TimeTickMessageV1
type (
	MutableTimeTickMessageV1   = specializedMutableMessage[*TimeTickMessageHeader, *TimeTickMsg]
	ImmutableTimeTickMessageV1 = SpecializedImmutableMessage[*TimeTickMessageHeader, *TimeTickMsg]
	BroadcastTimeTickMessageV1 = SpecializedBroadcastMessage[*TimeTickMessageHeader, *TimeTickMsg]
)

// MessageTypeWithVersion for TimeTickMessageV1
var MessageTypeTimeTickV1 = MessageTypeWithVersion{
	MessageType: MessageTypeTimeTick,
	Version:     VersionV1,
}

// MessageSpecializedType for TimeTickMessageV1
var SpecializedTypeTimeTickV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*TimeTickMsg)(nil)),
	HeaderType: reflect.TypeOf((*TimeTickMessageHeader)(nil)),
}

// AsMutableTimeTickMessageV1 converts a BasicMessage to MutableTimeTickMessageV1
var AsMutableTimeTickMessageV1 = asSpecializedMutableMessage[*TimeTickMessageHeader, *TimeTickMsg]

// MustAsMutableTimeTickMessageV1 converts a BasicMessage to MutableTimeTickMessageV1, panics on error
var MustAsMutableTimeTickMessageV1 = mustAsSpecializedMutableMessage[*TimeTickMessageHeader, *TimeTickMsg]

// AsImmutableTimeTickMessageV1 converts an ImmutableMessage to ImmutableTimeTickMessageV1
var AsImmutableTimeTickMessageV1 = asSpecializedImmutableMessage[*TimeTickMessageHeader, *TimeTickMsg]

// MustAsImmutableTimeTickMessageV1 converts an ImmutableMessage to ImmutableTimeTickMessageV1, panics on error
var MustAsImmutableTimeTickMessageV1 = MustAsSpecializedImmutableMessage[*TimeTickMessageHeader, *TimeTickMsg]

// AsBroadcastTimeTickMessageV1 converts a BasicMessage to BroadcastTimeTickMessageV1
var AsBroadcastTimeTickMessageV1 = asSpecializedBroadcastMessage[*TimeTickMessageHeader, *TimeTickMsg]

// MustAsBroadcastTimeTickMessageV1 converts a BasicMessage to BroadcastTimeTickMessageV1, panics on error
var MustAsBroadcastTimeTickMessageV1 = MustAsSpecializedBroadcastMessage[*TimeTickMessageHeader, *TimeTickMsg]

// NewTimeTickMessageBuilderV1 creates a new message builder for TimeTickMessageV1
var NewTimeTickMessageBuilderV1 = newMutableMessageBuilder[*TimeTickMessageHeader, *TimeTickMsg]

// Type aliases for InsertMessageV1
type (
	MutableInsertMessageV1   = specializedMutableMessage[*InsertMessageHeader, *InsertRequest]
	ImmutableInsertMessageV1 = SpecializedImmutableMessage[*InsertMessageHeader, *InsertRequest]
	BroadcastInsertMessageV1 = SpecializedBroadcastMessage[*InsertMessageHeader, *InsertRequest]
)

// MessageTypeWithVersion for InsertMessageV1
var MessageTypeInsertV1 = MessageTypeWithVersion{
	MessageType: MessageTypeInsert,
	Version:     VersionV1,
}

// MessageSpecializedType for InsertMessageV1
var SpecializedTypeInsertV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*InsertRequest)(nil)),
	HeaderType: reflect.TypeOf((*InsertMessageHeader)(nil)),
}

// AsMutableInsertMessageV1 converts a BasicMessage to MutableInsertMessageV1
var AsMutableInsertMessageV1 = asSpecializedMutableMessage[*InsertMessageHeader, *InsertRequest]

// MustAsMutableInsertMessageV1 converts a BasicMessage to MutableInsertMessageV1, panics on error
var MustAsMutableInsertMessageV1 = mustAsSpecializedMutableMessage[*InsertMessageHeader, *InsertRequest]

// AsImmutableInsertMessageV1 converts an ImmutableMessage to ImmutableInsertMessageV1
var AsImmutableInsertMessageV1 = asSpecializedImmutableMessage[*InsertMessageHeader, *InsertRequest]

// MustAsImmutableInsertMessageV1 converts an ImmutableMessage to ImmutableInsertMessageV1, panics on error
var MustAsImmutableInsertMessageV1 = MustAsSpecializedImmutableMessage[*InsertMessageHeader, *InsertRequest]

// AsBroadcastInsertMessageV1 converts a BasicMessage to BroadcastInsertMessageV1
var AsBroadcastInsertMessageV1 = asSpecializedBroadcastMessage[*InsertMessageHeader, *InsertRequest]

// MustAsBroadcastInsertMessageV1 converts a BasicMessage to BroadcastInsertMessageV1, panics on error
var MustAsBroadcastInsertMessageV1 = MustAsSpecializedBroadcastMessage[*InsertMessageHeader, *InsertRequest]

// NewInsertMessageBuilderV1 creates a new message builder for InsertMessageV1
var NewInsertMessageBuilderV1 = newMutableMessageBuilder[*InsertMessageHeader, *InsertRequest]

// Type aliases for DeleteMessageV1
type (
	MutableDeleteMessageV1   = specializedMutableMessage[*DeleteMessageHeader, *DeleteRequest]
	ImmutableDeleteMessageV1 = SpecializedImmutableMessage[*DeleteMessageHeader, *DeleteRequest]
	BroadcastDeleteMessageV1 = SpecializedBroadcastMessage[*DeleteMessageHeader, *DeleteRequest]
)

// MessageTypeWithVersion for DeleteMessageV1
var MessageTypeDeleteV1 = MessageTypeWithVersion{
	MessageType: MessageTypeDelete,
	Version:     VersionV1,
}

// MessageSpecializedType for DeleteMessageV1
var SpecializedTypeDeleteV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DeleteRequest)(nil)),
	HeaderType: reflect.TypeOf((*DeleteMessageHeader)(nil)),
}

// AsMutableDeleteMessageV1 converts a BasicMessage to MutableDeleteMessageV1
var AsMutableDeleteMessageV1 = asSpecializedMutableMessage[*DeleteMessageHeader, *DeleteRequest]

// MustAsMutableDeleteMessageV1 converts a BasicMessage to MutableDeleteMessageV1, panics on error
var MustAsMutableDeleteMessageV1 = mustAsSpecializedMutableMessage[*DeleteMessageHeader, *DeleteRequest]

// AsImmutableDeleteMessageV1 converts an ImmutableMessage to ImmutableDeleteMessageV1
var AsImmutableDeleteMessageV1 = asSpecializedImmutableMessage[*DeleteMessageHeader, *DeleteRequest]

// MustAsImmutableDeleteMessageV1 converts an ImmutableMessage to ImmutableDeleteMessageV1, panics on error
var MustAsImmutableDeleteMessageV1 = MustAsSpecializedImmutableMessage[*DeleteMessageHeader, *DeleteRequest]

// AsBroadcastDeleteMessageV1 converts a BasicMessage to BroadcastDeleteMessageV1
var AsBroadcastDeleteMessageV1 = asSpecializedBroadcastMessage[*DeleteMessageHeader, *DeleteRequest]

// MustAsBroadcastDeleteMessageV1 converts a BasicMessage to BroadcastDeleteMessageV1, panics on error
var MustAsBroadcastDeleteMessageV1 = MustAsSpecializedBroadcastMessage[*DeleteMessageHeader, *DeleteRequest]

// NewDeleteMessageBuilderV1 creates a new message builder for DeleteMessageV1
var NewDeleteMessageBuilderV1 = newMutableMessageBuilder[*DeleteMessageHeader, *DeleteRequest]

// Type aliases for CreateCollectionMessageV1
type (
	MutableCreateCollectionMessageV1   = specializedMutableMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]
	ImmutableCreateCollectionMessageV1 = SpecializedImmutableMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]
	BroadcastCreateCollectionMessageV1 = SpecializedBroadcastMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]
)

// MessageTypeWithVersion for CreateCollectionMessageV1
var MessageTypeCreateCollectionV1 = MessageTypeWithVersion{
	MessageType: MessageTypeCreateCollection,
	Version:     VersionV1,
}

// MessageSpecializedType for CreateCollectionMessageV1
var SpecializedTypeCreateCollectionV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CreateCollectionRequest)(nil)),
	HeaderType: reflect.TypeOf((*CreateCollectionMessageHeader)(nil)),
}

// AsMutableCreateCollectionMessageV1 converts a BasicMessage to MutableCreateCollectionMessageV1
var AsMutableCreateCollectionMessageV1 = asSpecializedMutableMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// MustAsMutableCreateCollectionMessageV1 converts a BasicMessage to MutableCreateCollectionMessageV1, panics on error
var MustAsMutableCreateCollectionMessageV1 = mustAsSpecializedMutableMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// AsImmutableCreateCollectionMessageV1 converts an ImmutableMessage to ImmutableCreateCollectionMessageV1
var AsImmutableCreateCollectionMessageV1 = asSpecializedImmutableMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// MustAsImmutableCreateCollectionMessageV1 converts an ImmutableMessage to ImmutableCreateCollectionMessageV1, panics on error
var MustAsImmutableCreateCollectionMessageV1 = MustAsSpecializedImmutableMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// AsBroadcastCreateCollectionMessageV1 converts a BasicMessage to BroadcastCreateCollectionMessageV1
var AsBroadcastCreateCollectionMessageV1 = asSpecializedBroadcastMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// MustAsBroadcastCreateCollectionMessageV1 converts a BasicMessage to BroadcastCreateCollectionMessageV1, panics on error
var MustAsBroadcastCreateCollectionMessageV1 = MustAsSpecializedBroadcastMessage[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// NewCreateCollectionMessageBuilderV1 creates a new message builder for CreateCollectionMessageV1
var NewCreateCollectionMessageBuilderV1 = newMutableMessageBuilder[*CreateCollectionMessageHeader, *CreateCollectionRequest]

// Type aliases for DropCollectionMessageV1
type (
	MutableDropCollectionMessageV1   = specializedMutableMessage[*DropCollectionMessageHeader, *DropCollectionRequest]
	ImmutableDropCollectionMessageV1 = SpecializedImmutableMessage[*DropCollectionMessageHeader, *DropCollectionRequest]
	BroadcastDropCollectionMessageV1 = SpecializedBroadcastMessage[*DropCollectionMessageHeader, *DropCollectionRequest]
)

// MessageTypeWithVersion for DropCollectionMessageV1
var MessageTypeDropCollectionV1 = MessageTypeWithVersion{
	MessageType: MessageTypeDropCollection,
	Version:     VersionV1,
}

// MessageSpecializedType for DropCollectionMessageV1
var SpecializedTypeDropCollectionV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropCollectionRequest)(nil)),
	HeaderType: reflect.TypeOf((*DropCollectionMessageHeader)(nil)),
}

// AsMutableDropCollectionMessageV1 converts a BasicMessage to MutableDropCollectionMessageV1
var AsMutableDropCollectionMessageV1 = asSpecializedMutableMessage[*DropCollectionMessageHeader, *DropCollectionRequest]

// MustAsMutableDropCollectionMessageV1 converts a BasicMessage to MutableDropCollectionMessageV1, panics on error
var MustAsMutableDropCollectionMessageV1 = mustAsSpecializedMutableMessage[*DropCollectionMessageHeader, *DropCollectionRequest]

// AsImmutableDropCollectionMessageV1 converts an ImmutableMessage to ImmutableDropCollectionMessageV1
var AsImmutableDropCollectionMessageV1 = asSpecializedImmutableMessage[*DropCollectionMessageHeader, *DropCollectionRequest]

// MustAsImmutableDropCollectionMessageV1 converts an ImmutableMessage to ImmutableDropCollectionMessageV1, panics on error
var MustAsImmutableDropCollectionMessageV1 = MustAsSpecializedImmutableMessage[*DropCollectionMessageHeader, *DropCollectionRequest]

// AsBroadcastDropCollectionMessageV1 converts a BasicMessage to BroadcastDropCollectionMessageV1
var AsBroadcastDropCollectionMessageV1 = asSpecializedBroadcastMessage[*DropCollectionMessageHeader, *DropCollectionRequest]

// MustAsBroadcastDropCollectionMessageV1 converts a BasicMessage to BroadcastDropCollectionMessageV1, panics on error
var MustAsBroadcastDropCollectionMessageV1 = MustAsSpecializedBroadcastMessage[*DropCollectionMessageHeader, *DropCollectionRequest]

// NewDropCollectionMessageBuilderV1 creates a new message builder for DropCollectionMessageV1
var NewDropCollectionMessageBuilderV1 = newMutableMessageBuilder[*DropCollectionMessageHeader, *DropCollectionRequest]

// Type aliases for CreatePartitionMessageV1
type (
	MutableCreatePartitionMessageV1   = specializedMutableMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]
	ImmutableCreatePartitionMessageV1 = SpecializedImmutableMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]
	BroadcastCreatePartitionMessageV1 = SpecializedBroadcastMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]
)

// MessageTypeWithVersion for CreatePartitionMessageV1
var MessageTypeCreatePartitionV1 = MessageTypeWithVersion{
	MessageType: MessageTypeCreatePartition,
	Version:     VersionV1,
}

// MessageSpecializedType for CreatePartitionMessageV1
var SpecializedTypeCreatePartitionV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CreatePartitionRequest)(nil)),
	HeaderType: reflect.TypeOf((*CreatePartitionMessageHeader)(nil)),
}

// AsMutableCreatePartitionMessageV1 converts a BasicMessage to MutableCreatePartitionMessageV1
var AsMutableCreatePartitionMessageV1 = asSpecializedMutableMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// MustAsMutableCreatePartitionMessageV1 converts a BasicMessage to MutableCreatePartitionMessageV1, panics on error
var MustAsMutableCreatePartitionMessageV1 = mustAsSpecializedMutableMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// AsImmutableCreatePartitionMessageV1 converts an ImmutableMessage to ImmutableCreatePartitionMessageV1
var AsImmutableCreatePartitionMessageV1 = asSpecializedImmutableMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// MustAsImmutableCreatePartitionMessageV1 converts an ImmutableMessage to ImmutableCreatePartitionMessageV1, panics on error
var MustAsImmutableCreatePartitionMessageV1 = MustAsSpecializedImmutableMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// AsBroadcastCreatePartitionMessageV1 converts a BasicMessage to BroadcastCreatePartitionMessageV1
var AsBroadcastCreatePartitionMessageV1 = asSpecializedBroadcastMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// MustAsBroadcastCreatePartitionMessageV1 converts a BasicMessage to BroadcastCreatePartitionMessageV1, panics on error
var MustAsBroadcastCreatePartitionMessageV1 = MustAsSpecializedBroadcastMessage[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// NewCreatePartitionMessageBuilderV1 creates a new message builder for CreatePartitionMessageV1
var NewCreatePartitionMessageBuilderV1 = newMutableMessageBuilder[*CreatePartitionMessageHeader, *CreatePartitionRequest]

// Type aliases for DropPartitionMessageV1
type (
	MutableDropPartitionMessageV1   = specializedMutableMessage[*DropPartitionMessageHeader, *DropPartitionRequest]
	ImmutableDropPartitionMessageV1 = SpecializedImmutableMessage[*DropPartitionMessageHeader, *DropPartitionRequest]
	BroadcastDropPartitionMessageV1 = SpecializedBroadcastMessage[*DropPartitionMessageHeader, *DropPartitionRequest]
)

// MessageTypeWithVersion for DropPartitionMessageV1
var MessageTypeDropPartitionV1 = MessageTypeWithVersion{
	MessageType: MessageTypeDropPartition,
	Version:     VersionV1,
}

// MessageSpecializedType for DropPartitionMessageV1
var SpecializedTypeDropPartitionV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropPartitionRequest)(nil)),
	HeaderType: reflect.TypeOf((*DropPartitionMessageHeader)(nil)),
}

// AsMutableDropPartitionMessageV1 converts a BasicMessage to MutableDropPartitionMessageV1
var AsMutableDropPartitionMessageV1 = asSpecializedMutableMessage[*DropPartitionMessageHeader, *DropPartitionRequest]

// MustAsMutableDropPartitionMessageV1 converts a BasicMessage to MutableDropPartitionMessageV1, panics on error
var MustAsMutableDropPartitionMessageV1 = mustAsSpecializedMutableMessage[*DropPartitionMessageHeader, *DropPartitionRequest]

// AsImmutableDropPartitionMessageV1 converts an ImmutableMessage to ImmutableDropPartitionMessageV1
var AsImmutableDropPartitionMessageV1 = asSpecializedImmutableMessage[*DropPartitionMessageHeader, *DropPartitionRequest]

// MustAsImmutableDropPartitionMessageV1 converts an ImmutableMessage to ImmutableDropPartitionMessageV1, panics on error
var MustAsImmutableDropPartitionMessageV1 = MustAsSpecializedImmutableMessage[*DropPartitionMessageHeader, *DropPartitionRequest]

// AsBroadcastDropPartitionMessageV1 converts a BasicMessage to BroadcastDropPartitionMessageV1
var AsBroadcastDropPartitionMessageV1 = asSpecializedBroadcastMessage[*DropPartitionMessageHeader, *DropPartitionRequest]

// MustAsBroadcastDropPartitionMessageV1 converts a BasicMessage to BroadcastDropPartitionMessageV1, panics on error
var MustAsBroadcastDropPartitionMessageV1 = MustAsSpecializedBroadcastMessage[*DropPartitionMessageHeader, *DropPartitionRequest]

// NewDropPartitionMessageBuilderV1 creates a new message builder for DropPartitionMessageV1
var NewDropPartitionMessageBuilderV1 = newMutableMessageBuilder[*DropPartitionMessageHeader, *DropPartitionRequest]

// Type aliases for ImportMessageV1
type (
	MutableImportMessageV1   = specializedMutableMessage[*ImportMessageHeader, *ImportMsg]
	ImmutableImportMessageV1 = SpecializedImmutableMessage[*ImportMessageHeader, *ImportMsg]
	BroadcastImportMessageV1 = SpecializedBroadcastMessage[*ImportMessageHeader, *ImportMsg]
)

// MessageTypeWithVersion for ImportMessageV1
var MessageTypeImportV1 = MessageTypeWithVersion{
	MessageType: MessageTypeImport,
	Version:     VersionV1,
}

// MessageSpecializedType for ImportMessageV1
var SpecializedTypeImportV1 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*ImportMsg)(nil)),
	HeaderType: reflect.TypeOf((*ImportMessageHeader)(nil)),
}

// AsMutableImportMessageV1 converts a BasicMessage to MutableImportMessageV1
var AsMutableImportMessageV1 = asSpecializedMutableMessage[*ImportMessageHeader, *ImportMsg]

// MustAsMutableImportMessageV1 converts a BasicMessage to MutableImportMessageV1, panics on error
var MustAsMutableImportMessageV1 = mustAsSpecializedMutableMessage[*ImportMessageHeader, *ImportMsg]

// AsImmutableImportMessageV1 converts an ImmutableMessage to ImmutableImportMessageV1
var AsImmutableImportMessageV1 = asSpecializedImmutableMessage[*ImportMessageHeader, *ImportMsg]

// MustAsImmutableImportMessageV1 converts an ImmutableMessage to ImmutableImportMessageV1, panics on error
var MustAsImmutableImportMessageV1 = MustAsSpecializedImmutableMessage[*ImportMessageHeader, *ImportMsg]

// AsBroadcastImportMessageV1 converts a BasicMessage to BroadcastImportMessageV1
var AsBroadcastImportMessageV1 = asSpecializedBroadcastMessage[*ImportMessageHeader, *ImportMsg]

// MustAsBroadcastImportMessageV1 converts a BasicMessage to BroadcastImportMessageV1, panics on error
var MustAsBroadcastImportMessageV1 = MustAsSpecializedBroadcastMessage[*ImportMessageHeader, *ImportMsg]

// NewImportMessageBuilderV1 creates a new message builder for ImportMessageV1
var NewImportMessageBuilderV1 = newMutableMessageBuilder[*ImportMessageHeader, *ImportMsg]

// Type aliases for CreateSegmentMessageV2
type (
	MutableCreateSegmentMessageV2   = specializedMutableMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]
	ImmutableCreateSegmentMessageV2 = SpecializedImmutableMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]
	BroadcastCreateSegmentMessageV2 = SpecializedBroadcastMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]
)

// MessageTypeWithVersion for CreateSegmentMessageV2
var MessageTypeCreateSegmentV2 = MessageTypeWithVersion{
	MessageType: MessageTypeCreateSegment,
	Version:     VersionV2,
}

// MessageSpecializedType for CreateSegmentMessageV2
var SpecializedTypeCreateSegmentV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CreateSegmentMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*CreateSegmentMessageHeader)(nil)),
}

// AsMutableCreateSegmentMessageV2 converts a BasicMessage to MutableCreateSegmentMessageV2
var AsMutableCreateSegmentMessageV2 = asSpecializedMutableMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// MustAsMutableCreateSegmentMessageV2 converts a BasicMessage to MutableCreateSegmentMessageV2, panics on error
var MustAsMutableCreateSegmentMessageV2 = mustAsSpecializedMutableMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// AsImmutableCreateSegmentMessageV2 converts an ImmutableMessage to ImmutableCreateSegmentMessageV2
var AsImmutableCreateSegmentMessageV2 = asSpecializedImmutableMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// MustAsImmutableCreateSegmentMessageV2 converts an ImmutableMessage to ImmutableCreateSegmentMessageV2, panics on error
var MustAsImmutableCreateSegmentMessageV2 = MustAsSpecializedImmutableMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// AsBroadcastCreateSegmentMessageV2 converts a BasicMessage to BroadcastCreateSegmentMessageV2
var AsBroadcastCreateSegmentMessageV2 = asSpecializedBroadcastMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// MustAsBroadcastCreateSegmentMessageV2 converts a BasicMessage to BroadcastCreateSegmentMessageV2, panics on error
var MustAsBroadcastCreateSegmentMessageV2 = MustAsSpecializedBroadcastMessage[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// NewCreateSegmentMessageBuilderV2 creates a new message builder for CreateSegmentMessageV2
var NewCreateSegmentMessageBuilderV2 = newMutableMessageBuilder[*CreateSegmentMessageHeader, *CreateSegmentMessageBody]

// Type aliases for FlushMessageV2
type (
	MutableFlushMessageV2   = specializedMutableMessage[*FlushMessageHeader, *FlushMessageBody]
	ImmutableFlushMessageV2 = SpecializedImmutableMessage[*FlushMessageHeader, *FlushMessageBody]
	BroadcastFlushMessageV2 = SpecializedBroadcastMessage[*FlushMessageHeader, *FlushMessageBody]
)

// MessageTypeWithVersion for FlushMessageV2
var MessageTypeFlushV2 = MessageTypeWithVersion{
	MessageType: MessageTypeFlush,
	Version:     VersionV2,
}

// MessageSpecializedType for FlushMessageV2
var SpecializedTypeFlushV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*FlushMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*FlushMessageHeader)(nil)),
}

// AsMutableFlushMessageV2 converts a BasicMessage to MutableFlushMessageV2
var AsMutableFlushMessageV2 = asSpecializedMutableMessage[*FlushMessageHeader, *FlushMessageBody]

// MustAsMutableFlushMessageV2 converts a BasicMessage to MutableFlushMessageV2, panics on error
var MustAsMutableFlushMessageV2 = mustAsSpecializedMutableMessage[*FlushMessageHeader, *FlushMessageBody]

// AsImmutableFlushMessageV2 converts an ImmutableMessage to ImmutableFlushMessageV2
var AsImmutableFlushMessageV2 = asSpecializedImmutableMessage[*FlushMessageHeader, *FlushMessageBody]

// MustAsImmutableFlushMessageV2 converts an ImmutableMessage to ImmutableFlushMessageV2, panics on error
var MustAsImmutableFlushMessageV2 = MustAsSpecializedImmutableMessage[*FlushMessageHeader, *FlushMessageBody]

// AsBroadcastFlushMessageV2 converts a BasicMessage to BroadcastFlushMessageV2
var AsBroadcastFlushMessageV2 = asSpecializedBroadcastMessage[*FlushMessageHeader, *FlushMessageBody]

// MustAsBroadcastFlushMessageV2 converts a BasicMessage to BroadcastFlushMessageV2, panics on error
var MustAsBroadcastFlushMessageV2 = MustAsSpecializedBroadcastMessage[*FlushMessageHeader, *FlushMessageBody]

// NewFlushMessageBuilderV2 creates a new message builder for FlushMessageV2
var NewFlushMessageBuilderV2 = newMutableMessageBuilder[*FlushMessageHeader, *FlushMessageBody]

// Type aliases for ManualFlushMessageV2
type (
	MutableManualFlushMessageV2   = specializedMutableMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]
	ImmutableManualFlushMessageV2 = SpecializedImmutableMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]
	BroadcastManualFlushMessageV2 = SpecializedBroadcastMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]
)

// MessageTypeWithVersion for ManualFlushMessageV2
var MessageTypeManualFlushV2 = MessageTypeWithVersion{
	MessageType: MessageTypeManualFlush,
	Version:     VersionV2,
}

// MessageSpecializedType for ManualFlushMessageV2
var SpecializedTypeManualFlushV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*ManualFlushMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*ManualFlushMessageHeader)(nil)),
}

// AsMutableManualFlushMessageV2 converts a BasicMessage to MutableManualFlushMessageV2
var AsMutableManualFlushMessageV2 = asSpecializedMutableMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// MustAsMutableManualFlushMessageV2 converts a BasicMessage to MutableManualFlushMessageV2, panics on error
var MustAsMutableManualFlushMessageV2 = mustAsSpecializedMutableMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// AsImmutableManualFlushMessageV2 converts an ImmutableMessage to ImmutableManualFlushMessageV2
var AsImmutableManualFlushMessageV2 = asSpecializedImmutableMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// MustAsImmutableManualFlushMessageV2 converts an ImmutableMessage to ImmutableManualFlushMessageV2, panics on error
var MustAsImmutableManualFlushMessageV2 = MustAsSpecializedImmutableMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// AsBroadcastManualFlushMessageV2 converts a BasicMessage to BroadcastManualFlushMessageV2
var AsBroadcastManualFlushMessageV2 = asSpecializedBroadcastMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// MustAsBroadcastManualFlushMessageV2 converts a BasicMessage to BroadcastManualFlushMessageV2, panics on error
var MustAsBroadcastManualFlushMessageV2 = MustAsSpecializedBroadcastMessage[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// NewManualFlushMessageBuilderV2 creates a new message builder for ManualFlushMessageV2
var NewManualFlushMessageBuilderV2 = newMutableMessageBuilder[*ManualFlushMessageHeader, *ManualFlushMessageBody]

// Type aliases for BeginTxnMessageV2
type (
	MutableBeginTxnMessageV2   = specializedMutableMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]
	ImmutableBeginTxnMessageV2 = SpecializedImmutableMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]
	BroadcastBeginTxnMessageV2 = SpecializedBroadcastMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]
)

// MessageTypeWithVersion for BeginTxnMessageV2
var MessageTypeBeginTxnV2 = MessageTypeWithVersion{
	MessageType: MessageTypeBeginTxn,
	Version:     VersionV2,
}

// MessageSpecializedType for BeginTxnMessageV2
var SpecializedTypeBeginTxnV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*BeginTxnMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*BeginTxnMessageHeader)(nil)),
}

// AsMutableBeginTxnMessageV2 converts a BasicMessage to MutableBeginTxnMessageV2
var AsMutableBeginTxnMessageV2 = asSpecializedMutableMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// MustAsMutableBeginTxnMessageV2 converts a BasicMessage to MutableBeginTxnMessageV2, panics on error
var MustAsMutableBeginTxnMessageV2 = mustAsSpecializedMutableMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// AsImmutableBeginTxnMessageV2 converts an ImmutableMessage to ImmutableBeginTxnMessageV2
var AsImmutableBeginTxnMessageV2 = asSpecializedImmutableMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// MustAsImmutableBeginTxnMessageV2 converts an ImmutableMessage to ImmutableBeginTxnMessageV2, panics on error
var MustAsImmutableBeginTxnMessageV2 = MustAsSpecializedImmutableMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// AsBroadcastBeginTxnMessageV2 converts a BasicMessage to BroadcastBeginTxnMessageV2
var AsBroadcastBeginTxnMessageV2 = asSpecializedBroadcastMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// MustAsBroadcastBeginTxnMessageV2 converts a BasicMessage to BroadcastBeginTxnMessageV2, panics on error
var MustAsBroadcastBeginTxnMessageV2 = MustAsSpecializedBroadcastMessage[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// NewBeginTxnMessageBuilderV2 creates a new message builder for BeginTxnMessageV2
var NewBeginTxnMessageBuilderV2 = newMutableMessageBuilder[*BeginTxnMessageHeader, *BeginTxnMessageBody]

// Type aliases for CommitTxnMessageV2
type (
	MutableCommitTxnMessageV2   = specializedMutableMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]
	ImmutableCommitTxnMessageV2 = SpecializedImmutableMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]
	BroadcastCommitTxnMessageV2 = SpecializedBroadcastMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]
)

// MessageTypeWithVersion for CommitTxnMessageV2
var MessageTypeCommitTxnV2 = MessageTypeWithVersion{
	MessageType: MessageTypeCommitTxn,
	Version:     VersionV2,
}

// MessageSpecializedType for CommitTxnMessageV2
var SpecializedTypeCommitTxnV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CommitTxnMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*CommitTxnMessageHeader)(nil)),
}

// AsMutableCommitTxnMessageV2 converts a BasicMessage to MutableCommitTxnMessageV2
var AsMutableCommitTxnMessageV2 = asSpecializedMutableMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// MustAsMutableCommitTxnMessageV2 converts a BasicMessage to MutableCommitTxnMessageV2, panics on error
var MustAsMutableCommitTxnMessageV2 = mustAsSpecializedMutableMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// AsImmutableCommitTxnMessageV2 converts an ImmutableMessage to ImmutableCommitTxnMessageV2
var AsImmutableCommitTxnMessageV2 = asSpecializedImmutableMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// MustAsImmutableCommitTxnMessageV2 converts an ImmutableMessage to ImmutableCommitTxnMessageV2, panics on error
var MustAsImmutableCommitTxnMessageV2 = MustAsSpecializedImmutableMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// AsBroadcastCommitTxnMessageV2 converts a BasicMessage to BroadcastCommitTxnMessageV2
var AsBroadcastCommitTxnMessageV2 = asSpecializedBroadcastMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// MustAsBroadcastCommitTxnMessageV2 converts a BasicMessage to BroadcastCommitTxnMessageV2, panics on error
var MustAsBroadcastCommitTxnMessageV2 = MustAsSpecializedBroadcastMessage[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// NewCommitTxnMessageBuilderV2 creates a new message builder for CommitTxnMessageV2
var NewCommitTxnMessageBuilderV2 = newMutableMessageBuilder[*CommitTxnMessageHeader, *CommitTxnMessageBody]

// Type aliases for RollbackTxnMessageV2
type (
	MutableRollbackTxnMessageV2   = specializedMutableMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]
	ImmutableRollbackTxnMessageV2 = SpecializedImmutableMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]
	BroadcastRollbackTxnMessageV2 = SpecializedBroadcastMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]
)

// MessageTypeWithVersion for RollbackTxnMessageV2
var MessageTypeRollbackTxnV2 = MessageTypeWithVersion{
	MessageType: MessageTypeRollbackTxn,
	Version:     VersionV2,
}

// MessageSpecializedType for RollbackTxnMessageV2
var SpecializedTypeRollbackTxnV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*RollbackTxnMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*RollbackTxnMessageHeader)(nil)),
}

// AsMutableRollbackTxnMessageV2 converts a BasicMessage to MutableRollbackTxnMessageV2
var AsMutableRollbackTxnMessageV2 = asSpecializedMutableMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// MustAsMutableRollbackTxnMessageV2 converts a BasicMessage to MutableRollbackTxnMessageV2, panics on error
var MustAsMutableRollbackTxnMessageV2 = mustAsSpecializedMutableMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// AsImmutableRollbackTxnMessageV2 converts an ImmutableMessage to ImmutableRollbackTxnMessageV2
var AsImmutableRollbackTxnMessageV2 = asSpecializedImmutableMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// MustAsImmutableRollbackTxnMessageV2 converts an ImmutableMessage to ImmutableRollbackTxnMessageV2, panics on error
var MustAsImmutableRollbackTxnMessageV2 = MustAsSpecializedImmutableMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// AsBroadcastRollbackTxnMessageV2 converts a BasicMessage to BroadcastRollbackTxnMessageV2
var AsBroadcastRollbackTxnMessageV2 = asSpecializedBroadcastMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// MustAsBroadcastRollbackTxnMessageV2 converts a BasicMessage to BroadcastRollbackTxnMessageV2, panics on error
var MustAsBroadcastRollbackTxnMessageV2 = MustAsSpecializedBroadcastMessage[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// NewRollbackTxnMessageBuilderV2 creates a new message builder for RollbackTxnMessageV2
var NewRollbackTxnMessageBuilderV2 = newMutableMessageBuilder[*RollbackTxnMessageHeader, *RollbackTxnMessageBody]

// Type aliases for TxnMessageV2
type (
	MutableTxnMessageV2   = specializedMutableMessage[*TxnMessageHeader, *TxnMessageBody]
	ImmutableTxnMessageV2 = SpecializedImmutableMessage[*TxnMessageHeader, *TxnMessageBody]
	BroadcastTxnMessageV2 = SpecializedBroadcastMessage[*TxnMessageHeader, *TxnMessageBody]
)

// MessageTypeWithVersion for TxnMessageV2
var MessageTypeTxnV2 = MessageTypeWithVersion{
	MessageType: MessageTypeTxn,
	Version:     VersionV2,
}

// MessageSpecializedType for TxnMessageV2
var SpecializedTypeTxnV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*TxnMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*TxnMessageHeader)(nil)),
}

// Type aliases for SchemaChangeMessageV2
type (
	MutableSchemaChangeMessageV2   = specializedMutableMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]
	ImmutableSchemaChangeMessageV2 = SpecializedImmutableMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]
	BroadcastSchemaChangeMessageV2 = SpecializedBroadcastMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]
)

// MessageTypeWithVersion for SchemaChangeMessageV2
var MessageTypeSchemaChangeV2 = MessageTypeWithVersion{
	MessageType: MessageTypeSchemaChange,
	Version:     VersionV2,
}

// MessageSpecializedType for SchemaChangeMessageV2
var SpecializedTypeSchemaChangeV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*SchemaChangeMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*SchemaChangeMessageHeader)(nil)),
}

// AsMutableSchemaChangeMessageV2 converts a BasicMessage to MutableSchemaChangeMessageV2
var AsMutableSchemaChangeMessageV2 = asSpecializedMutableMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// MustAsMutableSchemaChangeMessageV2 converts a BasicMessage to MutableSchemaChangeMessageV2, panics on error
var MustAsMutableSchemaChangeMessageV2 = mustAsSpecializedMutableMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// AsImmutableSchemaChangeMessageV2 converts an ImmutableMessage to ImmutableSchemaChangeMessageV2
var AsImmutableSchemaChangeMessageV2 = asSpecializedImmutableMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// MustAsImmutableSchemaChangeMessageV2 converts an ImmutableMessage to ImmutableSchemaChangeMessageV2, panics on error
var MustAsImmutableSchemaChangeMessageV2 = MustAsSpecializedImmutableMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// AsBroadcastSchemaChangeMessageV2 converts a BasicMessage to BroadcastSchemaChangeMessageV2
var AsBroadcastSchemaChangeMessageV2 = asSpecializedBroadcastMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// MustAsBroadcastSchemaChangeMessageV2 converts a BasicMessage to BroadcastSchemaChangeMessageV2, panics on error
var MustAsBroadcastSchemaChangeMessageV2 = MustAsSpecializedBroadcastMessage[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// NewSchemaChangeMessageBuilderV2 creates a new message builder for SchemaChangeMessageV2
var NewSchemaChangeMessageBuilderV2 = newMutableMessageBuilder[*SchemaChangeMessageHeader, *SchemaChangeMessageBody]

// Type aliases for PutCollectionMessageV2
type (
	MutablePutCollectionMessageV2   = specializedMutableMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]
	ImmutablePutCollectionMessageV2 = SpecializedImmutableMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]
	BroadcastPutCollectionMessageV2 = SpecializedBroadcastMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]
)

// MessageTypeWithVersion for PutCollectionMessageV2
var MessageTypePutCollectionV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutCollection,
	Version:     VersionV2,
}

// MessageSpecializedType for PutCollectionMessageV2
var SpecializedTypePutCollectionV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutCollectionMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutCollectionMessageHeader)(nil)),
}

// AsMutablePutCollectionMessageV2 converts a BasicMessage to MutablePutCollectionMessageV2
var AsMutablePutCollectionMessageV2 = asSpecializedMutableMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// MustAsMutablePutCollectionMessageV2 converts a BasicMessage to MutablePutCollectionMessageV2, panics on error
var MustAsMutablePutCollectionMessageV2 = mustAsSpecializedMutableMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// AsImmutablePutCollectionMessageV2 converts an ImmutableMessage to ImmutablePutCollectionMessageV2
var AsImmutablePutCollectionMessageV2 = asSpecializedImmutableMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// MustAsImmutablePutCollectionMessageV2 converts an ImmutableMessage to ImmutablePutCollectionMessageV2, panics on error
var MustAsImmutablePutCollectionMessageV2 = MustAsSpecializedImmutableMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// AsBroadcastPutCollectionMessageV2 converts a BasicMessage to BroadcastPutCollectionMessageV2
var AsBroadcastPutCollectionMessageV2 = asSpecializedBroadcastMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// MustAsBroadcastPutCollectionMessageV2 converts a BasicMessage to BroadcastPutCollectionMessageV2, panics on error
var MustAsBroadcastPutCollectionMessageV2 = MustAsSpecializedBroadcastMessage[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// NewPutCollectionMessageBuilderV2 creates a new message builder for PutCollectionMessageV2
var NewPutCollectionMessageBuilderV2 = newMutableMessageBuilder[*PutCollectionMessageHeader, *PutCollectionMessageBody]

// Type aliases for CreateDatabaseMessageV2
type (
	MutableCreateDatabaseMessageV2   = specializedMutableMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]
	ImmutableCreateDatabaseMessageV2 = SpecializedImmutableMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]
	BroadcastCreateDatabaseMessageV2 = SpecializedBroadcastMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]
)

// MessageTypeWithVersion for CreateDatabaseMessageV2
var MessageTypeCreateDatabaseV2 = MessageTypeWithVersion{
	MessageType: MessageTypeCreateDatabase,
	Version:     VersionV2,
}

// MessageSpecializedType for CreateDatabaseMessageV2
var SpecializedTypeCreateDatabaseV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CreateDatabaseMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*CreateDatabaseMessageHeader)(nil)),
}

// AsMutableCreateDatabaseMessageV2 converts a BasicMessage to MutableCreateDatabaseMessageV2
var AsMutableCreateDatabaseMessageV2 = asSpecializedMutableMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// MustAsMutableCreateDatabaseMessageV2 converts a BasicMessage to MutableCreateDatabaseMessageV2, panics on error
var MustAsMutableCreateDatabaseMessageV2 = mustAsSpecializedMutableMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// AsImmutableCreateDatabaseMessageV2 converts an ImmutableMessage to ImmutableCreateDatabaseMessageV2
var AsImmutableCreateDatabaseMessageV2 = asSpecializedImmutableMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// MustAsImmutableCreateDatabaseMessageV2 converts an ImmutableMessage to ImmutableCreateDatabaseMessageV2, panics on error
var MustAsImmutableCreateDatabaseMessageV2 = MustAsSpecializedImmutableMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// AsBroadcastCreateDatabaseMessageV2 converts a BasicMessage to BroadcastCreateDatabaseMessageV2
var AsBroadcastCreateDatabaseMessageV2 = asSpecializedBroadcastMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// MustAsBroadcastCreateDatabaseMessageV2 converts a BasicMessage to BroadcastCreateDatabaseMessageV2, panics on error
var MustAsBroadcastCreateDatabaseMessageV2 = MustAsSpecializedBroadcastMessage[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// NewCreateDatabaseMessageBuilderV2 creates a new message builder for CreateDatabaseMessageV2
var NewCreateDatabaseMessageBuilderV2 = newMutableMessageBuilder[*CreateDatabaseMessageHeader, *CreateDatabaseMessageBody]

// Type aliases for PutDatabaseMessageV2
type (
	MutablePutDatabaseMessageV2   = specializedMutableMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]
	ImmutablePutDatabaseMessageV2 = SpecializedImmutableMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]
	BroadcastPutDatabaseMessageV2 = SpecializedBroadcastMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]
)

// MessageTypeWithVersion for PutDatabaseMessageV2
var MessageTypePutDatabaseV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutDatabase,
	Version:     VersionV2,
}

// MessageSpecializedType for PutDatabaseMessageV2
var SpecializedTypePutDatabaseV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutDatabaseMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutDatabaseMessageHeader)(nil)),
}

// AsMutablePutDatabaseMessageV2 converts a BasicMessage to MutablePutDatabaseMessageV2
var AsMutablePutDatabaseMessageV2 = asSpecializedMutableMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// MustAsMutablePutDatabaseMessageV2 converts a BasicMessage to MutablePutDatabaseMessageV2, panics on error
var MustAsMutablePutDatabaseMessageV2 = mustAsSpecializedMutableMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// AsImmutablePutDatabaseMessageV2 converts an ImmutableMessage to ImmutablePutDatabaseMessageV2
var AsImmutablePutDatabaseMessageV2 = asSpecializedImmutableMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// MustAsImmutablePutDatabaseMessageV2 converts an ImmutableMessage to ImmutablePutDatabaseMessageV2, panics on error
var MustAsImmutablePutDatabaseMessageV2 = MustAsSpecializedImmutableMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// AsBroadcastPutDatabaseMessageV2 converts a BasicMessage to BroadcastPutDatabaseMessageV2
var AsBroadcastPutDatabaseMessageV2 = asSpecializedBroadcastMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// MustAsBroadcastPutDatabaseMessageV2 converts a BasicMessage to BroadcastPutDatabaseMessageV2, panics on error
var MustAsBroadcastPutDatabaseMessageV2 = MustAsSpecializedBroadcastMessage[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// NewPutDatabaseMessageBuilderV2 creates a new message builder for PutDatabaseMessageV2
var NewPutDatabaseMessageBuilderV2 = newMutableMessageBuilder[*PutDatabaseMessageHeader, *PutDatabaseMessageBody]

// Type aliases for DropDatabaseMessageV2
type (
	MutableDropDatabaseMessageV2   = specializedMutableMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]
	ImmutableDropDatabaseMessageV2 = SpecializedImmutableMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]
	BroadcastDropDatabaseMessageV2 = SpecializedBroadcastMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]
)

// MessageTypeWithVersion for DropDatabaseMessageV2
var MessageTypeDropDatabaseV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropDatabase,
	Version:     VersionV2,
}

// MessageSpecializedType for DropDatabaseMessageV2
var SpecializedTypeDropDatabaseV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropDatabaseMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropDatabaseMessageHeader)(nil)),
}

// AsMutableDropDatabaseMessageV2 converts a BasicMessage to MutableDropDatabaseMessageV2
var AsMutableDropDatabaseMessageV2 = asSpecializedMutableMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// MustAsMutableDropDatabaseMessageV2 converts a BasicMessage to MutableDropDatabaseMessageV2, panics on error
var MustAsMutableDropDatabaseMessageV2 = mustAsSpecializedMutableMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// AsImmutableDropDatabaseMessageV2 converts an ImmutableMessage to ImmutableDropDatabaseMessageV2
var AsImmutableDropDatabaseMessageV2 = asSpecializedImmutableMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// MustAsImmutableDropDatabaseMessageV2 converts an ImmutableMessage to ImmutableDropDatabaseMessageV2, panics on error
var MustAsImmutableDropDatabaseMessageV2 = MustAsSpecializedImmutableMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// AsBroadcastDropDatabaseMessageV2 converts a BasicMessage to BroadcastDropDatabaseMessageV2
var AsBroadcastDropDatabaseMessageV2 = asSpecializedBroadcastMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// MustAsBroadcastDropDatabaseMessageV2 converts a BasicMessage to BroadcastDropDatabaseMessageV2, panics on error
var MustAsBroadcastDropDatabaseMessageV2 = MustAsSpecializedBroadcastMessage[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// NewDropDatabaseMessageBuilderV2 creates a new message builder for DropDatabaseMessageV2
var NewDropDatabaseMessageBuilderV2 = newMutableMessageBuilder[*DropDatabaseMessageHeader, *DropDatabaseMessageBody]

// Type aliases for PutAliasMessageV2
type (
	MutablePutAliasMessageV2   = specializedMutableMessage[*PutAliasMessageHeader, *PutAliasMessageBody]
	ImmutablePutAliasMessageV2 = SpecializedImmutableMessage[*PutAliasMessageHeader, *PutAliasMessageBody]
	BroadcastPutAliasMessageV2 = SpecializedBroadcastMessage[*PutAliasMessageHeader, *PutAliasMessageBody]
)

// MessageTypeWithVersion for PutAliasMessageV2
var MessageTypePutAliasV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutAlias,
	Version:     VersionV2,
}

// MessageSpecializedType for PutAliasMessageV2
var SpecializedTypePutAliasV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutAliasMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutAliasMessageHeader)(nil)),
}

// AsMutablePutAliasMessageV2 converts a BasicMessage to MutablePutAliasMessageV2
var AsMutablePutAliasMessageV2 = asSpecializedMutableMessage[*PutAliasMessageHeader, *PutAliasMessageBody]

// MustAsMutablePutAliasMessageV2 converts a BasicMessage to MutablePutAliasMessageV2, panics on error
var MustAsMutablePutAliasMessageV2 = mustAsSpecializedMutableMessage[*PutAliasMessageHeader, *PutAliasMessageBody]

// AsImmutablePutAliasMessageV2 converts an ImmutableMessage to ImmutablePutAliasMessageV2
var AsImmutablePutAliasMessageV2 = asSpecializedImmutableMessage[*PutAliasMessageHeader, *PutAliasMessageBody]

// MustAsImmutablePutAliasMessageV2 converts an ImmutableMessage to ImmutablePutAliasMessageV2, panics on error
var MustAsImmutablePutAliasMessageV2 = MustAsSpecializedImmutableMessage[*PutAliasMessageHeader, *PutAliasMessageBody]

// AsBroadcastPutAliasMessageV2 converts a BasicMessage to BroadcastPutAliasMessageV2
var AsBroadcastPutAliasMessageV2 = asSpecializedBroadcastMessage[*PutAliasMessageHeader, *PutAliasMessageBody]

// MustAsBroadcastPutAliasMessageV2 converts a BasicMessage to BroadcastPutAliasMessageV2, panics on error
var MustAsBroadcastPutAliasMessageV2 = MustAsSpecializedBroadcastMessage[*PutAliasMessageHeader, *PutAliasMessageBody]

// NewPutAliasMessageBuilderV2 creates a new message builder for PutAliasMessageV2
var NewPutAliasMessageBuilderV2 = newMutableMessageBuilder[*PutAliasMessageHeader, *PutAliasMessageBody]

// Type aliases for DropAliasMessageV2
type (
	MutableDropAliasMessageV2   = specializedMutableMessage[*DropAliasMessageHeader, *DropAliasMessageBody]
	ImmutableDropAliasMessageV2 = SpecializedImmutableMessage[*DropAliasMessageHeader, *DropAliasMessageBody]
	BroadcastDropAliasMessageV2 = SpecializedBroadcastMessage[*DropAliasMessageHeader, *DropAliasMessageBody]
)

// MessageTypeWithVersion for DropAliasMessageV2
var MessageTypeDropAliasV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropAlias,
	Version:     VersionV2,
}

// MessageSpecializedType for DropAliasMessageV2
var SpecializedTypeDropAliasV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropAliasMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropAliasMessageHeader)(nil)),
}

// AsMutableDropAliasMessageV2 converts a BasicMessage to MutableDropAliasMessageV2
var AsMutableDropAliasMessageV2 = asSpecializedMutableMessage[*DropAliasMessageHeader, *DropAliasMessageBody]

// MustAsMutableDropAliasMessageV2 converts a BasicMessage to MutableDropAliasMessageV2, panics on error
var MustAsMutableDropAliasMessageV2 = mustAsSpecializedMutableMessage[*DropAliasMessageHeader, *DropAliasMessageBody]

// AsImmutableDropAliasMessageV2 converts an ImmutableMessage to ImmutableDropAliasMessageV2
var AsImmutableDropAliasMessageV2 = asSpecializedImmutableMessage[*DropAliasMessageHeader, *DropAliasMessageBody]

// MustAsImmutableDropAliasMessageV2 converts an ImmutableMessage to ImmutableDropAliasMessageV2, panics on error
var MustAsImmutableDropAliasMessageV2 = MustAsSpecializedImmutableMessage[*DropAliasMessageHeader, *DropAliasMessageBody]

// AsBroadcastDropAliasMessageV2 converts a BasicMessage to BroadcastDropAliasMessageV2
var AsBroadcastDropAliasMessageV2 = asSpecializedBroadcastMessage[*DropAliasMessageHeader, *DropAliasMessageBody]

// MustAsBroadcastDropAliasMessageV2 converts a BasicMessage to BroadcastDropAliasMessageV2, panics on error
var MustAsBroadcastDropAliasMessageV2 = MustAsSpecializedBroadcastMessage[*DropAliasMessageHeader, *DropAliasMessageBody]

// NewDropAliasMessageBuilderV2 creates a new message builder for DropAliasMessageV2
var NewDropAliasMessageBuilderV2 = newMutableMessageBuilder[*DropAliasMessageHeader, *DropAliasMessageBody]

// Type aliases for CreateUserMessageV2
type (
	MutableCreateUserMessageV2   = specializedMutableMessage[*CreateUserMessageHeader, *CreateUserMessageBody]
	ImmutableCreateUserMessageV2 = SpecializedImmutableMessage[*CreateUserMessageHeader, *CreateUserMessageBody]
	BroadcastCreateUserMessageV2 = SpecializedBroadcastMessage[*CreateUserMessageHeader, *CreateUserMessageBody]
)

// MessageTypeWithVersion for CreateUserMessageV2
var MessageTypeCreateUserV2 = MessageTypeWithVersion{
	MessageType: MessageTypeCreateUser,
	Version:     VersionV2,
}

// MessageSpecializedType for CreateUserMessageV2
var SpecializedTypeCreateUserV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CreateUserMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*CreateUserMessageHeader)(nil)),
}

// AsMutableCreateUserMessageV2 converts a BasicMessage to MutableCreateUserMessageV2
var AsMutableCreateUserMessageV2 = asSpecializedMutableMessage[*CreateUserMessageHeader, *CreateUserMessageBody]

// MustAsMutableCreateUserMessageV2 converts a BasicMessage to MutableCreateUserMessageV2, panics on error
var MustAsMutableCreateUserMessageV2 = mustAsSpecializedMutableMessage[*CreateUserMessageHeader, *CreateUserMessageBody]

// AsImmutableCreateUserMessageV2 converts an ImmutableMessage to ImmutableCreateUserMessageV2
var AsImmutableCreateUserMessageV2 = asSpecializedImmutableMessage[*CreateUserMessageHeader, *CreateUserMessageBody]

// MustAsImmutableCreateUserMessageV2 converts an ImmutableMessage to ImmutableCreateUserMessageV2, panics on error
var MustAsImmutableCreateUserMessageV2 = MustAsSpecializedImmutableMessage[*CreateUserMessageHeader, *CreateUserMessageBody]

// AsBroadcastCreateUserMessageV2 converts a BasicMessage to BroadcastCreateUserMessageV2
var AsBroadcastCreateUserMessageV2 = asSpecializedBroadcastMessage[*CreateUserMessageHeader, *CreateUserMessageBody]

// MustAsBroadcastCreateUserMessageV2 converts a BasicMessage to BroadcastCreateUserMessageV2, panics on error
var MustAsBroadcastCreateUserMessageV2 = MustAsSpecializedBroadcastMessage[*CreateUserMessageHeader, *CreateUserMessageBody]

// NewCreateUserMessageBuilderV2 creates a new message builder for CreateUserMessageV2
var NewCreateUserMessageBuilderV2 = newMutableMessageBuilder[*CreateUserMessageHeader, *CreateUserMessageBody]

// Type aliases for PutUserMessageV2
type (
	MutablePutUserMessageV2   = specializedMutableMessage[*PutUserMessageHeader, *PutUserMessageBody]
	ImmutablePutUserMessageV2 = SpecializedImmutableMessage[*PutUserMessageHeader, *PutUserMessageBody]
	BroadcastPutUserMessageV2 = SpecializedBroadcastMessage[*PutUserMessageHeader, *PutUserMessageBody]
)

// MessageTypeWithVersion for PutUserMessageV2
var MessageTypePutUserV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutUser,
	Version:     VersionV2,
}

// MessageSpecializedType for PutUserMessageV2
var SpecializedTypePutUserV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutUserMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutUserMessageHeader)(nil)),
}

// AsMutablePutUserMessageV2 converts a BasicMessage to MutablePutUserMessageV2
var AsMutablePutUserMessageV2 = asSpecializedMutableMessage[*PutUserMessageHeader, *PutUserMessageBody]

// MustAsMutablePutUserMessageV2 converts a BasicMessage to MutablePutUserMessageV2, panics on error
var MustAsMutablePutUserMessageV2 = mustAsSpecializedMutableMessage[*PutUserMessageHeader, *PutUserMessageBody]

// AsImmutablePutUserMessageV2 converts an ImmutableMessage to ImmutablePutUserMessageV2
var AsImmutablePutUserMessageV2 = asSpecializedImmutableMessage[*PutUserMessageHeader, *PutUserMessageBody]

// MustAsImmutablePutUserMessageV2 converts an ImmutableMessage to ImmutablePutUserMessageV2, panics on error
var MustAsImmutablePutUserMessageV2 = MustAsSpecializedImmutableMessage[*PutUserMessageHeader, *PutUserMessageBody]

// AsBroadcastPutUserMessageV2 converts a BasicMessage to BroadcastPutUserMessageV2
var AsBroadcastPutUserMessageV2 = asSpecializedBroadcastMessage[*PutUserMessageHeader, *PutUserMessageBody]

// MustAsBroadcastPutUserMessageV2 converts a BasicMessage to BroadcastPutUserMessageV2, panics on error
var MustAsBroadcastPutUserMessageV2 = MustAsSpecializedBroadcastMessage[*PutUserMessageHeader, *PutUserMessageBody]

// NewPutUserMessageBuilderV2 creates a new message builder for PutUserMessageV2
var NewPutUserMessageBuilderV2 = newMutableMessageBuilder[*PutUserMessageHeader, *PutUserMessageBody]

// Type aliases for DropUserMessageV2
type (
	MutableDropUserMessageV2   = specializedMutableMessage[*DropUserMessageHeader, *DropUserMessageBody]
	ImmutableDropUserMessageV2 = SpecializedImmutableMessage[*DropUserMessageHeader, *DropUserMessageBody]
	BroadcastDropUserMessageV2 = SpecializedBroadcastMessage[*DropUserMessageHeader, *DropUserMessageBody]
)

// MessageTypeWithVersion for DropUserMessageV2
var MessageTypeDropUserV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropUser,
	Version:     VersionV2,
}

// MessageSpecializedType for DropUserMessageV2
var SpecializedTypeDropUserV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropUserMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropUserMessageHeader)(nil)),
}

// AsMutableDropUserMessageV2 converts a BasicMessage to MutableDropUserMessageV2
var AsMutableDropUserMessageV2 = asSpecializedMutableMessage[*DropUserMessageHeader, *DropUserMessageBody]

// MustAsMutableDropUserMessageV2 converts a BasicMessage to MutableDropUserMessageV2, panics on error
var MustAsMutableDropUserMessageV2 = mustAsSpecializedMutableMessage[*DropUserMessageHeader, *DropUserMessageBody]

// AsImmutableDropUserMessageV2 converts an ImmutableMessage to ImmutableDropUserMessageV2
var AsImmutableDropUserMessageV2 = asSpecializedImmutableMessage[*DropUserMessageHeader, *DropUserMessageBody]

// MustAsImmutableDropUserMessageV2 converts an ImmutableMessage to ImmutableDropUserMessageV2, panics on error
var MustAsImmutableDropUserMessageV2 = MustAsSpecializedImmutableMessage[*DropUserMessageHeader, *DropUserMessageBody]

// AsBroadcastDropUserMessageV2 converts a BasicMessage to BroadcastDropUserMessageV2
var AsBroadcastDropUserMessageV2 = asSpecializedBroadcastMessage[*DropUserMessageHeader, *DropUserMessageBody]

// MustAsBroadcastDropUserMessageV2 converts a BasicMessage to BroadcastDropUserMessageV2, panics on error
var MustAsBroadcastDropUserMessageV2 = MustAsSpecializedBroadcastMessage[*DropUserMessageHeader, *DropUserMessageBody]

// NewDropUserMessageBuilderV2 creates a new message builder for DropUserMessageV2
var NewDropUserMessageBuilderV2 = newMutableMessageBuilder[*DropUserMessageHeader, *DropUserMessageBody]

// Type aliases for CreateRoleMessageV2
type (
	MutableCreateRoleMessageV2   = specializedMutableMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]
	ImmutableCreateRoleMessageV2 = SpecializedImmutableMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]
	BroadcastCreateRoleMessageV2 = SpecializedBroadcastMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]
)

// MessageTypeWithVersion for CreateRoleMessageV2
var MessageTypeCreateRoleV2 = MessageTypeWithVersion{
	MessageType: MessageTypeCreateRole,
	Version:     VersionV2,
}

// MessageSpecializedType for CreateRoleMessageV2
var SpecializedTypeCreateRoleV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*CreateRoleMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*CreateRoleMessageHeader)(nil)),
}

// AsMutableCreateRoleMessageV2 converts a BasicMessage to MutableCreateRoleMessageV2
var AsMutableCreateRoleMessageV2 = asSpecializedMutableMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// MustAsMutableCreateRoleMessageV2 converts a BasicMessage to MutableCreateRoleMessageV2, panics on error
var MustAsMutableCreateRoleMessageV2 = mustAsSpecializedMutableMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// AsImmutableCreateRoleMessageV2 converts an ImmutableMessage to ImmutableCreateRoleMessageV2
var AsImmutableCreateRoleMessageV2 = asSpecializedImmutableMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// MustAsImmutableCreateRoleMessageV2 converts an ImmutableMessage to ImmutableCreateRoleMessageV2, panics on error
var MustAsImmutableCreateRoleMessageV2 = MustAsSpecializedImmutableMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// AsBroadcastCreateRoleMessageV2 converts a BasicMessage to BroadcastCreateRoleMessageV2
var AsBroadcastCreateRoleMessageV2 = asSpecializedBroadcastMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// MustAsBroadcastCreateRoleMessageV2 converts a BasicMessage to BroadcastCreateRoleMessageV2, panics on error
var MustAsBroadcastCreateRoleMessageV2 = MustAsSpecializedBroadcastMessage[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// NewCreateRoleMessageBuilderV2 creates a new message builder for CreateRoleMessageV2
var NewCreateRoleMessageBuilderV2 = newMutableMessageBuilder[*CreateRoleMessageHeader, *CreateRoleMessageBody]

// Type aliases for PutRoleMessageV2
type (
	MutablePutRoleMessageV2   = specializedMutableMessage[*PutRoleMessageHeader, *PutRoleMessageBody]
	ImmutablePutRoleMessageV2 = SpecializedImmutableMessage[*PutRoleMessageHeader, *PutRoleMessageBody]
	BroadcastPutRoleMessageV2 = SpecializedBroadcastMessage[*PutRoleMessageHeader, *PutRoleMessageBody]
)

// MessageTypeWithVersion for PutRoleMessageV2
var MessageTypePutRoleV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutRole,
	Version:     VersionV2,
}

// MessageSpecializedType for PutRoleMessageV2
var SpecializedTypePutRoleV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutRoleMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutRoleMessageHeader)(nil)),
}

// AsMutablePutRoleMessageV2 converts a BasicMessage to MutablePutRoleMessageV2
var AsMutablePutRoleMessageV2 = asSpecializedMutableMessage[*PutRoleMessageHeader, *PutRoleMessageBody]

// MustAsMutablePutRoleMessageV2 converts a BasicMessage to MutablePutRoleMessageV2, panics on error
var MustAsMutablePutRoleMessageV2 = mustAsSpecializedMutableMessage[*PutRoleMessageHeader, *PutRoleMessageBody]

// AsImmutablePutRoleMessageV2 converts an ImmutableMessage to ImmutablePutRoleMessageV2
var AsImmutablePutRoleMessageV2 = asSpecializedImmutableMessage[*PutRoleMessageHeader, *PutRoleMessageBody]

// MustAsImmutablePutRoleMessageV2 converts an ImmutableMessage to ImmutablePutRoleMessageV2, panics on error
var MustAsImmutablePutRoleMessageV2 = MustAsSpecializedImmutableMessage[*PutRoleMessageHeader, *PutRoleMessageBody]

// AsBroadcastPutRoleMessageV2 converts a BasicMessage to BroadcastPutRoleMessageV2
var AsBroadcastPutRoleMessageV2 = asSpecializedBroadcastMessage[*PutRoleMessageHeader, *PutRoleMessageBody]

// MustAsBroadcastPutRoleMessageV2 converts a BasicMessage to BroadcastPutRoleMessageV2, panics on error
var MustAsBroadcastPutRoleMessageV2 = MustAsSpecializedBroadcastMessage[*PutRoleMessageHeader, *PutRoleMessageBody]

// NewPutRoleMessageBuilderV2 creates a new message builder for PutRoleMessageV2
var NewPutRoleMessageBuilderV2 = newMutableMessageBuilder[*PutRoleMessageHeader, *PutRoleMessageBody]

// Type aliases for DropRoleMessageV2
type (
	MutableDropRoleMessageV2   = specializedMutableMessage[*DropRoleMessageHeader, *DropRoleMessageBody]
	ImmutableDropRoleMessageV2 = SpecializedImmutableMessage[*DropRoleMessageHeader, *DropRoleMessageBody]
	BroadcastDropRoleMessageV2 = SpecializedBroadcastMessage[*DropRoleMessageHeader, *DropRoleMessageBody]
)

// MessageTypeWithVersion for DropRoleMessageV2
var MessageTypeDropRoleV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropRole,
	Version:     VersionV2,
}

// MessageSpecializedType for DropRoleMessageV2
var SpecializedTypeDropRoleV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropRoleMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropRoleMessageHeader)(nil)),
}

// AsMutableDropRoleMessageV2 converts a BasicMessage to MutableDropRoleMessageV2
var AsMutableDropRoleMessageV2 = asSpecializedMutableMessage[*DropRoleMessageHeader, *DropRoleMessageBody]

// MustAsMutableDropRoleMessageV2 converts a BasicMessage to MutableDropRoleMessageV2, panics on error
var MustAsMutableDropRoleMessageV2 = mustAsSpecializedMutableMessage[*DropRoleMessageHeader, *DropRoleMessageBody]

// AsImmutableDropRoleMessageV2 converts an ImmutableMessage to ImmutableDropRoleMessageV2
var AsImmutableDropRoleMessageV2 = asSpecializedImmutableMessage[*DropRoleMessageHeader, *DropRoleMessageBody]

// MustAsImmutableDropRoleMessageV2 converts an ImmutableMessage to ImmutableDropRoleMessageV2, panics on error
var MustAsImmutableDropRoleMessageV2 = MustAsSpecializedImmutableMessage[*DropRoleMessageHeader, *DropRoleMessageBody]

// AsBroadcastDropRoleMessageV2 converts a BasicMessage to BroadcastDropRoleMessageV2
var AsBroadcastDropRoleMessageV2 = asSpecializedBroadcastMessage[*DropRoleMessageHeader, *DropRoleMessageBody]

// MustAsBroadcastDropRoleMessageV2 converts a BasicMessage to BroadcastDropRoleMessageV2, panics on error
var MustAsBroadcastDropRoleMessageV2 = MustAsSpecializedBroadcastMessage[*DropRoleMessageHeader, *DropRoleMessageBody]

// NewDropRoleMessageBuilderV2 creates a new message builder for DropRoleMessageV2
var NewDropRoleMessageBuilderV2 = newMutableMessageBuilder[*DropRoleMessageHeader, *DropRoleMessageBody]

// Type aliases for PutUserRoleMessageV2
type (
	MutablePutUserRoleMessageV2   = specializedMutableMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]
	ImmutablePutUserRoleMessageV2 = SpecializedImmutableMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]
	BroadcastPutUserRoleMessageV2 = SpecializedBroadcastMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]
)

// MessageTypeWithVersion for PutUserRoleMessageV2
var MessageTypePutUserRoleV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutUserRole,
	Version:     VersionV2,
}

// MessageSpecializedType for PutUserRoleMessageV2
var SpecializedTypePutUserRoleV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutUserRoleMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutUserRoleMessageHeader)(nil)),
}

// AsMutablePutUserRoleMessageV2 converts a BasicMessage to MutablePutUserRoleMessageV2
var AsMutablePutUserRoleMessageV2 = asSpecializedMutableMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// MustAsMutablePutUserRoleMessageV2 converts a BasicMessage to MutablePutUserRoleMessageV2, panics on error
var MustAsMutablePutUserRoleMessageV2 = mustAsSpecializedMutableMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// AsImmutablePutUserRoleMessageV2 converts an ImmutableMessage to ImmutablePutUserRoleMessageV2
var AsImmutablePutUserRoleMessageV2 = asSpecializedImmutableMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// MustAsImmutablePutUserRoleMessageV2 converts an ImmutableMessage to ImmutablePutUserRoleMessageV2, panics on error
var MustAsImmutablePutUserRoleMessageV2 = MustAsSpecializedImmutableMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// AsBroadcastPutUserRoleMessageV2 converts a BasicMessage to BroadcastPutUserRoleMessageV2
var AsBroadcastPutUserRoleMessageV2 = asSpecializedBroadcastMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// MustAsBroadcastPutUserRoleMessageV2 converts a BasicMessage to BroadcastPutUserRoleMessageV2, panics on error
var MustAsBroadcastPutUserRoleMessageV2 = MustAsSpecializedBroadcastMessage[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// NewPutUserRoleMessageBuilderV2 creates a new message builder for PutUserRoleMessageV2
var NewPutUserRoleMessageBuilderV2 = newMutableMessageBuilder[*PutUserRoleMessageHeader, *PutUserRoleMessageBody]

// Type aliases for DropUserRoleMessageV2
type (
	MutableDropUserRoleMessageV2   = specializedMutableMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]
	ImmutableDropUserRoleMessageV2 = SpecializedImmutableMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]
	BroadcastDropUserRoleMessageV2 = SpecializedBroadcastMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]
)

// MessageTypeWithVersion for DropUserRoleMessageV2
var MessageTypeDropUserRoleV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropUserRole,
	Version:     VersionV2,
}

// MessageSpecializedType for DropUserRoleMessageV2
var SpecializedTypeDropUserRoleV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropUserRoleMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropUserRoleMessageHeader)(nil)),
}

// AsMutableDropUserRoleMessageV2 converts a BasicMessage to MutableDropUserRoleMessageV2
var AsMutableDropUserRoleMessageV2 = asSpecializedMutableMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// MustAsMutableDropUserRoleMessageV2 converts a BasicMessage to MutableDropUserRoleMessageV2, panics on error
var MustAsMutableDropUserRoleMessageV2 = mustAsSpecializedMutableMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// AsImmutableDropUserRoleMessageV2 converts an ImmutableMessage to ImmutableDropUserRoleMessageV2
var AsImmutableDropUserRoleMessageV2 = asSpecializedImmutableMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// MustAsImmutableDropUserRoleMessageV2 converts an ImmutableMessage to ImmutableDropUserRoleMessageV2, panics on error
var MustAsImmutableDropUserRoleMessageV2 = MustAsSpecializedImmutableMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// AsBroadcastDropUserRoleMessageV2 converts a BasicMessage to BroadcastDropUserRoleMessageV2
var AsBroadcastDropUserRoleMessageV2 = asSpecializedBroadcastMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// MustAsBroadcastDropUserRoleMessageV2 converts a BasicMessage to BroadcastDropUserRoleMessageV2, panics on error
var MustAsBroadcastDropUserRoleMessageV2 = MustAsSpecializedBroadcastMessage[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// NewDropUserRoleMessageBuilderV2 creates a new message builder for DropUserRoleMessageV2
var NewDropUserRoleMessageBuilderV2 = newMutableMessageBuilder[*DropUserRoleMessageHeader, *DropUserRoleMessageBody]

// Type aliases for GrantPrivilegeMessageV2
type (
	MutableGrantPrivilegeMessageV2   = specializedMutableMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]
	ImmutableGrantPrivilegeMessageV2 = SpecializedImmutableMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]
	BroadcastGrantPrivilegeMessageV2 = SpecializedBroadcastMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]
)

// MessageTypeWithVersion for GrantPrivilegeMessageV2
var MessageTypeGrantPrivilegeV2 = MessageTypeWithVersion{
	MessageType: MessageTypeGrantPrivilege,
	Version:     VersionV2,
}

// MessageSpecializedType for GrantPrivilegeMessageV2
var SpecializedTypeGrantPrivilegeV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*GrantPrivilegeMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*GrantPrivilegeMessageHeader)(nil)),
}

// AsMutableGrantPrivilegeMessageV2 converts a BasicMessage to MutableGrantPrivilegeMessageV2
var AsMutableGrantPrivilegeMessageV2 = asSpecializedMutableMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// MustAsMutableGrantPrivilegeMessageV2 converts a BasicMessage to MutableGrantPrivilegeMessageV2, panics on error
var MustAsMutableGrantPrivilegeMessageV2 = mustAsSpecializedMutableMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// AsImmutableGrantPrivilegeMessageV2 converts an ImmutableMessage to ImmutableGrantPrivilegeMessageV2
var AsImmutableGrantPrivilegeMessageV2 = asSpecializedImmutableMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// MustAsImmutableGrantPrivilegeMessageV2 converts an ImmutableMessage to ImmutableGrantPrivilegeMessageV2, panics on error
var MustAsImmutableGrantPrivilegeMessageV2 = MustAsSpecializedImmutableMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// AsBroadcastGrantPrivilegeMessageV2 converts a BasicMessage to BroadcastGrantPrivilegeMessageV2
var AsBroadcastGrantPrivilegeMessageV2 = asSpecializedBroadcastMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// MustAsBroadcastGrantPrivilegeMessageV2 converts a BasicMessage to BroadcastGrantPrivilegeMessageV2, panics on error
var MustAsBroadcastGrantPrivilegeMessageV2 = MustAsSpecializedBroadcastMessage[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// NewGrantPrivilegeMessageBuilderV2 creates a new message builder for GrantPrivilegeMessageV2
var NewGrantPrivilegeMessageBuilderV2 = newMutableMessageBuilder[*GrantPrivilegeMessageHeader, *GrantPrivilegeMessageBody]

// Type aliases for RevokePrivilegeMessageV2
type (
	MutableRevokePrivilegeMessageV2   = specializedMutableMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]
	ImmutableRevokePrivilegeMessageV2 = SpecializedImmutableMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]
	BroadcastRevokePrivilegeMessageV2 = SpecializedBroadcastMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]
)

// MessageTypeWithVersion for RevokePrivilegeMessageV2
var MessageTypeRevokePrivilegeV2 = MessageTypeWithVersion{
	MessageType: MessageTypeRevokePrivilege,
	Version:     VersionV2,
}

// MessageSpecializedType for RevokePrivilegeMessageV2
var SpecializedTypeRevokePrivilegeV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*RevokePrivilegeMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*RevokePrivilegeMessageHeader)(nil)),
}

// AsMutableRevokePrivilegeMessageV2 converts a BasicMessage to MutableRevokePrivilegeMessageV2
var AsMutableRevokePrivilegeMessageV2 = asSpecializedMutableMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// MustAsMutableRevokePrivilegeMessageV2 converts a BasicMessage to MutableRevokePrivilegeMessageV2, panics on error
var MustAsMutableRevokePrivilegeMessageV2 = mustAsSpecializedMutableMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// AsImmutableRevokePrivilegeMessageV2 converts an ImmutableMessage to ImmutableRevokePrivilegeMessageV2
var AsImmutableRevokePrivilegeMessageV2 = asSpecializedImmutableMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// MustAsImmutableRevokePrivilegeMessageV2 converts an ImmutableMessage to ImmutableRevokePrivilegeMessageV2, panics on error
var MustAsImmutableRevokePrivilegeMessageV2 = MustAsSpecializedImmutableMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// AsBroadcastRevokePrivilegeMessageV2 converts a BasicMessage to BroadcastRevokePrivilegeMessageV2
var AsBroadcastRevokePrivilegeMessageV2 = asSpecializedBroadcastMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// MustAsBroadcastRevokePrivilegeMessageV2 converts a BasicMessage to BroadcastRevokePrivilegeMessageV2, panics on error
var MustAsBroadcastRevokePrivilegeMessageV2 = MustAsSpecializedBroadcastMessage[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// NewRevokePrivilegeMessageBuilderV2 creates a new message builder for RevokePrivilegeMessageV2
var NewRevokePrivilegeMessageBuilderV2 = newMutableMessageBuilder[*RevokePrivilegeMessageHeader, *RevokePrivilegeMessageBody]

// Type aliases for PutPrivilegeGroupMessageV2
type (
	MutablePutPrivilegeGroupMessageV2   = specializedMutableMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]
	ImmutablePutPrivilegeGroupMessageV2 = SpecializedImmutableMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]
	BroadcastPutPrivilegeGroupMessageV2 = SpecializedBroadcastMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]
)

// MessageTypeWithVersion for PutPrivilegeGroupMessageV2
var MessageTypePutPrivilegeGroupV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutPrivilegeGroup,
	Version:     VersionV2,
}

// MessageSpecializedType for PutPrivilegeGroupMessageV2
var SpecializedTypePutPrivilegeGroupV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutPrivilegeGroupMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutPrivilegeGroupMessageHeader)(nil)),
}

// AsMutablePutPrivilegeGroupMessageV2 converts a BasicMessage to MutablePutPrivilegeGroupMessageV2
var AsMutablePutPrivilegeGroupMessageV2 = asSpecializedMutableMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// MustAsMutablePutPrivilegeGroupMessageV2 converts a BasicMessage to MutablePutPrivilegeGroupMessageV2, panics on error
var MustAsMutablePutPrivilegeGroupMessageV2 = mustAsSpecializedMutableMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// AsImmutablePutPrivilegeGroupMessageV2 converts an ImmutableMessage to ImmutablePutPrivilegeGroupMessageV2
var AsImmutablePutPrivilegeGroupMessageV2 = asSpecializedImmutableMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// MustAsImmutablePutPrivilegeGroupMessageV2 converts an ImmutableMessage to ImmutablePutPrivilegeGroupMessageV2, panics on error
var MustAsImmutablePutPrivilegeGroupMessageV2 = MustAsSpecializedImmutableMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// AsBroadcastPutPrivilegeGroupMessageV2 converts a BasicMessage to BroadcastPutPrivilegeGroupMessageV2
var AsBroadcastPutPrivilegeGroupMessageV2 = asSpecializedBroadcastMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// MustAsBroadcastPutPrivilegeGroupMessageV2 converts a BasicMessage to BroadcastPutPrivilegeGroupMessageV2, panics on error
var MustAsBroadcastPutPrivilegeGroupMessageV2 = MustAsSpecializedBroadcastMessage[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// NewPutPrivilegeGroupMessageBuilderV2 creates a new message builder for PutPrivilegeGroupMessageV2
var NewPutPrivilegeGroupMessageBuilderV2 = newMutableMessageBuilder[*PutPrivilegeGroupMessageHeader, *PutPrivilegeGroupMessageBody]

// Type aliases for DropPrivilegeGroupMessageV2
type (
	MutableDropPrivilegeGroupMessageV2   = specializedMutableMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]
	ImmutableDropPrivilegeGroupMessageV2 = SpecializedImmutableMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]
	BroadcastDropPrivilegeGroupMessageV2 = SpecializedBroadcastMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]
)

// MessageTypeWithVersion for DropPrivilegeGroupMessageV2
var MessageTypeDropPrivilegeGroupV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropPrivilegeGroup,
	Version:     VersionV2,
}

// MessageSpecializedType for DropPrivilegeGroupMessageV2
var SpecializedTypeDropPrivilegeGroupV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropPrivilegeGroupMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropPrivilegeGroupMessageHeader)(nil)),
}

// AsMutableDropPrivilegeGroupMessageV2 converts a BasicMessage to MutableDropPrivilegeGroupMessageV2
var AsMutableDropPrivilegeGroupMessageV2 = asSpecializedMutableMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// MustAsMutableDropPrivilegeGroupMessageV2 converts a BasicMessage to MutableDropPrivilegeGroupMessageV2, panics on error
var MustAsMutableDropPrivilegeGroupMessageV2 = mustAsSpecializedMutableMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// AsImmutableDropPrivilegeGroupMessageV2 converts an ImmutableMessage to ImmutableDropPrivilegeGroupMessageV2
var AsImmutableDropPrivilegeGroupMessageV2 = asSpecializedImmutableMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// MustAsImmutableDropPrivilegeGroupMessageV2 converts an ImmutableMessage to ImmutableDropPrivilegeGroupMessageV2, panics on error
var MustAsImmutableDropPrivilegeGroupMessageV2 = MustAsSpecializedImmutableMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// AsBroadcastDropPrivilegeGroupMessageV2 converts a BasicMessage to BroadcastDropPrivilegeGroupMessageV2
var AsBroadcastDropPrivilegeGroupMessageV2 = asSpecializedBroadcastMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// MustAsBroadcastDropPrivilegeGroupMessageV2 converts a BasicMessage to BroadcastDropPrivilegeGroupMessageV2, panics on error
var MustAsBroadcastDropPrivilegeGroupMessageV2 = MustAsSpecializedBroadcastMessage[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// NewDropPrivilegeGroupMessageBuilderV2 creates a new message builder for DropPrivilegeGroupMessageV2
var NewDropPrivilegeGroupMessageBuilderV2 = newMutableMessageBuilder[*DropPrivilegeGroupMessageHeader, *DropPrivilegeGroupMessageBody]

// Type aliases for PutResourceGroupMessageV2
type (
	MutablePutResourceGroupMessageV2   = specializedMutableMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]
	ImmutablePutResourceGroupMessageV2 = SpecializedImmutableMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]
	BroadcastPutResourceGroupMessageV2 = SpecializedBroadcastMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]
)

// MessageTypeWithVersion for PutResourceGroupMessageV2
var MessageTypePutResourceGroupV2 = MessageTypeWithVersion{
	MessageType: MessageTypePutResourceGroup,
	Version:     VersionV2,
}

// MessageSpecializedType for PutResourceGroupMessageV2
var SpecializedTypePutResourceGroupV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*PutResourceGroupMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*PutResourceGroupMessageHeader)(nil)),
}

// AsMutablePutResourceGroupMessageV2 converts a BasicMessage to MutablePutResourceGroupMessageV2
var AsMutablePutResourceGroupMessageV2 = asSpecializedMutableMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// MustAsMutablePutResourceGroupMessageV2 converts a BasicMessage to MutablePutResourceGroupMessageV2, panics on error
var MustAsMutablePutResourceGroupMessageV2 = mustAsSpecializedMutableMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// AsImmutablePutResourceGroupMessageV2 converts an ImmutableMessage to ImmutablePutResourceGroupMessageV2
var AsImmutablePutResourceGroupMessageV2 = asSpecializedImmutableMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// MustAsImmutablePutResourceGroupMessageV2 converts an ImmutableMessage to ImmutablePutResourceGroupMessageV2, panics on error
var MustAsImmutablePutResourceGroupMessageV2 = MustAsSpecializedImmutableMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// AsBroadcastPutResourceGroupMessageV2 converts a BasicMessage to BroadcastPutResourceGroupMessageV2
var AsBroadcastPutResourceGroupMessageV2 = asSpecializedBroadcastMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// MustAsBroadcastPutResourceGroupMessageV2 converts a BasicMessage to BroadcastPutResourceGroupMessageV2, panics on error
var MustAsBroadcastPutResourceGroupMessageV2 = MustAsSpecializedBroadcastMessage[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// NewPutResourceGroupMessageBuilderV2 creates a new message builder for PutResourceGroupMessageV2
var NewPutResourceGroupMessageBuilderV2 = newMutableMessageBuilder[*PutResourceGroupMessageHeader, *PutResourceGroupMessageBody]

// Type aliases for DropResourceGroupMessageV2
type (
	MutableDropResourceGroupMessageV2   = specializedMutableMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]
	ImmutableDropResourceGroupMessageV2 = SpecializedImmutableMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]
	BroadcastDropResourceGroupMessageV2 = SpecializedBroadcastMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]
)

// MessageTypeWithVersion for DropResourceGroupMessageV2
var MessageTypeDropResourceGroupV2 = MessageTypeWithVersion{
	MessageType: MessageTypeDropResourceGroup,
	Version:     VersionV2,
}

// MessageSpecializedType for DropResourceGroupMessageV2
var SpecializedTypeDropResourceGroupV2 = MessageSpecializedType{
	BodyType:   reflect.TypeOf((*DropResourceGroupMessageBody)(nil)),
	HeaderType: reflect.TypeOf((*DropResourceGroupMessageHeader)(nil)),
}

// AsMutableDropResourceGroupMessageV2 converts a BasicMessage to MutableDropResourceGroupMessageV2
var AsMutableDropResourceGroupMessageV2 = asSpecializedMutableMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// MustAsMutableDropResourceGroupMessageV2 converts a BasicMessage to MutableDropResourceGroupMessageV2, panics on error
var MustAsMutableDropResourceGroupMessageV2 = mustAsSpecializedMutableMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// AsImmutableDropResourceGroupMessageV2 converts an ImmutableMessage to ImmutableDropResourceGroupMessageV2
var AsImmutableDropResourceGroupMessageV2 = asSpecializedImmutableMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// MustAsImmutableDropResourceGroupMessageV2 converts an ImmutableMessage to ImmutableDropResourceGroupMessageV2, panics on error
var MustAsImmutableDropResourceGroupMessageV2 = MustAsSpecializedImmutableMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// AsBroadcastDropResourceGroupMessageV2 converts a BasicMessage to BroadcastDropResourceGroupMessageV2
var AsBroadcastDropResourceGroupMessageV2 = asSpecializedBroadcastMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// MustAsBroadcastDropResourceGroupMessageV2 converts a BasicMessage to BroadcastDropResourceGroupMessageV2, panics on error
var MustAsBroadcastDropResourceGroupMessageV2 = MustAsSpecializedBroadcastMessage[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// NewDropResourceGroupMessageBuilderV2 creates a new message builder for DropResourceGroupMessageV2
var NewDropResourceGroupMessageBuilderV2 = newMutableMessageBuilder[*DropResourceGroupMessageHeader, *DropResourceGroupMessageBody]

// messageTypeMap make the contriants that one header type can only be used for one message type.
var messageTypeMap = map[reflect.Type]MessageType{
	reflect.TypeOf(&messagespb.BeginTxnMessageHeader{}):           MessageTypeBeginTxn,
	reflect.TypeOf(&messagespb.CommitTxnMessageHeader{}):          MessageTypeCommitTxn,
	reflect.TypeOf(&messagespb.CreateCollectionMessageHeader{}):   MessageTypeCreateCollection,
	reflect.TypeOf(&messagespb.CreateDatabaseMessageHeader{}):     MessageTypeCreateDatabase,
	reflect.TypeOf(&messagespb.CreatePartitionMessageHeader{}):    MessageTypeCreatePartition,
	reflect.TypeOf(&messagespb.CreateRoleMessageHeader{}):         MessageTypeCreateRole,
	reflect.TypeOf(&messagespb.CreateSegmentMessageHeader{}):      MessageTypeCreateSegment,
	reflect.TypeOf(&messagespb.CreateUserMessageHeader{}):         MessageTypeCreateUser,
	reflect.TypeOf(&messagespb.DeleteMessageHeader{}):             MessageTypeDelete,
	reflect.TypeOf(&messagespb.DropAliasMessageHeader{}):          MessageTypeDropAlias,
	reflect.TypeOf(&messagespb.DropCollectionMessageHeader{}):     MessageTypeDropCollection,
	reflect.TypeOf(&messagespb.DropDatabaseMessageHeader{}):       MessageTypeDropDatabase,
	reflect.TypeOf(&messagespb.DropPartitionMessageHeader{}):      MessageTypeDropPartition,
	reflect.TypeOf(&messagespb.DropPrivilegeGroupMessageHeader{}): MessageTypeDropPrivilegeGroup,
	reflect.TypeOf(&messagespb.DropResourceGroupMessageHeader{}):  MessageTypeDropResourceGroup,
	reflect.TypeOf(&messagespb.DropRoleMessageHeader{}):           MessageTypeDropRole,
	reflect.TypeOf(&messagespb.DropUserMessageHeader{}):           MessageTypeDropUser,
	reflect.TypeOf(&messagespb.DropUserRoleMessageHeader{}):       MessageTypeDropUserRole,
	reflect.TypeOf(&messagespb.FlushMessageHeader{}):              MessageTypeFlush,
	reflect.TypeOf(&messagespb.GrantPrivilegeMessageHeader{}):     MessageTypeGrantPrivilege,
	reflect.TypeOf(&messagespb.ImportMessageHeader{}):             MessageTypeImport,
	reflect.TypeOf(&messagespb.InsertMessageHeader{}):             MessageTypeInsert,
	reflect.TypeOf(&messagespb.ManualFlushMessageHeader{}):        MessageTypeManualFlush,
	reflect.TypeOf(&messagespb.PutAliasMessageHeader{}):           MessageTypePutAlias,
	reflect.TypeOf(&messagespb.PutCollectionMessageHeader{}):      MessageTypePutCollection,
	reflect.TypeOf(&messagespb.PutDatabaseMessageHeader{}):        MessageTypePutDatabase,
	reflect.TypeOf(&messagespb.PutPrivilegeGroupMessageHeader{}):  MessageTypePutPrivilegeGroup,
	reflect.TypeOf(&messagespb.PutResourceGroupMessageHeader{}):   MessageTypePutResourceGroup,
	reflect.TypeOf(&messagespb.PutRoleMessageHeader{}):            MessageTypePutRole,
	reflect.TypeOf(&messagespb.PutUserMessageHeader{}):            MessageTypePutUser,
	reflect.TypeOf(&messagespb.PutUserRoleMessageHeader{}):        MessageTypePutUserRole,
	reflect.TypeOf(&messagespb.RevokePrivilegeMessageHeader{}):    MessageTypeRevokePrivilege,
	reflect.TypeOf(&messagespb.RollbackTxnMessageHeader{}):        MessageTypeRollbackTxn,
	reflect.TypeOf(&messagespb.SchemaChangeMessageHeader{}):       MessageTypeSchemaChange,
	reflect.TypeOf(&messagespb.TimeTickMessageHeader{}):           MessageTypeTimeTick,
	reflect.TypeOf(&messagespb.TxnMessageHeader{}):                MessageTypeTxn,
}

// MessageTypeWithVersion identifies a message type and version
type MessageTypeWithVersion struct {
	MessageType MessageType
	Version     Version
}

func (m MessageTypeWithVersion) String() string {
	return fmt.Sprintf("%s@v%d", m.MessageType.String(), m.Version)
}

// MessageSpecializedType contains reflection types for message headers and bodies
type MessageSpecializedType struct {
	HeaderType reflect.Type
	BodyType   reflect.Type
}

// messageTypeVersionSpecializedMap maps MessageTypeWithVersion to MessageSpecializedType
var messageTypeVersionSpecializedMap = map[MessageTypeWithVersion]MessageSpecializedType{
	MessageTypeBeginTxnV2:           SpecializedTypeBeginTxnV2,
	MessageTypeCommitTxnV2:          SpecializedTypeCommitTxnV2,
	MessageTypeCreateCollectionV1:   SpecializedTypeCreateCollectionV1,
	MessageTypeCreateDatabaseV2:     SpecializedTypeCreateDatabaseV2,
	MessageTypeCreatePartitionV1:    SpecializedTypeCreatePartitionV1,
	MessageTypeCreateRoleV2:         SpecializedTypeCreateRoleV2,
	MessageTypeCreateSegmentV2:      SpecializedTypeCreateSegmentV2,
	MessageTypeCreateUserV2:         SpecializedTypeCreateUserV2,
	MessageTypeDeleteV1:             SpecializedTypeDeleteV1,
	MessageTypeDropAliasV2:          SpecializedTypeDropAliasV2,
	MessageTypeDropCollectionV1:     SpecializedTypeDropCollectionV1,
	MessageTypeDropDatabaseV2:       SpecializedTypeDropDatabaseV2,
	MessageTypeDropPartitionV1:      SpecializedTypeDropPartitionV1,
	MessageTypeDropPrivilegeGroupV2: SpecializedTypeDropPrivilegeGroupV2,
	MessageTypeDropResourceGroupV2:  SpecializedTypeDropResourceGroupV2,
	MessageTypeDropRoleV2:           SpecializedTypeDropRoleV2,
	MessageTypeDropUserRoleV2:       SpecializedTypeDropUserRoleV2,
	MessageTypeDropUserV2:           SpecializedTypeDropUserV2,
	MessageTypeFlushV2:              SpecializedTypeFlushV2,
	MessageTypeGrantPrivilegeV2:     SpecializedTypeGrantPrivilegeV2,
	MessageTypeImportV1:             SpecializedTypeImportV1,
	MessageTypeInsertV1:             SpecializedTypeInsertV1,
	MessageTypeManualFlushV2:        SpecializedTypeManualFlushV2,
	MessageTypePutAliasV2:           SpecializedTypePutAliasV2,
	MessageTypePutCollectionV2:      SpecializedTypePutCollectionV2,
	MessageTypePutDatabaseV2:        SpecializedTypePutDatabaseV2,
	MessageTypePutPrivilegeGroupV2:  SpecializedTypePutPrivilegeGroupV2,
	MessageTypePutResourceGroupV2:   SpecializedTypePutResourceGroupV2,
	MessageTypePutRoleV2:            SpecializedTypePutRoleV2,
	MessageTypePutUserRoleV2:        SpecializedTypePutUserRoleV2,
	MessageTypePutUserV2:            SpecializedTypePutUserV2,
	MessageTypeRevokePrivilegeV2:    SpecializedTypeRevokePrivilegeV2,
	MessageTypeRollbackTxnV2:        SpecializedTypeRollbackTxnV2,
	MessageTypeSchemaChangeV2:       SpecializedTypeSchemaChangeV2,
	MessageTypeTimeTickV1:           SpecializedTypeTimeTickV1,
	MessageTypeTxnV2:                SpecializedTypeTxnV2,
}

// messageSpecializedTypeVersionMap maps MessageSpecializedType to MessageTypeWithVersion
var messageSpecializedTypeVersionMap = map[MessageSpecializedType]MessageTypeWithVersion{
	SpecializedTypeBeginTxnV2:           MessageTypeBeginTxnV2,
	SpecializedTypeCommitTxnV2:          MessageTypeCommitTxnV2,
	SpecializedTypeCreateCollectionV1:   MessageTypeCreateCollectionV1,
	SpecializedTypeCreateDatabaseV2:     MessageTypeCreateDatabaseV2,
	SpecializedTypeCreatePartitionV1:    MessageTypeCreatePartitionV1,
	SpecializedTypeCreateRoleV2:         MessageTypeCreateRoleV2,
	SpecializedTypeCreateSegmentV2:      MessageTypeCreateSegmentV2,
	SpecializedTypeCreateUserV2:         MessageTypeCreateUserV2,
	SpecializedTypeDeleteV1:             MessageTypeDeleteV1,
	SpecializedTypeDropAliasV2:          MessageTypeDropAliasV2,
	SpecializedTypeDropCollectionV1:     MessageTypeDropCollectionV1,
	SpecializedTypeDropDatabaseV2:       MessageTypeDropDatabaseV2,
	SpecializedTypeDropPartitionV1:      MessageTypeDropPartitionV1,
	SpecializedTypeDropPrivilegeGroupV2: MessageTypeDropPrivilegeGroupV2,
	SpecializedTypeDropResourceGroupV2:  MessageTypeDropResourceGroupV2,
	SpecializedTypeDropRoleV2:           MessageTypeDropRoleV2,
	SpecializedTypeDropUserRoleV2:       MessageTypeDropUserRoleV2,
	SpecializedTypeDropUserV2:           MessageTypeDropUserV2,
	SpecializedTypeFlushV2:              MessageTypeFlushV2,
	SpecializedTypeGrantPrivilegeV2:     MessageTypeGrantPrivilegeV2,
	SpecializedTypeImportV1:             MessageTypeImportV1,
	SpecializedTypeInsertV1:             MessageTypeInsertV1,
	SpecializedTypeManualFlushV2:        MessageTypeManualFlushV2,
	SpecializedTypePutAliasV2:           MessageTypePutAliasV2,
	SpecializedTypePutCollectionV2:      MessageTypePutCollectionV2,
	SpecializedTypePutDatabaseV2:        MessageTypePutDatabaseV2,
	SpecializedTypePutPrivilegeGroupV2:  MessageTypePutPrivilegeGroupV2,
	SpecializedTypePutResourceGroupV2:   MessageTypePutResourceGroupV2,
	SpecializedTypePutRoleV2:            MessageTypePutRoleV2,
	SpecializedTypePutUserRoleV2:        MessageTypePutUserRoleV2,
	SpecializedTypePutUserV2:            MessageTypePutUserV2,
	SpecializedTypeRevokePrivilegeV2:    MessageTypeRevokePrivilegeV2,
	SpecializedTypeRollbackTxnV2:        MessageTypeRollbackTxnV2,
	SpecializedTypeSchemaChangeV2:       MessageTypeSchemaChangeV2,
	SpecializedTypeTimeTickV1:           MessageTypeTimeTickV1,
	SpecializedTypeTxnV2:                MessageTypeTxnV2,
}
