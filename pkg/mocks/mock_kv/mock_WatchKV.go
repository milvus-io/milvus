// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_kv

import (
	context "context"

	clientv3 "go.etcd.io/etcd/client/v3"

	mock "github.com/stretchr/testify/mock"

	predicates "github.com/milvus-io/milvus/pkg/v2/kv/predicates"
)

// MockWatchKV is an autogenerated mock type for the WatchKV type
type MockWatchKV struct {
	mock.Mock
}

type MockWatchKV_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatchKV) EXPECT() *MockWatchKV_Expecter {
	return &MockWatchKV_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockWatchKV) Close() {
	_m.Called()
}

// MockWatchKV_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWatchKV_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWatchKV_Expecter) Close() *MockWatchKV_Close_Call {
	return &MockWatchKV_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWatchKV_Close_Call) Run(run func()) *MockWatchKV_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWatchKV_Close_Call) Return() *MockWatchKV_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWatchKV_Close_Call) RunAndReturn(run func()) *MockWatchKV_Close_Call {
	_c.Run(run)
	return _c
}

// CompareVersionAndSwap provides a mock function with given fields: ctx, key, version, target
func (_m *MockWatchKV) CompareVersionAndSwap(ctx context.Context, key string, version int64, target string) (bool, error) {
	ret := _m.Called(ctx, key, version, target)

	if len(ret) == 0 {
		panic("no return value specified for CompareVersionAndSwap")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) (bool, error)); ok {
		return rf(ctx, key, version, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) bool); ok {
		r0 = rf(ctx, key, version, target)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, string) error); ok {
		r1 = rf(ctx, key, version, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatchKV_CompareVersionAndSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareVersionAndSwap'
type MockWatchKV_CompareVersionAndSwap_Call struct {
	*mock.Call
}

// CompareVersionAndSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - version int64
//   - target string
func (_e *MockWatchKV_Expecter) CompareVersionAndSwap(ctx interface{}, key interface{}, version interface{}, target interface{}) *MockWatchKV_CompareVersionAndSwap_Call {
	return &MockWatchKV_CompareVersionAndSwap_Call{Call: _e.mock.On("CompareVersionAndSwap", ctx, key, version, target)}
}

func (_c *MockWatchKV_CompareVersionAndSwap_Call) Run(run func(ctx context.Context, key string, version int64, target string)) *MockWatchKV_CompareVersionAndSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockWatchKV_CompareVersionAndSwap_Call) Return(_a0 bool, _a1 error) *MockWatchKV_CompareVersionAndSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatchKV_CompareVersionAndSwap_Call) RunAndReturn(run func(context.Context, string, int64, string) (bool, error)) *MockWatchKV_CompareVersionAndSwap_Call {
	_c.Call.Return(run)
	return _c
}

// GetPath provides a mock function with given fields: key
func (_m *MockWatchKV) GetPath(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockWatchKV_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type MockWatchKV_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
//   - key string
func (_e *MockWatchKV_Expecter) GetPath(key interface{}) *MockWatchKV_GetPath_Call {
	return &MockWatchKV_GetPath_Call{Call: _e.mock.On("GetPath", key)}
}

func (_c *MockWatchKV_GetPath_Call) Run(run func(key string)) *MockWatchKV_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWatchKV_GetPath_Call) Return(_a0 string) *MockWatchKV_GetPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_GetPath_Call) RunAndReturn(run func(string) string) *MockWatchKV_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) Has(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatchKV_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockWatchKV_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) Has(ctx interface{}, key interface{}) *MockWatchKV_Has_Call {
	return &MockWatchKV_Has_Call{Call: _e.mock.On("Has", ctx, key)}
}

func (_c *MockWatchKV_Has_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_Has_Call) Return(_a0 bool, _a1 error) *MockWatchKV_Has_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatchKV_Has_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockWatchKV_Has_Call {
	_c.Call.Return(run)
	return _c
}

// HasPrefix provides a mock function with given fields: ctx, prefix
func (_m *MockWatchKV) HasPrefix(ctx context.Context, prefix string) (bool, error) {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for HasPrefix")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, prefix)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatchKV_HasPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPrefix'
type MockWatchKV_HasPrefix_Call struct {
	*mock.Call
}

// HasPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockWatchKV_Expecter) HasPrefix(ctx interface{}, prefix interface{}) *MockWatchKV_HasPrefix_Call {
	return &MockWatchKV_HasPrefix_Call{Call: _e.mock.On("HasPrefix", ctx, prefix)}
}

func (_c *MockWatchKV_HasPrefix_Call) Run(run func(ctx context.Context, prefix string)) *MockWatchKV_HasPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_HasPrefix_Call) Return(_a0 bool, _a1 error) *MockWatchKV_HasPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatchKV_HasPrefix_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockWatchKV_HasPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) Load(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatchKV_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockWatchKV_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) Load(ctx interface{}, key interface{}) *MockWatchKV_Load_Call {
	return &MockWatchKV_Load_Call{Call: _e.mock.On("Load", ctx, key)}
}

func (_c *MockWatchKV_Load_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_Load_Call) Return(_a0 string, _a1 error) *MockWatchKV_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatchKV_Load_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockWatchKV_Load_Call {
	_c.Call.Return(run)
	return _c
}

// LoadWithPrefix provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) LoadWithPrefix(ctx context.Context, key string) ([]string, []string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for LoadWithPrefix")
	}

	var r0 []string
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, []string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []string); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWatchKV_LoadWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadWithPrefix'
type MockWatchKV_LoadWithPrefix_Call struct {
	*mock.Call
}

// LoadWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) LoadWithPrefix(ctx interface{}, key interface{}) *MockWatchKV_LoadWithPrefix_Call {
	return &MockWatchKV_LoadWithPrefix_Call{Call: _e.mock.On("LoadWithPrefix", ctx, key)}
}

func (_c *MockWatchKV_LoadWithPrefix_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_LoadWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_LoadWithPrefix_Call) Return(_a0 []string, _a1 []string, _a2 error) *MockWatchKV_LoadWithPrefix_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWatchKV_LoadWithPrefix_Call) RunAndReturn(run func(context.Context, string) ([]string, []string, error)) *MockWatchKV_LoadWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// MultiLoad provides a mock function with given fields: ctx, keys
func (_m *MockWatchKV) MultiLoad(ctx context.Context, keys []string) ([]string, error) {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for MultiLoad")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]string, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []string); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatchKV_MultiLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiLoad'
type MockWatchKV_MultiLoad_Call struct {
	*mock.Call
}

// MultiLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []string
func (_e *MockWatchKV_Expecter) MultiLoad(ctx interface{}, keys interface{}) *MockWatchKV_MultiLoad_Call {
	return &MockWatchKV_MultiLoad_Call{Call: _e.mock.On("MultiLoad", ctx, keys)}
}

func (_c *MockWatchKV_MultiLoad_Call) Run(run func(ctx context.Context, keys []string)) *MockWatchKV_MultiLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockWatchKV_MultiLoad_Call) Return(_a0 []string, _a1 error) *MockWatchKV_MultiLoad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatchKV_MultiLoad_Call) RunAndReturn(run func(context.Context, []string) ([]string, error)) *MockWatchKV_MultiLoad_Call {
	_c.Call.Return(run)
	return _c
}

// MultiRemove provides a mock function with given fields: ctx, keys
func (_m *MockWatchKV) MultiRemove(ctx context.Context, keys []string) error {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for MultiRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_MultiRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiRemove'
type MockWatchKV_MultiRemove_Call struct {
	*mock.Call
}

// MultiRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []string
func (_e *MockWatchKV_Expecter) MultiRemove(ctx interface{}, keys interface{}) *MockWatchKV_MultiRemove_Call {
	return &MockWatchKV_MultiRemove_Call{Call: _e.mock.On("MultiRemove", ctx, keys)}
}

func (_c *MockWatchKV_MultiRemove_Call) Run(run func(ctx context.Context, keys []string)) *MockWatchKV_MultiRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockWatchKV_MultiRemove_Call) Return(_a0 error) *MockWatchKV_MultiRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_MultiRemove_Call) RunAndReturn(run func(context.Context, []string) error) *MockWatchKV_MultiRemove_Call {
	_c.Call.Return(run)
	return _c
}

// MultiSave provides a mock function with given fields: ctx, kvs
func (_m *MockWatchKV) MultiSave(ctx context.Context, kvs map[string]string) error {
	ret := _m.Called(ctx, kvs)

	if len(ret) == 0 {
		panic("no return value specified for MultiSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) error); ok {
		r0 = rf(ctx, kvs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_MultiSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSave'
type MockWatchKV_MultiSave_Call struct {
	*mock.Call
}

// MultiSave is a helper method to define mock.On call
//   - ctx context.Context
//   - kvs map[string]string
func (_e *MockWatchKV_Expecter) MultiSave(ctx interface{}, kvs interface{}) *MockWatchKV_MultiSave_Call {
	return &MockWatchKV_MultiSave_Call{Call: _e.mock.On("MultiSave", ctx, kvs)}
}

func (_c *MockWatchKV_MultiSave_Call) Run(run func(ctx context.Context, kvs map[string]string)) *MockWatchKV_MultiSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockWatchKV_MultiSave_Call) Return(_a0 error) *MockWatchKV_MultiSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_MultiSave_Call) RunAndReturn(run func(context.Context, map[string]string) error) *MockWatchKV_MultiSave_Call {
	_c.Call.Return(run)
	return _c
}

// MultiSaveAndRemove provides a mock function with given fields: ctx, saves, removals, preds
func (_m *MockWatchKV) MultiSaveAndRemove(ctx context.Context, saves map[string]string, removals []string, preds ...predicates.Predicate) error {
	_va := make([]interface{}, len(preds))
	for _i := range preds {
		_va[_i] = preds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, saves, removals)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiSaveAndRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []string, ...predicates.Predicate) error); ok {
		r0 = rf(ctx, saves, removals, preds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_MultiSaveAndRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSaveAndRemove'
type MockWatchKV_MultiSaveAndRemove_Call struct {
	*mock.Call
}

// MultiSaveAndRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - saves map[string]string
//   - removals []string
//   - preds ...predicates.Predicate
func (_e *MockWatchKV_Expecter) MultiSaveAndRemove(ctx interface{}, saves interface{}, removals interface{}, preds ...interface{}) *MockWatchKV_MultiSaveAndRemove_Call {
	return &MockWatchKV_MultiSaveAndRemove_Call{Call: _e.mock.On("MultiSaveAndRemove",
		append([]interface{}{ctx, saves, removals}, preds...)...)}
}

func (_c *MockWatchKV_MultiSaveAndRemove_Call) Run(run func(ctx context.Context, saves map[string]string, removals []string, preds ...predicates.Predicate)) *MockWatchKV_MultiSaveAndRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]predicates.Predicate, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(predicates.Predicate)
			}
		}
		run(args[0].(context.Context), args[1].(map[string]string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockWatchKV_MultiSaveAndRemove_Call) Return(_a0 error) *MockWatchKV_MultiSaveAndRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_MultiSaveAndRemove_Call) RunAndReturn(run func(context.Context, map[string]string, []string, ...predicates.Predicate) error) *MockWatchKV_MultiSaveAndRemove_Call {
	_c.Call.Return(run)
	return _c
}

// MultiSaveAndRemoveWithPrefix provides a mock function with given fields: ctx, saves, removals, preds
func (_m *MockWatchKV) MultiSaveAndRemoveWithPrefix(ctx context.Context, saves map[string]string, removals []string, preds ...predicates.Predicate) error {
	_va := make([]interface{}, len(preds))
	for _i := range preds {
		_va[_i] = preds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, saves, removals)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiSaveAndRemoveWithPrefix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []string, ...predicates.Predicate) error); ok {
		r0 = rf(ctx, saves, removals, preds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_MultiSaveAndRemoveWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSaveAndRemoveWithPrefix'
type MockWatchKV_MultiSaveAndRemoveWithPrefix_Call struct {
	*mock.Call
}

// MultiSaveAndRemoveWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - saves map[string]string
//   - removals []string
//   - preds ...predicates.Predicate
func (_e *MockWatchKV_Expecter) MultiSaveAndRemoveWithPrefix(ctx interface{}, saves interface{}, removals interface{}, preds ...interface{}) *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call {
	return &MockWatchKV_MultiSaveAndRemoveWithPrefix_Call{Call: _e.mock.On("MultiSaveAndRemoveWithPrefix",
		append([]interface{}{ctx, saves, removals}, preds...)...)}
}

func (_c *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call) Run(run func(ctx context.Context, saves map[string]string, removals []string, preds ...predicates.Predicate)) *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]predicates.Predicate, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(predicates.Predicate)
			}
		}
		run(args[0].(context.Context), args[1].(map[string]string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call) Return(_a0 error) *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call) RunAndReturn(run func(context.Context, map[string]string, []string, ...predicates.Predicate) error) *MockWatchKV_MultiSaveAndRemoveWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) Remove(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockWatchKV_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) Remove(ctx interface{}, key interface{}) *MockWatchKV_Remove_Call {
	return &MockWatchKV_Remove_Call{Call: _e.mock.On("Remove", ctx, key)}
}

func (_c *MockWatchKV_Remove_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_Remove_Call) Return(_a0 error) *MockWatchKV_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_Remove_Call) RunAndReturn(run func(context.Context, string) error) *MockWatchKV_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWithPrefix provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) RemoveWithPrefix(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWithPrefix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_RemoveWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWithPrefix'
type MockWatchKV_RemoveWithPrefix_Call struct {
	*mock.Call
}

// RemoveWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) RemoveWithPrefix(ctx interface{}, key interface{}) *MockWatchKV_RemoveWithPrefix_Call {
	return &MockWatchKV_RemoveWithPrefix_Call{Call: _e.mock.On("RemoveWithPrefix", ctx, key)}
}

func (_c *MockWatchKV_RemoveWithPrefix_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_RemoveWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_RemoveWithPrefix_Call) Return(_a0 error) *MockWatchKV_RemoveWithPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_RemoveWithPrefix_Call) RunAndReturn(run func(context.Context, string) error) *MockWatchKV_RemoveWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, key, value
func (_m *MockWatchKV) Save(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockWatchKV_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *MockWatchKV_Expecter) Save(ctx interface{}, key interface{}, value interface{}) *MockWatchKV_Save_Call {
	return &MockWatchKV_Save_Call{Call: _e.mock.On("Save", ctx, key, value)}
}

func (_c *MockWatchKV_Save_Call) Run(run func(ctx context.Context, key string, value string)) *MockWatchKV_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockWatchKV_Save_Call) Return(_a0 error) *MockWatchKV_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_Save_Call) RunAndReturn(run func(context.Context, string, string) error) *MockWatchKV_Save_Call {
	_c.Call.Return(run)
	return _c
}

// WalkWithPrefix provides a mock function with given fields: ctx, prefix, paginationSize, fn
func (_m *MockWatchKV) WalkWithPrefix(ctx context.Context, prefix string, paginationSize int, fn func([]byte, []byte) error) error {
	ret := _m.Called(ctx, prefix, paginationSize, fn)

	if len(ret) == 0 {
		panic("no return value specified for WalkWithPrefix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, func([]byte, []byte) error) error); ok {
		r0 = rf(ctx, prefix, paginationSize, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatchKV_WalkWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkWithPrefix'
type MockWatchKV_WalkWithPrefix_Call struct {
	*mock.Call
}

// WalkWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
//   - paginationSize int
//   - fn func([]byte , []byte) error
func (_e *MockWatchKV_Expecter) WalkWithPrefix(ctx interface{}, prefix interface{}, paginationSize interface{}, fn interface{}) *MockWatchKV_WalkWithPrefix_Call {
	return &MockWatchKV_WalkWithPrefix_Call{Call: _e.mock.On("WalkWithPrefix", ctx, prefix, paginationSize, fn)}
}

func (_c *MockWatchKV_WalkWithPrefix_Call) Run(run func(ctx context.Context, prefix string, paginationSize int, fn func([]byte, []byte) error)) *MockWatchKV_WalkWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(func([]byte, []byte) error))
	})
	return _c
}

func (_c *MockWatchKV_WalkWithPrefix_Call) Return(_a0 error) *MockWatchKV_WalkWithPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_WalkWithPrefix_Call) RunAndReturn(run func(context.Context, string, int, func([]byte, []byte) error) error) *MockWatchKV_WalkWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) Watch(ctx context.Context, key string) clientv3.WatchChan {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 clientv3.WatchChan
	if rf, ok := ret.Get(0).(func(context.Context, string) clientv3.WatchChan); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientv3.WatchChan)
		}
	}

	return r0
}

// MockWatchKV_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockWatchKV_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) Watch(ctx interface{}, key interface{}) *MockWatchKV_Watch_Call {
	return &MockWatchKV_Watch_Call{Call: _e.mock.On("Watch", ctx, key)}
}

func (_c *MockWatchKV_Watch_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_Watch_Call) Return(_a0 clientv3.WatchChan) *MockWatchKV_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_Watch_Call) RunAndReturn(run func(context.Context, string) clientv3.WatchChan) *MockWatchKV_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// WatchWithPrefix provides a mock function with given fields: ctx, key
func (_m *MockWatchKV) WatchWithPrefix(ctx context.Context, key string) clientv3.WatchChan {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for WatchWithPrefix")
	}

	var r0 clientv3.WatchChan
	if rf, ok := ret.Get(0).(func(context.Context, string) clientv3.WatchChan); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientv3.WatchChan)
		}
	}

	return r0
}

// MockWatchKV_WatchWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchWithPrefix'
type MockWatchKV_WatchWithPrefix_Call struct {
	*mock.Call
}

// WatchWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockWatchKV_Expecter) WatchWithPrefix(ctx interface{}, key interface{}) *MockWatchKV_WatchWithPrefix_Call {
	return &MockWatchKV_WatchWithPrefix_Call{Call: _e.mock.On("WatchWithPrefix", ctx, key)}
}

func (_c *MockWatchKV_WatchWithPrefix_Call) Run(run func(ctx context.Context, key string)) *MockWatchKV_WatchWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatchKV_WatchWithPrefix_Call) Return(_a0 clientv3.WatchChan) *MockWatchKV_WatchWithPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_WatchWithPrefix_Call) RunAndReturn(run func(context.Context, string) clientv3.WatchChan) *MockWatchKV_WatchWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// WatchWithRevision provides a mock function with given fields: ctx, key, revision
func (_m *MockWatchKV) WatchWithRevision(ctx context.Context, key string, revision int64) clientv3.WatchChan {
	ret := _m.Called(ctx, key, revision)

	if len(ret) == 0 {
		panic("no return value specified for WatchWithRevision")
	}

	var r0 clientv3.WatchChan
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) clientv3.WatchChan); ok {
		r0 = rf(ctx, key, revision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientv3.WatchChan)
		}
	}

	return r0
}

// MockWatchKV_WatchWithRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchWithRevision'
type MockWatchKV_WatchWithRevision_Call struct {
	*mock.Call
}

// WatchWithRevision is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - revision int64
func (_e *MockWatchKV_Expecter) WatchWithRevision(ctx interface{}, key interface{}, revision interface{}) *MockWatchKV_WatchWithRevision_Call {
	return &MockWatchKV_WatchWithRevision_Call{Call: _e.mock.On("WatchWithRevision", ctx, key, revision)}
}

func (_c *MockWatchKV_WatchWithRevision_Call) Run(run func(ctx context.Context, key string, revision int64)) *MockWatchKV_WatchWithRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockWatchKV_WatchWithRevision_Call) Return(_a0 clientv3.WatchChan) *MockWatchKV_WatchWithRevision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatchKV_WatchWithRevision_Call) RunAndReturn(run func(context.Context, string, int64) clientv3.WatchChan) *MockWatchKV_WatchWithRevision_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatchKV creates a new instance of MockWatchKV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatchKV(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatchKV {
	mock := &MockWatchKV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
