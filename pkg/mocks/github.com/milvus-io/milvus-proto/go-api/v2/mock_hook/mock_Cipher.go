// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_hook

import (
	hook "github.com/milvus-io/milvus-proto/go-api/v2/hook"
	mock "github.com/stretchr/testify/mock"
)

// MockCipher is an autogenerated mock type for the Cipher type
type MockCipher struct {
	mock.Mock
}

type MockCipher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCipher) EXPECT() *MockCipher_Expecter {
	return &MockCipher_Expecter{mock: &_m.Mock}
}

// GetDecryptor provides a mock function with given fields: ezID, collectionID, safeKey
func (_m *MockCipher) GetDecryptor(ezID int64, collectionID int64, safeKey []byte) (hook.Decryptor, error) {
	ret := _m.Called(ezID, collectionID, safeKey)

	if len(ret) == 0 {
		panic("no return value specified for GetDecryptor")
	}

	var r0 hook.Decryptor
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, []byte) (hook.Decryptor, error)); ok {
		return rf(ezID, collectionID, safeKey)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, []byte) hook.Decryptor); ok {
		r0 = rf(ezID, collectionID, safeKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hook.Decryptor)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, []byte) error); ok {
		r1 = rf(ezID, collectionID, safeKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCipher_GetDecryptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecryptor'
type MockCipher_GetDecryptor_Call struct {
	*mock.Call
}

// GetDecryptor is a helper method to define mock.On call
//   - ezID int64
//   - collectionID int64
//   - safeKey []byte
func (_e *MockCipher_Expecter) GetDecryptor(ezID interface{}, collectionID interface{}, safeKey interface{}) *MockCipher_GetDecryptor_Call {
	return &MockCipher_GetDecryptor_Call{Call: _e.mock.On("GetDecryptor", ezID, collectionID, safeKey)}
}

func (_c *MockCipher_GetDecryptor_Call) Run(run func(ezID int64, collectionID int64, safeKey []byte)) *MockCipher_GetDecryptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].([]byte))
	})
	return _c
}

func (_c *MockCipher_GetDecryptor_Call) Return(_a0 hook.Decryptor, _a1 error) *MockCipher_GetDecryptor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCipher_GetDecryptor_Call) RunAndReturn(run func(int64, int64, []byte) (hook.Decryptor, error)) *MockCipher_GetDecryptor_Call {
	_c.Call.Return(run)
	return _c
}

// GetEncryptor provides a mock function with given fields: ezID, collectionID
func (_m *MockCipher) GetEncryptor(ezID int64, collectionID int64) (hook.Encryptor, []byte, error) {
	ret := _m.Called(ezID, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetEncryptor")
	}

	var r0 hook.Encryptor
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, int64) (hook.Encryptor, []byte, error)); ok {
		return rf(ezID, collectionID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) hook.Encryptor); ok {
		r0 = rf(ezID, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hook.Encryptor)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) []byte); ok {
		r1 = rf(ezID, collectionID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(int64, int64) error); ok {
		r2 = rf(ezID, collectionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCipher_GetEncryptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEncryptor'
type MockCipher_GetEncryptor_Call struct {
	*mock.Call
}

// GetEncryptor is a helper method to define mock.On call
//   - ezID int64
//   - collectionID int64
func (_e *MockCipher_Expecter) GetEncryptor(ezID interface{}, collectionID interface{}) *MockCipher_GetEncryptor_Call {
	return &MockCipher_GetEncryptor_Call{Call: _e.mock.On("GetEncryptor", ezID, collectionID)}
}

func (_c *MockCipher_GetEncryptor_Call) Run(run func(ezID int64, collectionID int64)) *MockCipher_GetEncryptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockCipher_GetEncryptor_Call) Return(encryptor hook.Encryptor, safeKey []byte, err error) *MockCipher_GetEncryptor_Call {
	_c.Call.Return(encryptor, safeKey, err)
	return _c
}

func (_c *MockCipher_GetEncryptor_Call) RunAndReturn(run func(int64, int64) (hook.Encryptor, []byte, error)) *MockCipher_GetEncryptor_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnsafeKey provides a mock function with given fields: ezID, collectionID
func (_m *MockCipher) GetUnsafeKey(ezID int64, collectionID int64) []byte {
	ret := _m.Called(ezID, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetUnsafeKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int64, int64) []byte); ok {
		r0 = rf(ezID, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockCipher_GetUnsafeKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnsafeKey'
type MockCipher_GetUnsafeKey_Call struct {
	*mock.Call
}

// GetUnsafeKey is a helper method to define mock.On call
//   - ezID int64
//   - collectionID int64
func (_e *MockCipher_Expecter) GetUnsafeKey(ezID interface{}, collectionID interface{}) *MockCipher_GetUnsafeKey_Call {
	return &MockCipher_GetUnsafeKey_Call{Call: _e.mock.On("GetUnsafeKey", ezID, collectionID)}
}

func (_c *MockCipher_GetUnsafeKey_Call) Run(run func(ezID int64, collectionID int64)) *MockCipher_GetUnsafeKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockCipher_GetUnsafeKey_Call) Return(_a0 []byte) *MockCipher_GetUnsafeKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCipher_GetUnsafeKey_Call) RunAndReturn(run func(int64, int64) []byte) *MockCipher_GetUnsafeKey_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: params
func (_m *MockCipher) Init(params map[string]string) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCipher_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockCipher_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - params map[string]string
func (_e *MockCipher_Expecter) Init(params interface{}) *MockCipher_Init_Call {
	return &MockCipher_Init_Call{Call: _e.mock.On("Init", params)}
}

func (_c *MockCipher_Init_Call) Run(run func(params map[string]string)) *MockCipher_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *MockCipher_Init_Call) Return(_a0 error) *MockCipher_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCipher_Init_Call) RunAndReturn(run func(map[string]string) error) *MockCipher_Init_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCipher creates a new instance of MockCipher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCipher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCipher {
	mock := &MockCipher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
