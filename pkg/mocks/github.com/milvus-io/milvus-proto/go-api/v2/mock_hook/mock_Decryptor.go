// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_hook

import mock "github.com/stretchr/testify/mock"

// MockDecryptor is an autogenerated mock type for the Decryptor type
type MockDecryptor struct {
	mock.Mock
}

type MockDecryptor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecryptor) EXPECT() *MockDecryptor_Expecter {
	return &MockDecryptor_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: cipherText
func (_m *MockDecryptor) Decrypt(cipherText []byte) ([]byte, error) {
	ret := _m.Called(cipherText)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(cipherText)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(cipherText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(cipherText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDecryptor_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockDecryptor_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - cipherText []byte
func (_e *MockDecryptor_Expecter) Decrypt(cipherText interface{}) *MockDecryptor_Decrypt_Call {
	return &MockDecryptor_Decrypt_Call{Call: _e.mock.On("Decrypt", cipherText)}
}

func (_c *MockDecryptor_Decrypt_Call) Run(run func(cipherText []byte)) *MockDecryptor_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockDecryptor_Decrypt_Call) Return(plainText []byte, err error) *MockDecryptor_Decrypt_Call {
	_c.Call.Return(plainText, err)
	return _c
}

func (_c *MockDecryptor_Decrypt_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockDecryptor_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDecryptor creates a new instance of MockDecryptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDecryptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDecryptor {
	mock := &MockDecryptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
