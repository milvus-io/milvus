// Code generated by mockery v2.46.0. DO NOT EDIT.

package eventlog

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with given fields:
func (_m *MockLogger) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogger_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockLogger_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Flush() *MockLogger_Flush_Call {
	return &MockLogger_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockLogger_Flush_Call) Run(run func()) *MockLogger_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Flush_Call) Return(_a0 error) *MockLogger_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Flush_Call) RunAndReturn(run func() error) *MockLogger_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Record provides a mock function with given fields: _a0
func (_m *MockLogger) Record(_a0 Evt) {
	_m.Called(_a0)
}

// MockLogger_Record_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Record'
type MockLogger_Record_Call struct {
	*mock.Call
}

// Record is a helper method to define mock.On call
//   - _a0 Evt
func (_e *MockLogger_Expecter) Record(_a0 interface{}) *MockLogger_Record_Call {
	return &MockLogger_Record_Call{Call: _e.mock.On("Record", _a0)}
}

func (_c *MockLogger_Record_Call) Run(run func(_a0 Evt)) *MockLogger_Record_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Evt))
	})
	return _c
}

func (_c *MockLogger_Record_Call) Return() *MockLogger_Record_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Record_Call) RunAndReturn(run func(Evt)) *MockLogger_Record_Call {
	_c.Call.Return(run)
	return _c
}

// RecordFunc provides a mock function with given fields: _a0, _a1
func (_m *MockLogger) RecordFunc(_a0 Level, _a1 func() Evt) {
	_m.Called(_a0, _a1)
}

// MockLogger_RecordFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordFunc'
type MockLogger_RecordFunc_Call struct {
	*mock.Call
}

// RecordFunc is a helper method to define mock.On call
//   - _a0 Level
//   - _a1 func() Evt
func (_e *MockLogger_Expecter) RecordFunc(_a0 interface{}, _a1 interface{}) *MockLogger_RecordFunc_Call {
	return &MockLogger_RecordFunc_Call{Call: _e.mock.On("RecordFunc", _a0, _a1)}
}

func (_c *MockLogger_RecordFunc_Call) Run(run func(_a0 Level, _a1 func() Evt)) *MockLogger_RecordFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Level), args[1].(func() Evt))
	})
	return _c
}

func (_c *MockLogger_RecordFunc_Call) Return() *MockLogger_RecordFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_RecordFunc_Call) RunAndReturn(run func(Level, func() Evt)) *MockLogger_RecordFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
