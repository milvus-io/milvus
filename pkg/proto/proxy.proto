syntax = "proto3";
package milvus.proto.proxy;

option go_package = "github.com/milvus-io/milvus/pkg/proto/proxypb";

import "common.proto";
import "internal.proto";
import "milvus.proto";

service Proxy {
  rpc GetComponentStates(milvus.GetComponentStatesRequest) returns (milvus.ComponentStates) {}
  rpc GetStatisticsChannel(internal.GetStatisticsChannelRequest) returns(milvus.StringResponse){}

  rpc InvalidateCollectionMetaCache(InvalidateCollMetaCacheRequest) returns (common.Status) {}
  rpc GetDdChannel(internal.GetDdChannelRequest) returns (milvus.StringResponse) {}

  rpc InvalidateCredentialCache(InvalidateCredCacheRequest) returns (common.Status) {}
  rpc UpdateCredentialCache(UpdateCredCacheRequest) returns (common.Status) {}

  rpc RefreshPolicyInfoCache(RefreshPolicyInfoCacheRequest) returns (common.Status) {}
  rpc GetProxyMetrics(milvus.GetMetricsRequest) returns (milvus.GetMetricsResponse) {}
  rpc SetRates(SetRatesRequest) returns (common.Status) {}

  rpc ListClientInfos(ListClientInfosRequest) returns (ListClientInfosResponse) {}

  // importV2
  rpc ImportV2(internal.ImportRequest) returns(internal.ImportResponse){}
  rpc GetImportProgress(internal.GetImportProgressRequest) returns(internal.GetImportProgressResponse){}
  rpc ListImports(internal.ListImportsRequest) returns(internal.ListImportsResponse){}
  
  rpc InvalidateShardLeaderCache(InvalidateShardLeaderCacheRequest) returns (common.Status) {}
}

message InvalidateCollMetaCacheRequest {
  // MsgType:
  //  DropCollection    ->  {meta cache, dml channels}
  //  Other             ->  {meta cache}
  common.MsgBase base = 1;
  string db_name = 2;
  string collection_name = 3;
  int64 collectionID = 4;
  string partition_name = 5;
}

message InvalidateShardLeaderCacheRequest {
  common.MsgBase base = 1;
  repeated int64 collectionIDs = 2;
}

message InvalidateCredCacheRequest {
  common.MsgBase base = 1;
  string username = 2;
}

message UpdateCredCacheRequest {
  common.MsgBase base = 1;
  string username = 2;
  // password stored in cache
  string password = 3;
}

message RefreshPolicyInfoCacheRequest {
  common.MsgBase base = 1;
  int32 opType = 2;
  string opKey = 3;
}

// Deprecated: use ClusterLimiter instead it
message CollectionRate {
  int64 collection = 1;
  repeated internal.Rate rates = 2;
  repeated milvus.QuotaState states = 3;
  repeated common.ErrorCode codes = 4;
}

message LimiterNode {
  // self limiter information
  Limiter limiter = 1;
  // db id -> db limiter
  // collection id -> collection limiter
  // partition id -> partition limiter
  map<int64, LimiterNode> children = 2;
}

message Limiter {
  repeated internal.Rate rates = 1;
  // we can use map to store quota states and error code, because key in map fields cannot be enum types
  repeated milvus.QuotaState states = 2;
  repeated common.ErrorCode codes = 3;
}

message SetRatesRequest {
  common.MsgBase base = 1;
  // deprecated
  repeated CollectionRate rates = 2;
  LimiterNode rootLimiter = 3;
}

message ListClientInfosRequest {
  common.MsgBase base = 1;
}

message ListClientInfosResponse {
  common.Status status = 1;
  repeated common.ClientInfo client_infos = 2;
}
