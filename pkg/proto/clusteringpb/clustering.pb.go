// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.4
// source: clustering.proto

package clusteringpb

import (
	schemapb "github.com/milvus-io/milvus-proto/go-api/v2/schemapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Synchronously modify StorageConfig in index_coord.proto/index_cgo_msg.proto file
type StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address           string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AccessKeyID       string `protobuf:"bytes,2,opt,name=access_keyID,json=accessKeyID,proto3" json:"access_keyID,omitempty"`
	SecretAccessKey   string `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	UseSSL            bool   `protobuf:"varint,4,opt,name=useSSL,proto3" json:"useSSL,omitempty"`
	BucketName        string `protobuf:"bytes,5,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	RootPath          string `protobuf:"bytes,6,opt,name=root_path,json=rootPath,proto3" json:"root_path,omitempty"`
	UseIAM            bool   `protobuf:"varint,7,opt,name=useIAM,proto3" json:"useIAM,omitempty"`
	IAMEndpoint       string `protobuf:"bytes,8,opt,name=IAMEndpoint,proto3" json:"IAMEndpoint,omitempty"`
	StorageType       string `protobuf:"bytes,9,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	UseVirtualHost    bool   `protobuf:"varint,10,opt,name=use_virtual_host,json=useVirtualHost,proto3" json:"use_virtual_host,omitempty"`
	Region            string `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
	CloudProvider     string `protobuf:"bytes,12,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	RequestTimeoutMs  int64  `protobuf:"varint,13,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3" json:"request_timeout_ms,omitempty"`
	SslCACert         string `protobuf:"bytes,14,opt,name=sslCACert,proto3" json:"sslCACert,omitempty"`
	GcpCredentialJSON string `protobuf:"bytes,15,opt,name=GcpCredentialJSON,proto3" json:"GcpCredentialJSON,omitempty"`
}

func (x *StorageConfig) Reset() {
	*x = StorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustering_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfig) ProtoMessage() {}

func (x *StorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustering_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfig.ProtoReflect.Descriptor instead.
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return file_clustering_proto_rawDescGZIP(), []int{0}
}

func (x *StorageConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StorageConfig) GetAccessKeyID() string {
	if x != nil {
		return x.AccessKeyID
	}
	return ""
}

func (x *StorageConfig) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *StorageConfig) GetUseSSL() bool {
	if x != nil {
		return x.UseSSL
	}
	return false
}

func (x *StorageConfig) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StorageConfig) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

func (x *StorageConfig) GetUseIAM() bool {
	if x != nil {
		return x.UseIAM
	}
	return false
}

func (x *StorageConfig) GetIAMEndpoint() string {
	if x != nil {
		return x.IAMEndpoint
	}
	return ""
}

func (x *StorageConfig) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *StorageConfig) GetUseVirtualHost() bool {
	if x != nil {
		return x.UseVirtualHost
	}
	return false
}

func (x *StorageConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StorageConfig) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *StorageConfig) GetRequestTimeoutMs() int64 {
	if x != nil {
		return x.RequestTimeoutMs
	}
	return 0
}

func (x *StorageConfig) GetSslCACert() string {
	if x != nil {
		return x.SslCACert
	}
	return ""
}

func (x *StorageConfig) GetGcpCredentialJSON() string {
	if x != nil {
		return x.GcpCredentialJSON
	}
	return ""
}

type InsertFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertFiles []string `protobuf:"bytes,1,rep,name=insert_files,json=insertFiles,proto3" json:"insert_files,omitempty"`
}

func (x *InsertFiles) Reset() {
	*x = InsertFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustering_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertFiles) ProtoMessage() {}

func (x *InsertFiles) ProtoReflect() protoreflect.Message {
	mi := &file_clustering_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertFiles.ProtoReflect.Descriptor instead.
func (*InsertFiles) Descriptor() ([]byte, []int) {
	return file_clustering_proto_rawDescGZIP(), []int{1}
}

func (x *InsertFiles) GetInsertFiles() []string {
	if x != nil {
		return x.InsertFiles
	}
	return nil
}

type AnalyzeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID       string                 `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	BuildID         int64                  `protobuf:"varint,2,opt,name=buildID,proto3" json:"buildID,omitempty"`
	CollectionID    int64                  `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID     int64                  `protobuf:"varint,4,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	SegmentID       int64                  `protobuf:"varint,5,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	Version         int64                  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Dim             int64                  `protobuf:"varint,7,opt,name=dim,proto3" json:"dim,omitempty"`
	NumClusters     int64                  `protobuf:"varint,8,opt,name=num_clusters,json=numClusters,proto3" json:"num_clusters,omitempty"`
	TrainSize       int64                  `protobuf:"varint,9,opt,name=train_size,json=trainSize,proto3" json:"train_size,omitempty"`
	MinClusterRatio float64                `protobuf:"fixed64,10,opt,name=min_cluster_ratio,json=minClusterRatio,proto3" json:"min_cluster_ratio,omitempty"` // min_cluster_size / avg_cluster_size < min_cluster_ratio, is skew
	MaxClusterRatio float64                `protobuf:"fixed64,11,opt,name=max_cluster_ratio,json=maxClusterRatio,proto3" json:"max_cluster_ratio,omitempty"` // max_cluster_size / avg_cluster_size > max_cluster_ratio, is skew
	MaxClusterSize  int64                  `protobuf:"varint,12,opt,name=max_cluster_size,json=maxClusterSize,proto3" json:"max_cluster_size,omitempty"`
	InsertFiles     map[int64]*InsertFiles `protobuf:"bytes,13,rep,name=insert_files,json=insertFiles,proto3" json:"insert_files,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumRows         map[int64]int64        `protobuf:"bytes,14,rep,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FieldSchema     *schemapb.FieldSchema  `protobuf:"bytes,15,opt,name=field_schema,json=fieldSchema,proto3" json:"field_schema,omitempty"`
	StorageConfig   *StorageConfig         `protobuf:"bytes,16,opt,name=storage_config,json=storageConfig,proto3" json:"storage_config,omitempty"`
}

func (x *AnalyzeInfo) Reset() {
	*x = AnalyzeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustering_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeInfo) ProtoMessage() {}

func (x *AnalyzeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustering_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeInfo.ProtoReflect.Descriptor instead.
func (*AnalyzeInfo) Descriptor() ([]byte, []int) {
	return file_clustering_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *AnalyzeInfo) GetBuildID() int64 {
	if x != nil {
		return x.BuildID
	}
	return 0
}

func (x *AnalyzeInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *AnalyzeInfo) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *AnalyzeInfo) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *AnalyzeInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AnalyzeInfo) GetDim() int64 {
	if x != nil {
		return x.Dim
	}
	return 0
}

func (x *AnalyzeInfo) GetNumClusters() int64 {
	if x != nil {
		return x.NumClusters
	}
	return 0
}

func (x *AnalyzeInfo) GetTrainSize() int64 {
	if x != nil {
		return x.TrainSize
	}
	return 0
}

func (x *AnalyzeInfo) GetMinClusterRatio() float64 {
	if x != nil {
		return x.MinClusterRatio
	}
	return 0
}

func (x *AnalyzeInfo) GetMaxClusterRatio() float64 {
	if x != nil {
		return x.MaxClusterRatio
	}
	return 0
}

func (x *AnalyzeInfo) GetMaxClusterSize() int64 {
	if x != nil {
		return x.MaxClusterSize
	}
	return 0
}

func (x *AnalyzeInfo) GetInsertFiles() map[int64]*InsertFiles {
	if x != nil {
		return x.InsertFiles
	}
	return nil
}

func (x *AnalyzeInfo) GetNumRows() map[int64]int64 {
	if x != nil {
		return x.NumRows
	}
	return nil
}

func (x *AnalyzeInfo) GetFieldSchema() *schemapb.FieldSchema {
	if x != nil {
		return x.FieldSchema
	}
	return nil
}

func (x *AnalyzeInfo) GetStorageConfig() *StorageConfig {
	if x != nil {
		return x.StorageConfig
	}
	return nil
}

type ClusteringCentroidsStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Centroids []*schemapb.VectorField `protobuf:"bytes,1,rep,name=centroids,proto3" json:"centroids,omitempty"`
}

func (x *ClusteringCentroidsStats) Reset() {
	*x = ClusteringCentroidsStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustering_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusteringCentroidsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteringCentroidsStats) ProtoMessage() {}

func (x *ClusteringCentroidsStats) ProtoReflect() protoreflect.Message {
	mi := &file_clustering_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteringCentroidsStats.ProtoReflect.Descriptor instead.
func (*ClusteringCentroidsStats) Descriptor() ([]byte, []int) {
	return file_clustering_proto_rawDescGZIP(), []int{3}
}

func (x *ClusteringCentroidsStats) GetCentroids() []*schemapb.VectorField {
	if x != nil {
		return x.Centroids
	}
	return nil
}

type ClusteringCentroidIdMappingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CentroidIdMapping []uint32 `protobuf:"varint,1,rep,packed,name=centroid_id_mapping,json=centroidIdMapping,proto3" json:"centroid_id_mapping,omitempty"`
	NumInCentroid     []int64  `protobuf:"varint,2,rep,packed,name=num_in_centroid,json=numInCentroid,proto3" json:"num_in_centroid,omitempty"`
}

func (x *ClusteringCentroidIdMappingStats) Reset() {
	*x = ClusteringCentroidIdMappingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustering_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusteringCentroidIdMappingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteringCentroidIdMappingStats) ProtoMessage() {}

func (x *ClusteringCentroidIdMappingStats) ProtoReflect() protoreflect.Message {
	mi := &file_clustering_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteringCentroidIdMappingStats.ProtoReflect.Descriptor instead.
func (*ClusteringCentroidIdMappingStats) Descriptor() ([]byte, []int) {
	return file_clustering_proto_rawDescGZIP(), []int{4}
}

func (x *ClusteringCentroidIdMappingStats) GetCentroidIdMapping() []uint32 {
	if x != nil {
		return x.CentroidIdMapping
	}
	return nil
}

func (x *ClusteringCentroidIdMappingStats) GetNumInCentroid() []int64 {
	if x != nil {
		return x.NumInCentroid
	}
	return nil
}

var File_clustering_proto protoreflect.FileDescriptor

var file_clustering_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x04, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x4c, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x49, 0x41, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x49,
	0x41, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x41, 0x4d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x41, 0x4d, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x47, 0x63, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x47, 0x63, 0x70, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x30, 0x0a, 0x0b, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xf7, 0x06, 0x0a,
	0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x64, 0x69, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x75, 0x6d, 0x52, 0x6f,
	0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x64, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4e, 0x75,
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69,
	0x64, 0x73, 0x22, 0x7a, 0x0a, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f,
	0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clustering_proto_rawDescOnce sync.Once
	file_clustering_proto_rawDescData = file_clustering_proto_rawDesc
)

func file_clustering_proto_rawDescGZIP() []byte {
	file_clustering_proto_rawDescOnce.Do(func() {
		file_clustering_proto_rawDescData = protoimpl.X.CompressGZIP(file_clustering_proto_rawDescData)
	})
	return file_clustering_proto_rawDescData
}

var file_clustering_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_clustering_proto_goTypes = []interface{}{
	(*StorageConfig)(nil),                    // 0: milvus.proto.clustering.StorageConfig
	(*InsertFiles)(nil),                      // 1: milvus.proto.clustering.InsertFiles
	(*AnalyzeInfo)(nil),                      // 2: milvus.proto.clustering.AnalyzeInfo
	(*ClusteringCentroidsStats)(nil),         // 3: milvus.proto.clustering.ClusteringCentroidsStats
	(*ClusteringCentroidIdMappingStats)(nil), // 4: milvus.proto.clustering.ClusteringCentroidIdMappingStats
	nil,                                      // 5: milvus.proto.clustering.AnalyzeInfo.InsertFilesEntry
	nil,                                      // 6: milvus.proto.clustering.AnalyzeInfo.NumRowsEntry
	(*schemapb.FieldSchema)(nil),             // 7: milvus.proto.schema.FieldSchema
	(*schemapb.VectorField)(nil),             // 8: milvus.proto.schema.VectorField
}
var file_clustering_proto_depIdxs = []int32{
	5, // 0: milvus.proto.clustering.AnalyzeInfo.insert_files:type_name -> milvus.proto.clustering.AnalyzeInfo.InsertFilesEntry
	6, // 1: milvus.proto.clustering.AnalyzeInfo.num_rows:type_name -> milvus.proto.clustering.AnalyzeInfo.NumRowsEntry
	7, // 2: milvus.proto.clustering.AnalyzeInfo.field_schema:type_name -> milvus.proto.schema.FieldSchema
	0, // 3: milvus.proto.clustering.AnalyzeInfo.storage_config:type_name -> milvus.proto.clustering.StorageConfig
	8, // 4: milvus.proto.clustering.ClusteringCentroidsStats.centroids:type_name -> milvus.proto.schema.VectorField
	1, // 5: milvus.proto.clustering.AnalyzeInfo.InsertFilesEntry.value:type_name -> milvus.proto.clustering.InsertFiles
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_clustering_proto_init() }
func file_clustering_proto_init() {
	if File_clustering_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clustering_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustering_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustering_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustering_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusteringCentroidsStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustering_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusteringCentroidIdMappingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clustering_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clustering_proto_goTypes,
		DependencyIndexes: file_clustering_proto_depIdxs,
		MessageInfos:      file_clustering_proto_msgTypes,
	}.Build()
	File_clustering_proto = out.File
	file_clustering_proto_rawDesc = nil
	file_clustering_proto_goTypes = nil
	file_clustering_proto_depIdxs = nil
}
