// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: worker.proto

package workerpb

import (
	context "context"
	commonpb "github.com/milvus-io/milvus-proto/go-api/v2/commonpb"
	milvuspb "github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"
	internalpb "github.com/milvus-io/milvus/pkg/proto/internalpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IndexNode_GetComponentStates_FullMethodName   = "/milvus.proto.index.IndexNode/GetComponentStates"
	IndexNode_GetStatisticsChannel_FullMethodName = "/milvus.proto.index.IndexNode/GetStatisticsChannel"
	IndexNode_CreateJob_FullMethodName            = "/milvus.proto.index.IndexNode/CreateJob"
	IndexNode_QueryJobs_FullMethodName            = "/milvus.proto.index.IndexNode/QueryJobs"
	IndexNode_DropJobs_FullMethodName             = "/milvus.proto.index.IndexNode/DropJobs"
	IndexNode_GetJobStats_FullMethodName          = "/milvus.proto.index.IndexNode/GetJobStats"
	IndexNode_ShowConfigurations_FullMethodName   = "/milvus.proto.index.IndexNode/ShowConfigurations"
	IndexNode_GetMetrics_FullMethodName           = "/milvus.proto.index.IndexNode/GetMetrics"
	IndexNode_CreateJobV2_FullMethodName          = "/milvus.proto.index.IndexNode/CreateJobV2"
	IndexNode_QueryJobsV2_FullMethodName          = "/milvus.proto.index.IndexNode/QueryJobsV2"
	IndexNode_DropJobsV2_FullMethodName           = "/milvus.proto.index.IndexNode/DropJobsV2"
)

// IndexNodeClient is the client API for IndexNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexNodeClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	QueryJobs(ctx context.Context, in *QueryJobsRequest, opts ...grpc.CallOption) (*QueryJobsResponse, error)
	DropJobs(ctx context.Context, in *DropJobsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetJobStats(ctx context.Context, in *GetJobStatsRequest, opts ...grpc.CallOption) (*GetJobStatsResponse, error)
	ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	CreateJobV2(ctx context.Context, in *CreateJobV2Request, opts ...grpc.CallOption) (*commonpb.Status, error)
	QueryJobsV2(ctx context.Context, in *QueryJobsV2Request, opts ...grpc.CallOption) (*QueryJobsV2Response, error)
	DropJobsV2(ctx context.Context, in *DropJobsV2Request, opts ...grpc.CallOption) (*commonpb.Status, error)
}

type indexNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexNodeClient(cc grpc.ClientConnInterface) IndexNodeClient {
	return &indexNodeClient{cc}
}

func (c *indexNodeClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, IndexNode_GetComponentStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, IndexNode_GetStatisticsChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, IndexNode_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) QueryJobs(ctx context.Context, in *QueryJobsRequest, opts ...grpc.CallOption) (*QueryJobsResponse, error) {
	out := new(QueryJobsResponse)
	err := c.cc.Invoke(ctx, IndexNode_QueryJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) DropJobs(ctx context.Context, in *DropJobsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, IndexNode_DropJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) GetJobStats(ctx context.Context, in *GetJobStatsRequest, opts ...grpc.CallOption) (*GetJobStatsResponse, error) {
	out := new(GetJobStatsResponse)
	err := c.cc.Invoke(ctx, IndexNode_GetJobStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error) {
	out := new(internalpb.ShowConfigurationsResponse)
	err := c.cc.Invoke(ctx, IndexNode_ShowConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, IndexNode_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) CreateJobV2(ctx context.Context, in *CreateJobV2Request, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, IndexNode_CreateJobV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) QueryJobsV2(ctx context.Context, in *QueryJobsV2Request, opts ...grpc.CallOption) (*QueryJobsV2Response, error) {
	out := new(QueryJobsV2Response)
	err := c.cc.Invoke(ctx, IndexNode_QueryJobsV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexNodeClient) DropJobsV2(ctx context.Context, in *DropJobsV2Request, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, IndexNode_DropJobsV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexNodeServer is the server API for IndexNode service.
// All implementations should embed UnimplementedIndexNodeServer
// for forward compatibility
type IndexNodeServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	CreateJob(context.Context, *CreateJobRequest) (*commonpb.Status, error)
	QueryJobs(context.Context, *QueryJobsRequest) (*QueryJobsResponse, error)
	DropJobs(context.Context, *DropJobsRequest) (*commonpb.Status, error)
	GetJobStats(context.Context, *GetJobStatsRequest) (*GetJobStatsResponse, error)
	ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	CreateJobV2(context.Context, *CreateJobV2Request) (*commonpb.Status, error)
	QueryJobsV2(context.Context, *QueryJobsV2Request) (*QueryJobsV2Response, error)
	DropJobsV2(context.Context, *DropJobsV2Request) (*commonpb.Status, error)
}

// UnimplementedIndexNodeServer should be embedded to have forward compatible implementations.
type UnimplementedIndexNodeServer struct {
}

func (UnimplementedIndexNodeServer) GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (UnimplementedIndexNodeServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (UnimplementedIndexNodeServer) CreateJob(context.Context, *CreateJobRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedIndexNodeServer) QueryJobs(context.Context, *QueryJobsRequest) (*QueryJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobs not implemented")
}
func (UnimplementedIndexNodeServer) DropJobs(context.Context, *DropJobsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropJobs not implemented")
}
func (UnimplementedIndexNodeServer) GetJobStats(context.Context, *GetJobStatsRequest) (*GetJobStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStats not implemented")
}
func (UnimplementedIndexNodeServer) ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfigurations not implemented")
}
func (UnimplementedIndexNodeServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedIndexNodeServer) CreateJobV2(context.Context, *CreateJobV2Request) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobV2 not implemented")
}
func (UnimplementedIndexNodeServer) QueryJobsV2(context.Context, *QueryJobsV2Request) (*QueryJobsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobsV2 not implemented")
}
func (UnimplementedIndexNodeServer) DropJobsV2(context.Context, *DropJobsV2Request) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropJobsV2 not implemented")
}

// UnsafeIndexNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexNodeServer will
// result in compilation errors.
type UnsafeIndexNodeServer interface {
	mustEmbedUnimplementedIndexNodeServer()
}

func RegisterIndexNodeServer(s grpc.ServiceRegistrar, srv IndexNodeServer) {
	s.RegisterService(&IndexNode_ServiceDesc, srv)
}

func _IndexNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_GetComponentStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_GetStatisticsChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_QueryJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).QueryJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_QueryJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).QueryJobs(ctx, req.(*QueryJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_DropJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).DropJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_DropJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).DropJobs(ctx, req.(*DropJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_GetJobStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).GetJobStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_GetJobStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).GetJobStats(ctx, req.(*GetJobStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_ShowConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ShowConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).ShowConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_ShowConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).ShowConfigurations(ctx, req.(*internalpb.ShowConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_CreateJobV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).CreateJobV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_CreateJobV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).CreateJobV2(ctx, req.(*CreateJobV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_QueryJobsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).QueryJobsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_QueryJobsV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).QueryJobsV2(ctx, req.(*QueryJobsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexNode_DropJobsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropJobsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexNodeServer).DropJobsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexNode_DropJobsV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexNodeServer).DropJobsV2(ctx, req.(*DropJobsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexNode_ServiceDesc is the grpc.ServiceDesc for IndexNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.index.IndexNode",
	HandlerType: (*IndexNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _IndexNode_GetComponentStates_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _IndexNode_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _IndexNode_CreateJob_Handler,
		},
		{
			MethodName: "QueryJobs",
			Handler:    _IndexNode_QueryJobs_Handler,
		},
		{
			MethodName: "DropJobs",
			Handler:    _IndexNode_DropJobs_Handler,
		},
		{
			MethodName: "GetJobStats",
			Handler:    _IndexNode_GetJobStats_Handler,
		},
		{
			MethodName: "ShowConfigurations",
			Handler:    _IndexNode_ShowConfigurations_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _IndexNode_GetMetrics_Handler,
		},
		{
			MethodName: "CreateJobV2",
			Handler:    _IndexNode_CreateJobV2_Handler,
		},
		{
			MethodName: "QueryJobsV2",
			Handler:    _IndexNode_QueryJobsV2_Handler,
		},
		{
			MethodName: "DropJobsV2",
			Handler:    _IndexNode_DropJobsV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}
