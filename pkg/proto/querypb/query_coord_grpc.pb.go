// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: query_coord.proto

package querypb

import (
	context "context"
	commonpb "github.com/milvus-io/milvus-proto/go-api/v2/commonpb"
	milvuspb "github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"
	internalpb "github.com/milvus-io/milvus/pkg/proto/internalpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryCoord_GetComponentStates_FullMethodName         = "/milvus.proto.query.QueryCoord/GetComponentStates"
	QueryCoord_GetTimeTickChannel_FullMethodName         = "/milvus.proto.query.QueryCoord/GetTimeTickChannel"
	QueryCoord_GetStatisticsChannel_FullMethodName       = "/milvus.proto.query.QueryCoord/GetStatisticsChannel"
	QueryCoord_ShowCollections_FullMethodName            = "/milvus.proto.query.QueryCoord/ShowCollections"
	QueryCoord_ShowPartitions_FullMethodName             = "/milvus.proto.query.QueryCoord/ShowPartitions"
	QueryCoord_LoadPartitions_FullMethodName             = "/milvus.proto.query.QueryCoord/LoadPartitions"
	QueryCoord_ReleasePartitions_FullMethodName          = "/milvus.proto.query.QueryCoord/ReleasePartitions"
	QueryCoord_LoadCollection_FullMethodName             = "/milvus.proto.query.QueryCoord/LoadCollection"
	QueryCoord_ReleaseCollection_FullMethodName          = "/milvus.proto.query.QueryCoord/ReleaseCollection"
	QueryCoord_SyncNewCreatedPartition_FullMethodName    = "/milvus.proto.query.QueryCoord/SyncNewCreatedPartition"
	QueryCoord_GetPartitionStates_FullMethodName         = "/milvus.proto.query.QueryCoord/GetPartitionStates"
	QueryCoord_GetSegmentInfo_FullMethodName             = "/milvus.proto.query.QueryCoord/GetSegmentInfo"
	QueryCoord_LoadBalance_FullMethodName                = "/milvus.proto.query.QueryCoord/LoadBalance"
	QueryCoord_ShowConfigurations_FullMethodName         = "/milvus.proto.query.QueryCoord/ShowConfigurations"
	QueryCoord_GetMetrics_FullMethodName                 = "/milvus.proto.query.QueryCoord/GetMetrics"
	QueryCoord_GetReplicas_FullMethodName                = "/milvus.proto.query.QueryCoord/GetReplicas"
	QueryCoord_GetShardLeaders_FullMethodName            = "/milvus.proto.query.QueryCoord/GetShardLeaders"
	QueryCoord_CheckHealth_FullMethodName                = "/milvus.proto.query.QueryCoord/CheckHealth"
	QueryCoord_CreateResourceGroup_FullMethodName        = "/milvus.proto.query.QueryCoord/CreateResourceGroup"
	QueryCoord_UpdateResourceGroups_FullMethodName       = "/milvus.proto.query.QueryCoord/UpdateResourceGroups"
	QueryCoord_DropResourceGroup_FullMethodName          = "/milvus.proto.query.QueryCoord/DropResourceGroup"
	QueryCoord_TransferNode_FullMethodName               = "/milvus.proto.query.QueryCoord/TransferNode"
	QueryCoord_TransferReplica_FullMethodName            = "/milvus.proto.query.QueryCoord/TransferReplica"
	QueryCoord_ListResourceGroups_FullMethodName         = "/milvus.proto.query.QueryCoord/ListResourceGroups"
	QueryCoord_DescribeResourceGroup_FullMethodName      = "/milvus.proto.query.QueryCoord/DescribeResourceGroup"
	QueryCoord_ListCheckers_FullMethodName               = "/milvus.proto.query.QueryCoord/ListCheckers"
	QueryCoord_ActivateChecker_FullMethodName            = "/milvus.proto.query.QueryCoord/ActivateChecker"
	QueryCoord_DeactivateChecker_FullMethodName          = "/milvus.proto.query.QueryCoord/DeactivateChecker"
	QueryCoord_ListQueryNode_FullMethodName              = "/milvus.proto.query.QueryCoord/ListQueryNode"
	QueryCoord_GetQueryNodeDistribution_FullMethodName   = "/milvus.proto.query.QueryCoord/GetQueryNodeDistribution"
	QueryCoord_SuspendBalance_FullMethodName             = "/milvus.proto.query.QueryCoord/SuspendBalance"
	QueryCoord_ResumeBalance_FullMethodName              = "/milvus.proto.query.QueryCoord/ResumeBalance"
	QueryCoord_SuspendNode_FullMethodName                = "/milvus.proto.query.QueryCoord/SuspendNode"
	QueryCoord_ResumeNode_FullMethodName                 = "/milvus.proto.query.QueryCoord/ResumeNode"
	QueryCoord_TransferSegment_FullMethodName            = "/milvus.proto.query.QueryCoord/TransferSegment"
	QueryCoord_TransferChannel_FullMethodName            = "/milvus.proto.query.QueryCoord/TransferChannel"
	QueryCoord_CheckQueryNodeDistribution_FullMethodName = "/milvus.proto.query.QueryCoord/CheckQueryNodeDistribution"
	QueryCoord_UpdateLoadConfig_FullMethodName           = "/milvus.proto.query.QueryCoord/UpdateLoadConfig"
)

// QueryCoordClient is the client API for QueryCoord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryCoordClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error)
	ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SyncNewCreatedPartition(ctx context.Context, in *SyncNewCreatedPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetPartitionStates(ctx context.Context, in *GetPartitionStatesRequest, opts ...grpc.CallOption) (*GetPartitionStatesResponse, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
	LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+23+--+Multiple+memory+replication+design
	GetReplicas(ctx context.Context, in *milvuspb.GetReplicasRequest, opts ...grpc.CallOption) (*milvuspb.GetReplicasResponse, error)
	GetShardLeaders(ctx context.Context, in *GetShardLeadersRequest, opts ...grpc.CallOption) (*GetShardLeadersResponse, error)
	CheckHealth(ctx context.Context, in *milvuspb.CheckHealthRequest, opts ...grpc.CallOption) (*milvuspb.CheckHealthResponse, error)
	CreateResourceGroup(ctx context.Context, in *milvuspb.CreateResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateResourceGroups(ctx context.Context, in *UpdateResourceGroupsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropResourceGroup(ctx context.Context, in *milvuspb.DropResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	TransferNode(ctx context.Context, in *milvuspb.TransferNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	TransferReplica(ctx context.Context, in *TransferReplicaRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListResourceGroups(ctx context.Context, in *milvuspb.ListResourceGroupsRequest, opts ...grpc.CallOption) (*milvuspb.ListResourceGroupsResponse, error)
	DescribeResourceGroup(ctx context.Context, in *DescribeResourceGroupRequest, opts ...grpc.CallOption) (*DescribeResourceGroupResponse, error)
	// ops interfaces
	ListCheckers(ctx context.Context, in *ListCheckersRequest, opts ...grpc.CallOption) (*ListCheckersResponse, error)
	ActivateChecker(ctx context.Context, in *ActivateCheckerRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DeactivateChecker(ctx context.Context, in *DeactivateCheckerRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListQueryNode(ctx context.Context, in *ListQueryNodeRequest, opts ...grpc.CallOption) (*ListQueryNodeResponse, error)
	GetQueryNodeDistribution(ctx context.Context, in *GetQueryNodeDistributionRequest, opts ...grpc.CallOption) (*GetQueryNodeDistributionResponse, error)
	SuspendBalance(ctx context.Context, in *SuspendBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ResumeBalance(ctx context.Context, in *ResumeBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SuspendNode(ctx context.Context, in *SuspendNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ResumeNode(ctx context.Context, in *ResumeNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	TransferSegment(ctx context.Context, in *TransferSegmentRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	TransferChannel(ctx context.Context, in *TransferChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CheckQueryNodeDistribution(ctx context.Context, in *CheckQueryNodeDistributionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateLoadConfig(ctx context.Context, in *UpdateLoadConfigRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
}

type queryCoordClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryCoordClient(cc grpc.ClientConnInterface) QueryCoordClient {
	return &queryCoordClient{cc}
}

func (c *queryCoordClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, QueryCoord_GetComponentStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetTimeTickChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetStatisticsChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error) {
	out := new(ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, QueryCoord_ShowCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error) {
	out := new(ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, QueryCoord_ShowPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_LoadPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_ReleasePartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_LoadCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_ReleaseCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) SyncNewCreatedPartition(ctx context.Context, in *SyncNewCreatedPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_SyncNewCreatedPartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetPartitionStates(ctx context.Context, in *GetPartitionStatesRequest, opts ...grpc.CallOption) (*GetPartitionStatesResponse, error) {
	out := new(GetPartitionStatesResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetPartitionStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetSegmentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_LoadBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error) {
	out := new(internalpb.ShowConfigurationsResponse)
	err := c.cc.Invoke(ctx, QueryCoord_ShowConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetReplicas(ctx context.Context, in *milvuspb.GetReplicasRequest, opts ...grpc.CallOption) (*milvuspb.GetReplicasResponse, error) {
	out := new(milvuspb.GetReplicasResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetReplicas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetShardLeaders(ctx context.Context, in *GetShardLeadersRequest, opts ...grpc.CallOption) (*GetShardLeadersResponse, error) {
	out := new(GetShardLeadersResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetShardLeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) CheckHealth(ctx context.Context, in *milvuspb.CheckHealthRequest, opts ...grpc.CallOption) (*milvuspb.CheckHealthResponse, error) {
	out := new(milvuspb.CheckHealthResponse)
	err := c.cc.Invoke(ctx, QueryCoord_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) CreateResourceGroup(ctx context.Context, in *milvuspb.CreateResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_CreateResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) UpdateResourceGroups(ctx context.Context, in *UpdateResourceGroupsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_UpdateResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) DropResourceGroup(ctx context.Context, in *milvuspb.DropResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_DropResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) TransferNode(ctx context.Context, in *milvuspb.TransferNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_TransferNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) TransferReplica(ctx context.Context, in *TransferReplicaRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_TransferReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ListResourceGroups(ctx context.Context, in *milvuspb.ListResourceGroupsRequest, opts ...grpc.CallOption) (*milvuspb.ListResourceGroupsResponse, error) {
	out := new(milvuspb.ListResourceGroupsResponse)
	err := c.cc.Invoke(ctx, QueryCoord_ListResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) DescribeResourceGroup(ctx context.Context, in *DescribeResourceGroupRequest, opts ...grpc.CallOption) (*DescribeResourceGroupResponse, error) {
	out := new(DescribeResourceGroupResponse)
	err := c.cc.Invoke(ctx, QueryCoord_DescribeResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ListCheckers(ctx context.Context, in *ListCheckersRequest, opts ...grpc.CallOption) (*ListCheckersResponse, error) {
	out := new(ListCheckersResponse)
	err := c.cc.Invoke(ctx, QueryCoord_ListCheckers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ActivateChecker(ctx context.Context, in *ActivateCheckerRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_ActivateChecker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) DeactivateChecker(ctx context.Context, in *DeactivateCheckerRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_DeactivateChecker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ListQueryNode(ctx context.Context, in *ListQueryNodeRequest, opts ...grpc.CallOption) (*ListQueryNodeResponse, error) {
	out := new(ListQueryNodeResponse)
	err := c.cc.Invoke(ctx, QueryCoord_ListQueryNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetQueryNodeDistribution(ctx context.Context, in *GetQueryNodeDistributionRequest, opts ...grpc.CallOption) (*GetQueryNodeDistributionResponse, error) {
	out := new(GetQueryNodeDistributionResponse)
	err := c.cc.Invoke(ctx, QueryCoord_GetQueryNodeDistribution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) SuspendBalance(ctx context.Context, in *SuspendBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_SuspendBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ResumeBalance(ctx context.Context, in *ResumeBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_ResumeBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) SuspendNode(ctx context.Context, in *SuspendNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_SuspendNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ResumeNode(ctx context.Context, in *ResumeNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_ResumeNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) TransferSegment(ctx context.Context, in *TransferSegmentRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_TransferSegment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) TransferChannel(ctx context.Context, in *TransferChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_TransferChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) CheckQueryNodeDistribution(ctx context.Context, in *CheckQueryNodeDistributionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_CheckQueryNodeDistribution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) UpdateLoadConfig(ctx context.Context, in *UpdateLoadConfigRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryCoord_UpdateLoadConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryCoordServer is the server API for QueryCoord service.
// All implementations should embed UnimplementedQueryCoordServer
// for forward compatibility
type QueryCoordServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error)
	ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error)
	LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	SyncNewCreatedPartition(context.Context, *SyncNewCreatedPartitionRequest) (*commonpb.Status, error)
	GetPartitionStates(context.Context, *GetPartitionStatesRequest) (*GetPartitionStatesResponse, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
	LoadBalance(context.Context, *LoadBalanceRequest) (*commonpb.Status, error)
	ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+23+--+Multiple+memory+replication+design
	GetReplicas(context.Context, *milvuspb.GetReplicasRequest) (*milvuspb.GetReplicasResponse, error)
	GetShardLeaders(context.Context, *GetShardLeadersRequest) (*GetShardLeadersResponse, error)
	CheckHealth(context.Context, *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error)
	CreateResourceGroup(context.Context, *milvuspb.CreateResourceGroupRequest) (*commonpb.Status, error)
	UpdateResourceGroups(context.Context, *UpdateResourceGroupsRequest) (*commonpb.Status, error)
	DropResourceGroup(context.Context, *milvuspb.DropResourceGroupRequest) (*commonpb.Status, error)
	TransferNode(context.Context, *milvuspb.TransferNodeRequest) (*commonpb.Status, error)
	TransferReplica(context.Context, *TransferReplicaRequest) (*commonpb.Status, error)
	ListResourceGroups(context.Context, *milvuspb.ListResourceGroupsRequest) (*milvuspb.ListResourceGroupsResponse, error)
	DescribeResourceGroup(context.Context, *DescribeResourceGroupRequest) (*DescribeResourceGroupResponse, error)
	// ops interfaces
	ListCheckers(context.Context, *ListCheckersRequest) (*ListCheckersResponse, error)
	ActivateChecker(context.Context, *ActivateCheckerRequest) (*commonpb.Status, error)
	DeactivateChecker(context.Context, *DeactivateCheckerRequest) (*commonpb.Status, error)
	ListQueryNode(context.Context, *ListQueryNodeRequest) (*ListQueryNodeResponse, error)
	GetQueryNodeDistribution(context.Context, *GetQueryNodeDistributionRequest) (*GetQueryNodeDistributionResponse, error)
	SuspendBalance(context.Context, *SuspendBalanceRequest) (*commonpb.Status, error)
	ResumeBalance(context.Context, *ResumeBalanceRequest) (*commonpb.Status, error)
	SuspendNode(context.Context, *SuspendNodeRequest) (*commonpb.Status, error)
	ResumeNode(context.Context, *ResumeNodeRequest) (*commonpb.Status, error)
	TransferSegment(context.Context, *TransferSegmentRequest) (*commonpb.Status, error)
	TransferChannel(context.Context, *TransferChannelRequest) (*commonpb.Status, error)
	CheckQueryNodeDistribution(context.Context, *CheckQueryNodeDistributionRequest) (*commonpb.Status, error)
	UpdateLoadConfig(context.Context, *UpdateLoadConfigRequest) (*commonpb.Status, error)
}

// UnimplementedQueryCoordServer should be embedded to have forward compatible implementations.
type UnimplementedQueryCoordServer struct {
}

func (UnimplementedQueryCoordServer) GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (UnimplementedQueryCoordServer) GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (UnimplementedQueryCoordServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (UnimplementedQueryCoordServer) ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (UnimplementedQueryCoordServer) ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (UnimplementedQueryCoordServer) LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (UnimplementedQueryCoordServer) ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (UnimplementedQueryCoordServer) LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (UnimplementedQueryCoordServer) ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (UnimplementedQueryCoordServer) SyncNewCreatedPartition(context.Context, *SyncNewCreatedPartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNewCreatedPartition not implemented")
}
func (UnimplementedQueryCoordServer) GetPartitionStates(context.Context, *GetPartitionStatesRequest) (*GetPartitionStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStates not implemented")
}
func (UnimplementedQueryCoordServer) GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}
func (UnimplementedQueryCoordServer) LoadBalance(context.Context, *LoadBalanceRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBalance not implemented")
}
func (UnimplementedQueryCoordServer) ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfigurations not implemented")
}
func (UnimplementedQueryCoordServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedQueryCoordServer) GetReplicas(context.Context, *milvuspb.GetReplicasRequest) (*milvuspb.GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (UnimplementedQueryCoordServer) GetShardLeaders(context.Context, *GetShardLeadersRequest) (*GetShardLeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardLeaders not implemented")
}
func (UnimplementedQueryCoordServer) CheckHealth(context.Context, *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedQueryCoordServer) CreateResourceGroup(context.Context, *milvuspb.CreateResourceGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceGroup not implemented")
}
func (UnimplementedQueryCoordServer) UpdateResourceGroups(context.Context, *UpdateResourceGroupsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceGroups not implemented")
}
func (UnimplementedQueryCoordServer) DropResourceGroup(context.Context, *milvuspb.DropResourceGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropResourceGroup not implemented")
}
func (UnimplementedQueryCoordServer) TransferNode(context.Context, *milvuspb.TransferNodeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferNode not implemented")
}
func (UnimplementedQueryCoordServer) TransferReplica(context.Context, *TransferReplicaRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferReplica not implemented")
}
func (UnimplementedQueryCoordServer) ListResourceGroups(context.Context, *milvuspb.ListResourceGroupsRequest) (*milvuspb.ListResourceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceGroups not implemented")
}
func (UnimplementedQueryCoordServer) DescribeResourceGroup(context.Context, *DescribeResourceGroupRequest) (*DescribeResourceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeResourceGroup not implemented")
}
func (UnimplementedQueryCoordServer) ListCheckers(context.Context, *ListCheckersRequest) (*ListCheckersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCheckers not implemented")
}
func (UnimplementedQueryCoordServer) ActivateChecker(context.Context, *ActivateCheckerRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateChecker not implemented")
}
func (UnimplementedQueryCoordServer) DeactivateChecker(context.Context, *DeactivateCheckerRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateChecker not implemented")
}
func (UnimplementedQueryCoordServer) ListQueryNode(context.Context, *ListQueryNodeRequest) (*ListQueryNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueryNode not implemented")
}
func (UnimplementedQueryCoordServer) GetQueryNodeDistribution(context.Context, *GetQueryNodeDistributionRequest) (*GetQueryNodeDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryNodeDistribution not implemented")
}
func (UnimplementedQueryCoordServer) SuspendBalance(context.Context, *SuspendBalanceRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBalance not implemented")
}
func (UnimplementedQueryCoordServer) ResumeBalance(context.Context, *ResumeBalanceRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeBalance not implemented")
}
func (UnimplementedQueryCoordServer) SuspendNode(context.Context, *SuspendNodeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendNode not implemented")
}
func (UnimplementedQueryCoordServer) ResumeNode(context.Context, *ResumeNodeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeNode not implemented")
}
func (UnimplementedQueryCoordServer) TransferSegment(context.Context, *TransferSegmentRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSegment not implemented")
}
func (UnimplementedQueryCoordServer) TransferChannel(context.Context, *TransferChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferChannel not implemented")
}
func (UnimplementedQueryCoordServer) CheckQueryNodeDistribution(context.Context, *CheckQueryNodeDistributionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQueryNodeDistribution not implemented")
}
func (UnimplementedQueryCoordServer) UpdateLoadConfig(context.Context, *UpdateLoadConfigRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoadConfig not implemented")
}

// UnsafeQueryCoordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryCoordServer will
// result in compilation errors.
type UnsafeQueryCoordServer interface {
	mustEmbedUnimplementedQueryCoordServer()
}

func RegisterQueryCoordServer(s grpc.ServiceRegistrar, srv QueryCoordServer) {
	s.RegisterService(&QueryCoord_ServiceDesc, srv)
}

func _QueryCoord_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetComponentStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetTimeTickChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetStatisticsChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ShowCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ShowCollections(ctx, req.(*ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ShowPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ShowPartitions(ctx, req.(*ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_LoadPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).LoadPartitions(ctx, req.(*LoadPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ReleasePartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_LoadCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).LoadCollection(ctx, req.(*LoadCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ReleaseCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_SyncNewCreatedPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncNewCreatedPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).SyncNewCreatedPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_SyncNewCreatedPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).SyncNewCreatedPartition(ctx, req.(*SyncNewCreatedPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetPartitionStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetPartitionStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetPartitionStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetPartitionStates(ctx, req.(*GetPartitionStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetSegmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_LoadBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).LoadBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_LoadBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).LoadBalance(ctx, req.(*LoadBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ShowConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ShowConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ShowConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ShowConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ShowConfigurations(ctx, req.(*internalpb.ShowConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetReplicas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetReplicas(ctx, req.(*milvuspb.GetReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetShardLeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardLeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetShardLeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetShardLeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetShardLeaders(ctx, req.(*GetShardLeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).CheckHealth(ctx, req.(*milvuspb.CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_CreateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).CreateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_CreateResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).CreateResourceGroup(ctx, req.(*milvuspb.CreateResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_UpdateResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).UpdateResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_UpdateResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).UpdateResourceGroups(ctx, req.(*UpdateResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_DropResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).DropResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_DropResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).DropResourceGroup(ctx, req.(*milvuspb.DropResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_TransferNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.TransferNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).TransferNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_TransferNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).TransferNode(ctx, req.(*milvuspb.TransferNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_TransferReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).TransferReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_TransferReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).TransferReplica(ctx, req.(*TransferReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ListResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ListResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ListResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ListResourceGroups(ctx, req.(*milvuspb.ListResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_DescribeResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).DescribeResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_DescribeResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).DescribeResourceGroup(ctx, req.(*DescribeResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ListCheckers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCheckersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ListCheckers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ListCheckers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ListCheckers(ctx, req.(*ListCheckersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ActivateChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ActivateChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ActivateChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ActivateChecker(ctx, req.(*ActivateCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_DeactivateChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).DeactivateChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_DeactivateChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).DeactivateChecker(ctx, req.(*DeactivateCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ListQueryNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueryNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ListQueryNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ListQueryNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ListQueryNode(ctx, req.(*ListQueryNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetQueryNodeDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryNodeDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetQueryNodeDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_GetQueryNodeDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetQueryNodeDistribution(ctx, req.(*GetQueryNodeDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_SuspendBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).SuspendBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_SuspendBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).SuspendBalance(ctx, req.(*SuspendBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ResumeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ResumeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ResumeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ResumeBalance(ctx, req.(*ResumeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_SuspendNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).SuspendNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_SuspendNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).SuspendNode(ctx, req.(*SuspendNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ResumeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ResumeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_ResumeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ResumeNode(ctx, req.(*ResumeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_TransferSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).TransferSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_TransferSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).TransferSegment(ctx, req.(*TransferSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_TransferChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).TransferChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_TransferChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).TransferChannel(ctx, req.(*TransferChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_CheckQueryNodeDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQueryNodeDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).CheckQueryNodeDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_CheckQueryNodeDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).CheckQueryNodeDistribution(ctx, req.(*CheckQueryNodeDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_UpdateLoadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).UpdateLoadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCoord_UpdateLoadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).UpdateLoadConfig(ctx, req.(*UpdateLoadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryCoord_ServiceDesc is the grpc.ServiceDesc for QueryCoord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryCoord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryCoord",
	HandlerType: (*QueryCoordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryCoord_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryCoord_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryCoord_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _QueryCoord_ShowCollections_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _QueryCoord_ShowPartitions_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _QueryCoord_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryCoord_ReleasePartitions_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _QueryCoord_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryCoord_ReleaseCollection_Handler,
		},
		{
			MethodName: "SyncNewCreatedPartition",
			Handler:    _QueryCoord_SyncNewCreatedPartition_Handler,
		},
		{
			MethodName: "GetPartitionStates",
			Handler:    _QueryCoord_GetPartitionStates_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryCoord_GetSegmentInfo_Handler,
		},
		{
			MethodName: "LoadBalance",
			Handler:    _QueryCoord_LoadBalance_Handler,
		},
		{
			MethodName: "ShowConfigurations",
			Handler:    _QueryCoord_ShowConfigurations_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _QueryCoord_GetMetrics_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _QueryCoord_GetReplicas_Handler,
		},
		{
			MethodName: "GetShardLeaders",
			Handler:    _QueryCoord_GetShardLeaders_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _QueryCoord_CheckHealth_Handler,
		},
		{
			MethodName: "CreateResourceGroup",
			Handler:    _QueryCoord_CreateResourceGroup_Handler,
		},
		{
			MethodName: "UpdateResourceGroups",
			Handler:    _QueryCoord_UpdateResourceGroups_Handler,
		},
		{
			MethodName: "DropResourceGroup",
			Handler:    _QueryCoord_DropResourceGroup_Handler,
		},
		{
			MethodName: "TransferNode",
			Handler:    _QueryCoord_TransferNode_Handler,
		},
		{
			MethodName: "TransferReplica",
			Handler:    _QueryCoord_TransferReplica_Handler,
		},
		{
			MethodName: "ListResourceGroups",
			Handler:    _QueryCoord_ListResourceGroups_Handler,
		},
		{
			MethodName: "DescribeResourceGroup",
			Handler:    _QueryCoord_DescribeResourceGroup_Handler,
		},
		{
			MethodName: "ListCheckers",
			Handler:    _QueryCoord_ListCheckers_Handler,
		},
		{
			MethodName: "ActivateChecker",
			Handler:    _QueryCoord_ActivateChecker_Handler,
		},
		{
			MethodName: "DeactivateChecker",
			Handler:    _QueryCoord_DeactivateChecker_Handler,
		},
		{
			MethodName: "ListQueryNode",
			Handler:    _QueryCoord_ListQueryNode_Handler,
		},
		{
			MethodName: "GetQueryNodeDistribution",
			Handler:    _QueryCoord_GetQueryNodeDistribution_Handler,
		},
		{
			MethodName: "SuspendBalance",
			Handler:    _QueryCoord_SuspendBalance_Handler,
		},
		{
			MethodName: "ResumeBalance",
			Handler:    _QueryCoord_ResumeBalance_Handler,
		},
		{
			MethodName: "SuspendNode",
			Handler:    _QueryCoord_SuspendNode_Handler,
		},
		{
			MethodName: "ResumeNode",
			Handler:    _QueryCoord_ResumeNode_Handler,
		},
		{
			MethodName: "TransferSegment",
			Handler:    _QueryCoord_TransferSegment_Handler,
		},
		{
			MethodName: "TransferChannel",
			Handler:    _QueryCoord_TransferChannel_Handler,
		},
		{
			MethodName: "CheckQueryNodeDistribution",
			Handler:    _QueryCoord_CheckQueryNodeDistribution_Handler,
		},
		{
			MethodName: "UpdateLoadConfig",
			Handler:    _QueryCoord_UpdateLoadConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_coord.proto",
}

const (
	QueryNode_GetComponentStates_FullMethodName   = "/milvus.proto.query.QueryNode/GetComponentStates"
	QueryNode_GetTimeTickChannel_FullMethodName   = "/milvus.proto.query.QueryNode/GetTimeTickChannel"
	QueryNode_GetStatisticsChannel_FullMethodName = "/milvus.proto.query.QueryNode/GetStatisticsChannel"
	QueryNode_WatchDmChannels_FullMethodName      = "/milvus.proto.query.QueryNode/WatchDmChannels"
	QueryNode_UnsubDmChannel_FullMethodName       = "/milvus.proto.query.QueryNode/UnsubDmChannel"
	QueryNode_LoadSegments_FullMethodName         = "/milvus.proto.query.QueryNode/LoadSegments"
	QueryNode_ReleaseCollection_FullMethodName    = "/milvus.proto.query.QueryNode/ReleaseCollection"
	QueryNode_LoadPartitions_FullMethodName       = "/milvus.proto.query.QueryNode/LoadPartitions"
	QueryNode_ReleasePartitions_FullMethodName    = "/milvus.proto.query.QueryNode/ReleasePartitions"
	QueryNode_ReleaseSegments_FullMethodName      = "/milvus.proto.query.QueryNode/ReleaseSegments"
	QueryNode_GetSegmentInfo_FullMethodName       = "/milvus.proto.query.QueryNode/GetSegmentInfo"
	QueryNode_SyncReplicaSegments_FullMethodName  = "/milvus.proto.query.QueryNode/SyncReplicaSegments"
	QueryNode_GetStatistics_FullMethodName        = "/milvus.proto.query.QueryNode/GetStatistics"
	QueryNode_Search_FullMethodName               = "/milvus.proto.query.QueryNode/Search"
	QueryNode_SearchSegments_FullMethodName       = "/milvus.proto.query.QueryNode/SearchSegments"
	QueryNode_Query_FullMethodName                = "/milvus.proto.query.QueryNode/Query"
	QueryNode_QueryStream_FullMethodName          = "/milvus.proto.query.QueryNode/QueryStream"
	QueryNode_QuerySegments_FullMethodName        = "/milvus.proto.query.QueryNode/QuerySegments"
	QueryNode_QueryStreamSegments_FullMethodName  = "/milvus.proto.query.QueryNode/QueryStreamSegments"
	QueryNode_ShowConfigurations_FullMethodName   = "/milvus.proto.query.QueryNode/ShowConfigurations"
	QueryNode_GetMetrics_FullMethodName           = "/milvus.proto.query.QueryNode/GetMetrics"
	QueryNode_GetDataDistribution_FullMethodName  = "/milvus.proto.query.QueryNode/GetDataDistribution"
	QueryNode_SyncDistribution_FullMethodName     = "/milvus.proto.query.QueryNode/SyncDistribution"
	QueryNode_Delete_FullMethodName               = "/milvus.proto.query.QueryNode/Delete"
	QueryNode_DeleteBatch_FullMethodName          = "/milvus.proto.query.QueryNode/DeleteBatch"
)

// QueryNodeClient is the client API for QueryNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryNodeClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	UnsubDmChannel(ctx context.Context, in *UnsubDmChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadSegments(ctx context.Context, in *LoadSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseSegments(ctx context.Context, in *ReleaseSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
	SyncReplicaSegments(ctx context.Context, in *SyncReplicaSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*internalpb.GetStatisticsResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*internalpb.SearchResults, error)
	SearchSegments(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*internalpb.SearchResults, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*internalpb.RetrieveResults, error)
	QueryStream(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (QueryNode_QueryStreamClient, error)
	QuerySegments(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*internalpb.RetrieveResults, error)
	QueryStreamSegments(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (QueryNode_QueryStreamSegmentsClient, error)
	ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	GetDataDistribution(ctx context.Context, in *GetDataDistributionRequest, opts ...grpc.CallOption) (*GetDataDistributionResponse, error)
	SyncDistribution(ctx context.Context, in *SyncDistributionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// DeleteBatch is the API to apply same delete data into multiple segments.
	// it's basically same as `Delete` but cost less memory pressure.
	DeleteBatch(ctx context.Context, in *DeleteBatchRequest, opts ...grpc.CallOption) (*DeleteBatchResponse, error)
}

type queryNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryNodeClient(cc grpc.ClientConnInterface) QueryNodeClient {
	return &queryNodeClient{cc}
}

func (c *queryNodeClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, QueryNode_GetComponentStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, QueryNode_GetTimeTickChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, QueryNode_GetStatisticsChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_WatchDmChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) UnsubDmChannel(ctx context.Context, in *UnsubDmChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_UnsubDmChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) LoadSegments(ctx context.Context, in *LoadSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_LoadSegments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_ReleaseCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_LoadPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_ReleasePartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseSegments(ctx context.Context, in *ReleaseSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_ReleaseSegments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, QueryNode_GetSegmentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) SyncReplicaSegments(ctx context.Context, in *SyncReplicaSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_SyncReplicaSegments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*internalpb.GetStatisticsResponse, error) {
	out := new(internalpb.GetStatisticsResponse)
	err := c.cc.Invoke(ctx, QueryNode_GetStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*internalpb.SearchResults, error) {
	out := new(internalpb.SearchResults)
	err := c.cc.Invoke(ctx, QueryNode_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) SearchSegments(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*internalpb.SearchResults, error) {
	out := new(internalpb.SearchResults)
	err := c.cc.Invoke(ctx, QueryNode_SearchSegments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*internalpb.RetrieveResults, error) {
	out := new(internalpb.RetrieveResults)
	err := c.cc.Invoke(ctx, QueryNode_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) QueryStream(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (QueryNode_QueryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryNode_ServiceDesc.Streams[0], QueryNode_QueryStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryNodeQueryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryNode_QueryStreamClient interface {
	Recv() (*internalpb.RetrieveResults, error)
	grpc.ClientStream
}

type queryNodeQueryStreamClient struct {
	grpc.ClientStream
}

func (x *queryNodeQueryStreamClient) Recv() (*internalpb.RetrieveResults, error) {
	m := new(internalpb.RetrieveResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryNodeClient) QuerySegments(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*internalpb.RetrieveResults, error) {
	out := new(internalpb.RetrieveResults)
	err := c.cc.Invoke(ctx, QueryNode_QuerySegments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) QueryStreamSegments(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (QueryNode_QueryStreamSegmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryNode_ServiceDesc.Streams[1], QueryNode_QueryStreamSegments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryNodeQueryStreamSegmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryNode_QueryStreamSegmentsClient interface {
	Recv() (*internalpb.RetrieveResults, error)
	grpc.ClientStream
}

type queryNodeQueryStreamSegmentsClient struct {
	grpc.ClientStream
}

func (x *queryNodeQueryStreamSegmentsClient) Recv() (*internalpb.RetrieveResults, error) {
	m := new(internalpb.RetrieveResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryNodeClient) ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error) {
	out := new(internalpb.ShowConfigurationsResponse)
	err := c.cc.Invoke(ctx, QueryNode_ShowConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, QueryNode_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetDataDistribution(ctx context.Context, in *GetDataDistributionRequest, opts ...grpc.CallOption) (*GetDataDistributionResponse, error) {
	out := new(GetDataDistributionResponse)
	err := c.cc.Invoke(ctx, QueryNode_GetDataDistribution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) SyncDistribution(ctx context.Context, in *SyncDistributionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_SyncDistribution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, QueryNode_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) DeleteBatch(ctx context.Context, in *DeleteBatchRequest, opts ...grpc.CallOption) (*DeleteBatchResponse, error) {
	out := new(DeleteBatchResponse)
	err := c.cc.Invoke(ctx, QueryNode_DeleteBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryNodeServer is the server API for QueryNode service.
// All implementations should embed UnimplementedQueryNodeServer
// for forward compatibility
type QueryNodeServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error)
	UnsubDmChannel(context.Context, *UnsubDmChannelRequest) (*commonpb.Status, error)
	LoadSegments(context.Context, *LoadSegmentsRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	ReleaseSegments(context.Context, *ReleaseSegmentsRequest) (*commonpb.Status, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
	SyncReplicaSegments(context.Context, *SyncReplicaSegmentsRequest) (*commonpb.Status, error)
	GetStatistics(context.Context, *GetStatisticsRequest) (*internalpb.GetStatisticsResponse, error)
	Search(context.Context, *SearchRequest) (*internalpb.SearchResults, error)
	SearchSegments(context.Context, *SearchRequest) (*internalpb.SearchResults, error)
	Query(context.Context, *QueryRequest) (*internalpb.RetrieveResults, error)
	QueryStream(*QueryRequest, QueryNode_QueryStreamServer) error
	QuerySegments(context.Context, *QueryRequest) (*internalpb.RetrieveResults, error)
	QueryStreamSegments(*QueryRequest, QueryNode_QueryStreamSegmentsServer) error
	ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	GetDataDistribution(context.Context, *GetDataDistributionRequest) (*GetDataDistributionResponse, error)
	SyncDistribution(context.Context, *SyncDistributionRequest) (*commonpb.Status, error)
	Delete(context.Context, *DeleteRequest) (*commonpb.Status, error)
	// DeleteBatch is the API to apply same delete data into multiple segments.
	// it's basically same as `Delete` but cost less memory pressure.
	DeleteBatch(context.Context, *DeleteBatchRequest) (*DeleteBatchResponse, error)
}

// UnimplementedQueryNodeServer should be embedded to have forward compatible implementations.
type UnimplementedQueryNodeServer struct {
}

func (UnimplementedQueryNodeServer) GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (UnimplementedQueryNodeServer) GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (UnimplementedQueryNodeServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (UnimplementedQueryNodeServer) WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDmChannels not implemented")
}
func (UnimplementedQueryNodeServer) UnsubDmChannel(context.Context, *UnsubDmChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubDmChannel not implemented")
}
func (UnimplementedQueryNodeServer) LoadSegments(context.Context, *LoadSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSegments not implemented")
}
func (UnimplementedQueryNodeServer) ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (UnimplementedQueryNodeServer) LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (UnimplementedQueryNodeServer) ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (UnimplementedQueryNodeServer) ReleaseSegments(context.Context, *ReleaseSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSegments not implemented")
}
func (UnimplementedQueryNodeServer) GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}
func (UnimplementedQueryNodeServer) SyncReplicaSegments(context.Context, *SyncReplicaSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncReplicaSegments not implemented")
}
func (UnimplementedQueryNodeServer) GetStatistics(context.Context, *GetStatisticsRequest) (*internalpb.GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedQueryNodeServer) Search(context.Context, *SearchRequest) (*internalpb.SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedQueryNodeServer) SearchSegments(context.Context, *SearchRequest) (*internalpb.SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSegments not implemented")
}
func (UnimplementedQueryNodeServer) Query(context.Context, *QueryRequest) (*internalpb.RetrieveResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQueryNodeServer) QueryStream(*QueryRequest, QueryNode_QueryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryStream not implemented")
}
func (UnimplementedQueryNodeServer) QuerySegments(context.Context, *QueryRequest) (*internalpb.RetrieveResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySegments not implemented")
}
func (UnimplementedQueryNodeServer) QueryStreamSegments(*QueryRequest, QueryNode_QueryStreamSegmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryStreamSegments not implemented")
}
func (UnimplementedQueryNodeServer) ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfigurations not implemented")
}
func (UnimplementedQueryNodeServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedQueryNodeServer) GetDataDistribution(context.Context, *GetDataDistributionRequest) (*GetDataDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataDistribution not implemented")
}
func (UnimplementedQueryNodeServer) SyncDistribution(context.Context, *SyncDistributionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDistribution not implemented")
}
func (UnimplementedQueryNodeServer) Delete(context.Context, *DeleteRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQueryNodeServer) DeleteBatch(context.Context, *DeleteBatchRequest) (*DeleteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatch not implemented")
}

// UnsafeQueryNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryNodeServer will
// result in compilation errors.
type UnsafeQueryNodeServer interface {
	mustEmbedUnimplementedQueryNodeServer()
}

func RegisterQueryNodeServer(s grpc.ServiceRegistrar, srv QueryNodeServer) {
	s.RegisterService(&QueryNode_ServiceDesc, srv)
}

func _QueryNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetComponentStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetTimeTickChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetStatisticsChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_WatchDmChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDmChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_WatchDmChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, req.(*WatchDmChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_UnsubDmChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubDmChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).UnsubDmChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_UnsubDmChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).UnsubDmChannel(ctx, req.(*UnsubDmChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_LoadSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).LoadSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_LoadSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).LoadSegments(ctx, req.(*LoadSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_ReleaseCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_LoadPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).LoadPartitions(ctx, req.(*LoadPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_ReleasePartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_ReleaseSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, req.(*ReleaseSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetSegmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_SyncReplicaSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReplicaSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).SyncReplicaSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_SyncReplicaSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).SyncReplicaSegments(ctx, req.(*SyncReplicaSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_SearchSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).SearchSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_SearchSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).SearchSegments(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_QueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryNodeServer).QueryStream(m, &queryNodeQueryStreamServer{stream})
}

type QueryNode_QueryStreamServer interface {
	Send(*internalpb.RetrieveResults) error
	grpc.ServerStream
}

type queryNodeQueryStreamServer struct {
	grpc.ServerStream
}

func (x *queryNodeQueryStreamServer) Send(m *internalpb.RetrieveResults) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryNode_QuerySegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).QuerySegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_QuerySegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).QuerySegments(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_QueryStreamSegments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryNodeServer).QueryStreamSegments(m, &queryNodeQueryStreamSegmentsServer{stream})
}

type QueryNode_QueryStreamSegmentsServer interface {
	Send(*internalpb.RetrieveResults) error
	grpc.ServerStream
}

type queryNodeQueryStreamSegmentsServer struct {
	grpc.ServerStream
}

func (x *queryNodeQueryStreamSegmentsServer) Send(m *internalpb.RetrieveResults) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryNode_ShowConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ShowConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ShowConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_ShowConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ShowConfigurations(ctx, req.(*internalpb.ShowConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetDataDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetDataDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_GetDataDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetDataDistribution(ctx, req.(*GetDataDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_SyncDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).SyncDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_SyncDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).SyncDistribution(ctx, req.(*SyncDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_DeleteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).DeleteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryNode_DeleteBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).DeleteBatch(ctx, req.(*DeleteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryNode_ServiceDesc is the grpc.ServiceDesc for QueryNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryNode",
	HandlerType: (*QueryNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryNode_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryNode_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryNode_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "WatchDmChannels",
			Handler:    _QueryNode_WatchDmChannels_Handler,
		},
		{
			MethodName: "UnsubDmChannel",
			Handler:    _QueryNode_UnsubDmChannel_Handler,
		},
		{
			MethodName: "LoadSegments",
			Handler:    _QueryNode_LoadSegments_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryNode_ReleaseCollection_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _QueryNode_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryNode_ReleasePartitions_Handler,
		},
		{
			MethodName: "ReleaseSegments",
			Handler:    _QueryNode_ReleaseSegments_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryNode_GetSegmentInfo_Handler,
		},
		{
			MethodName: "SyncReplicaSegments",
			Handler:    _QueryNode_SyncReplicaSegments_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _QueryNode_GetStatistics_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _QueryNode_Search_Handler,
		},
		{
			MethodName: "SearchSegments",
			Handler:    _QueryNode_SearchSegments_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _QueryNode_Query_Handler,
		},
		{
			MethodName: "QuerySegments",
			Handler:    _QueryNode_QuerySegments_Handler,
		},
		{
			MethodName: "ShowConfigurations",
			Handler:    _QueryNode_ShowConfigurations_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _QueryNode_GetMetrics_Handler,
		},
		{
			MethodName: "GetDataDistribution",
			Handler:    _QueryNode_GetDataDistribution_Handler,
		},
		{
			MethodName: "SyncDistribution",
			Handler:    _QueryNode_SyncDistribution_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _QueryNode_Delete_Handler,
		},
		{
			MethodName: "DeleteBatch",
			Handler:    _QueryNode_DeleteBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryStream",
			Handler:       _QueryNode_QueryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryStreamSegments",
			Handler:       _QueryNode_QueryStreamSegments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "query_coord.proto",
}
