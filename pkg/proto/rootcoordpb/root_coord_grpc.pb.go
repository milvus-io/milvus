// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: root_coord.proto

package rootcoordpb

import (
	context "context"
	commonpb "github.com/milvus-io/milvus-proto/go-api/v2/commonpb"
	milvuspb "github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"
	internalpb "github.com/milvus-io/milvus/pkg/proto/internalpb"
	proxypb "github.com/milvus-io/milvus/pkg/proto/proxypb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RootCoord_GetComponentStates_FullMethodName            = "/milvus.proto.rootcoord.RootCoord/GetComponentStates"
	RootCoord_GetTimeTickChannel_FullMethodName            = "/milvus.proto.rootcoord.RootCoord/GetTimeTickChannel"
	RootCoord_GetStatisticsChannel_FullMethodName          = "/milvus.proto.rootcoord.RootCoord/GetStatisticsChannel"
	RootCoord_CreateCollection_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/CreateCollection"
	RootCoord_DropCollection_FullMethodName                = "/milvus.proto.rootcoord.RootCoord/DropCollection"
	RootCoord_HasCollection_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/HasCollection"
	RootCoord_DescribeCollection_FullMethodName            = "/milvus.proto.rootcoord.RootCoord/DescribeCollection"
	RootCoord_DescribeCollectionInternal_FullMethodName    = "/milvus.proto.rootcoord.RootCoord/DescribeCollectionInternal"
	RootCoord_CreateAlias_FullMethodName                   = "/milvus.proto.rootcoord.RootCoord/CreateAlias"
	RootCoord_DropAlias_FullMethodName                     = "/milvus.proto.rootcoord.RootCoord/DropAlias"
	RootCoord_AlterAlias_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/AlterAlias"
	RootCoord_DescribeAlias_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/DescribeAlias"
	RootCoord_ListAliases_FullMethodName                   = "/milvus.proto.rootcoord.RootCoord/ListAliases"
	RootCoord_ShowCollections_FullMethodName               = "/milvus.proto.rootcoord.RootCoord/ShowCollections"
	RootCoord_AlterCollection_FullMethodName               = "/milvus.proto.rootcoord.RootCoord/AlterCollection"
	RootCoord_AlterCollectionField_FullMethodName          = "/milvus.proto.rootcoord.RootCoord/AlterCollectionField"
	RootCoord_CreatePartition_FullMethodName               = "/milvus.proto.rootcoord.RootCoord/CreatePartition"
	RootCoord_DropPartition_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/DropPartition"
	RootCoord_HasPartition_FullMethodName                  = "/milvus.proto.rootcoord.RootCoord/HasPartition"
	RootCoord_ShowPartitions_FullMethodName                = "/milvus.proto.rootcoord.RootCoord/ShowPartitions"
	RootCoord_ShowPartitionsInternal_FullMethodName        = "/milvus.proto.rootcoord.RootCoord/ShowPartitionsInternal"
	RootCoord_ShowSegments_FullMethodName                  = "/milvus.proto.rootcoord.RootCoord/ShowSegments"
	RootCoord_GetPChannelInfo_FullMethodName               = "/milvus.proto.rootcoord.RootCoord/GetPChannelInfo"
	RootCoord_AllocTimestamp_FullMethodName                = "/milvus.proto.rootcoord.RootCoord/AllocTimestamp"
	RootCoord_AllocID_FullMethodName                       = "/milvus.proto.rootcoord.RootCoord/AllocID"
	RootCoord_UpdateChannelTimeTick_FullMethodName         = "/milvus.proto.rootcoord.RootCoord/UpdateChannelTimeTick"
	RootCoord_InvalidateCollectionMetaCache_FullMethodName = "/milvus.proto.rootcoord.RootCoord/InvalidateCollectionMetaCache"
	RootCoord_ShowConfigurations_FullMethodName            = "/milvus.proto.rootcoord.RootCoord/ShowConfigurations"
	RootCoord_GetMetrics_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/GetMetrics"
	RootCoord_CreateCredential_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/CreateCredential"
	RootCoord_UpdateCredential_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/UpdateCredential"
	RootCoord_DeleteCredential_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/DeleteCredential"
	RootCoord_ListCredUsers_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/ListCredUsers"
	RootCoord_GetCredential_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/GetCredential"
	RootCoord_CreateRole_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/CreateRole"
	RootCoord_DropRole_FullMethodName                      = "/milvus.proto.rootcoord.RootCoord/DropRole"
	RootCoord_OperateUserRole_FullMethodName               = "/milvus.proto.rootcoord.RootCoord/OperateUserRole"
	RootCoord_SelectRole_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/SelectRole"
	RootCoord_SelectUser_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/SelectUser"
	RootCoord_OperatePrivilege_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/OperatePrivilege"
	RootCoord_SelectGrant_FullMethodName                   = "/milvus.proto.rootcoord.RootCoord/SelectGrant"
	RootCoord_ListPolicy_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/ListPolicy"
	RootCoord_BackupRBAC_FullMethodName                    = "/milvus.proto.rootcoord.RootCoord/BackupRBAC"
	RootCoord_RestoreRBAC_FullMethodName                   = "/milvus.proto.rootcoord.RootCoord/RestoreRBAC"
	RootCoord_CreatePrivilegeGroup_FullMethodName          = "/milvus.proto.rootcoord.RootCoord/CreatePrivilegeGroup"
	RootCoord_DropPrivilegeGroup_FullMethodName            = "/milvus.proto.rootcoord.RootCoord/DropPrivilegeGroup"
	RootCoord_ListPrivilegeGroups_FullMethodName           = "/milvus.proto.rootcoord.RootCoord/ListPrivilegeGroups"
	RootCoord_OperatePrivilegeGroup_FullMethodName         = "/milvus.proto.rootcoord.RootCoord/OperatePrivilegeGroup"
	RootCoord_CheckHealth_FullMethodName                   = "/milvus.proto.rootcoord.RootCoord/CheckHealth"
	RootCoord_RenameCollection_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/RenameCollection"
	RootCoord_CreateDatabase_FullMethodName                = "/milvus.proto.rootcoord.RootCoord/CreateDatabase"
	RootCoord_DropDatabase_FullMethodName                  = "/milvus.proto.rootcoord.RootCoord/DropDatabase"
	RootCoord_ListDatabases_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/ListDatabases"
	RootCoord_DescribeDatabase_FullMethodName              = "/milvus.proto.rootcoord.RootCoord/DescribeDatabase"
	RootCoord_AlterDatabase_FullMethodName                 = "/milvus.proto.rootcoord.RootCoord/AlterDatabase"
)

// RootCoordClient is the client API for RootCoord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootCoordClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	// *
	// @brief This method is used to create collection
	//
	// @param CreateCollectionRequest, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(ctx context.Context, in *milvuspb.CreateCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// *
	// @brief This method is used to delete collection.
	//
	// @param DropCollectionRequest, collection name is going to be deleted.
	//
	// @return Status
	DropCollection(ctx context.Context, in *milvuspb.DropCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// *
	// @brief This method is used to test collection existence.
	//
	// @param HasCollectionRequest, collection name is going to be tested.
	//
	// @return BoolResponse
	HasCollection(ctx context.Context, in *milvuspb.HasCollectionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error)
	// *
	// @brief This method is used to get collection schema.
	//
	// @param DescribeCollectionRequest, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(ctx context.Context, in *milvuspb.DescribeCollectionRequest, opts ...grpc.CallOption) (*milvuspb.DescribeCollectionResponse, error)
	DescribeCollectionInternal(ctx context.Context, in *milvuspb.DescribeCollectionRequest, opts ...grpc.CallOption) (*milvuspb.DescribeCollectionResponse, error)
	CreateAlias(ctx context.Context, in *milvuspb.CreateAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropAlias(ctx context.Context, in *milvuspb.DropAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterAlias(ctx context.Context, in *milvuspb.AlterAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeAlias(ctx context.Context, in *milvuspb.DescribeAliasRequest, opts ...grpc.CallOption) (*milvuspb.DescribeAliasResponse, error)
	ListAliases(ctx context.Context, in *milvuspb.ListAliasesRequest, opts ...grpc.CallOption) (*milvuspb.ListAliasesResponse, error)
	// *
	// @brief This method is used to list all collections.
	//
	// @return StringListResponse, collection name list
	ShowCollections(ctx context.Context, in *milvuspb.ShowCollectionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowCollectionsResponse, error)
	AlterCollection(ctx context.Context, in *milvuspb.AlterCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterCollectionField(ctx context.Context, in *milvuspb.AlterCollectionFieldRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// *
	// @brief This method is used to create partition
	//
	// @return Status
	CreatePartition(ctx context.Context, in *milvuspb.CreatePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// *
	// @brief This method is used to drop partition
	//
	// @return Status
	DropPartition(ctx context.Context, in *milvuspb.DropPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// *
	// @brief This method is used to test partition existence.
	//
	// @return BoolResponse
	HasPartition(ctx context.Context, in *milvuspb.HasPartitionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error)
	// *
	// @brief This method is used to show partition information
	//
	// @param ShowPartitionRequest, target collection name.
	//
	// @return StringListResponse
	ShowPartitions(ctx context.Context, in *milvuspb.ShowPartitionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowPartitionsResponse, error)
	ShowPartitionsInternal(ctx context.Context, in *milvuspb.ShowPartitionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowPartitionsResponse, error)
	ShowSegments(ctx context.Context, in *milvuspb.ShowSegmentsRequest, opts ...grpc.CallOption) (*milvuspb.ShowSegmentsResponse, error)
	GetPChannelInfo(ctx context.Context, in *GetPChannelInfoRequest, opts ...grpc.CallOption) (*GetPChannelInfoResponse, error)
	AllocTimestamp(ctx context.Context, in *AllocTimestampRequest, opts ...grpc.CallOption) (*AllocTimestampResponse, error)
	AllocID(ctx context.Context, in *AllocIDRequest, opts ...grpc.CallOption) (*AllocIDResponse, error)
	UpdateChannelTimeTick(ctx context.Context, in *internalpb.ChannelTimeTickMsg, opts ...grpc.CallOption) (*commonpb.Status, error)
	InvalidateCollectionMetaCache(ctx context.Context, in *proxypb.InvalidateCollMetaCacheRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error)
	DeleteCredential(ctx context.Context, in *milvuspb.DeleteCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListCredUsers(ctx context.Context, in *milvuspb.ListCredUsersRequest, opts ...grpc.CallOption) (*milvuspb.ListCredUsersResponse, error)
	// userd by proxy, not exposed to sdk
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(ctx context.Context, in *milvuspb.CreateRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropRole(ctx context.Context, in *milvuspb.DropRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	OperateUserRole(ctx context.Context, in *milvuspb.OperateUserRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SelectRole(ctx context.Context, in *milvuspb.SelectRoleRequest, opts ...grpc.CallOption) (*milvuspb.SelectRoleResponse, error)
	SelectUser(ctx context.Context, in *milvuspb.SelectUserRequest, opts ...grpc.CallOption) (*milvuspb.SelectUserResponse, error)
	OperatePrivilege(ctx context.Context, in *milvuspb.OperatePrivilegeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SelectGrant(ctx context.Context, in *milvuspb.SelectGrantRequest, opts ...grpc.CallOption) (*milvuspb.SelectGrantResponse, error)
	ListPolicy(ctx context.Context, in *internalpb.ListPolicyRequest, opts ...grpc.CallOption) (*internalpb.ListPolicyResponse, error)
	BackupRBAC(ctx context.Context, in *milvuspb.BackupRBACMetaRequest, opts ...grpc.CallOption) (*milvuspb.BackupRBACMetaResponse, error)
	RestoreRBAC(ctx context.Context, in *milvuspb.RestoreRBACMetaRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreatePrivilegeGroup(ctx context.Context, in *milvuspb.CreatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropPrivilegeGroup(ctx context.Context, in *milvuspb.DropPrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListPrivilegeGroups(ctx context.Context, in *milvuspb.ListPrivilegeGroupsRequest, opts ...grpc.CallOption) (*milvuspb.ListPrivilegeGroupsResponse, error)
	OperatePrivilegeGroup(ctx context.Context, in *milvuspb.OperatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CheckHealth(ctx context.Context, in *milvuspb.CheckHealthRequest, opts ...grpc.CallOption) (*milvuspb.CheckHealthResponse, error)
	RenameCollection(ctx context.Context, in *milvuspb.RenameCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreateDatabase(ctx context.Context, in *milvuspb.CreateDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropDatabase(ctx context.Context, in *milvuspb.DropDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListDatabases(ctx context.Context, in *milvuspb.ListDatabasesRequest, opts ...grpc.CallOption) (*milvuspb.ListDatabasesResponse, error)
	DescribeDatabase(ctx context.Context, in *DescribeDatabaseRequest, opts ...grpc.CallOption) (*DescribeDatabaseResponse, error)
	AlterDatabase(ctx context.Context, in *AlterDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
}

type rootCoordClient struct {
	cc grpc.ClientConnInterface
}

func NewRootCoordClient(cc grpc.ClientConnInterface) RootCoordClient {
	return &rootCoordClient{cc}
}

func (c *rootCoordClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, RootCoord_GetComponentStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, RootCoord_GetTimeTickChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, RootCoord_GetStatisticsChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateCollection(ctx context.Context, in *milvuspb.CreateCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropCollection(ctx context.Context, in *milvuspb.DropCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DropCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) HasCollection(ctx context.Context, in *milvuspb.HasCollectionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error) {
	out := new(milvuspb.BoolResponse)
	err := c.cc.Invoke(ctx, RootCoord_HasCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeCollection(ctx context.Context, in *milvuspb.DescribeCollectionRequest, opts ...grpc.CallOption) (*milvuspb.DescribeCollectionResponse, error) {
	out := new(milvuspb.DescribeCollectionResponse)
	err := c.cc.Invoke(ctx, RootCoord_DescribeCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeCollectionInternal(ctx context.Context, in *milvuspb.DescribeCollectionRequest, opts ...grpc.CallOption) (*milvuspb.DescribeCollectionResponse, error) {
	out := new(milvuspb.DescribeCollectionResponse)
	err := c.cc.Invoke(ctx, RootCoord_DescribeCollectionInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateAlias(ctx context.Context, in *milvuspb.CreateAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreateAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropAlias(ctx context.Context, in *milvuspb.DropAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DropAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AlterAlias(ctx context.Context, in *milvuspb.AlterAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_AlterAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeAlias(ctx context.Context, in *milvuspb.DescribeAliasRequest, opts ...grpc.CallOption) (*milvuspb.DescribeAliasResponse, error) {
	out := new(milvuspb.DescribeAliasResponse)
	err := c.cc.Invoke(ctx, RootCoord_DescribeAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListAliases(ctx context.Context, in *milvuspb.ListAliasesRequest, opts ...grpc.CallOption) (*milvuspb.ListAliasesResponse, error) {
	out := new(milvuspb.ListAliasesResponse)
	err := c.cc.Invoke(ctx, RootCoord_ListAliases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowCollections(ctx context.Context, in *milvuspb.ShowCollectionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowCollectionsResponse, error) {
	out := new(milvuspb.ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, RootCoord_ShowCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AlterCollection(ctx context.Context, in *milvuspb.AlterCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_AlterCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AlterCollectionField(ctx context.Context, in *milvuspb.AlterCollectionFieldRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_AlterCollectionField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreatePartition(ctx context.Context, in *milvuspb.CreatePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreatePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropPartition(ctx context.Context, in *milvuspb.DropPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DropPartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) HasPartition(ctx context.Context, in *milvuspb.HasPartitionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error) {
	out := new(milvuspb.BoolResponse)
	err := c.cc.Invoke(ctx, RootCoord_HasPartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowPartitions(ctx context.Context, in *milvuspb.ShowPartitionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowPartitionsResponse, error) {
	out := new(milvuspb.ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, RootCoord_ShowPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowPartitionsInternal(ctx context.Context, in *milvuspb.ShowPartitionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowPartitionsResponse, error) {
	out := new(milvuspb.ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, RootCoord_ShowPartitionsInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowSegments(ctx context.Context, in *milvuspb.ShowSegmentsRequest, opts ...grpc.CallOption) (*milvuspb.ShowSegmentsResponse, error) {
	out := new(milvuspb.ShowSegmentsResponse)
	err := c.cc.Invoke(ctx, RootCoord_ShowSegments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetPChannelInfo(ctx context.Context, in *GetPChannelInfoRequest, opts ...grpc.CallOption) (*GetPChannelInfoResponse, error) {
	out := new(GetPChannelInfoResponse)
	err := c.cc.Invoke(ctx, RootCoord_GetPChannelInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AllocTimestamp(ctx context.Context, in *AllocTimestampRequest, opts ...grpc.CallOption) (*AllocTimestampResponse, error) {
	out := new(AllocTimestampResponse)
	err := c.cc.Invoke(ctx, RootCoord_AllocTimestamp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AllocID(ctx context.Context, in *AllocIDRequest, opts ...grpc.CallOption) (*AllocIDResponse, error) {
	out := new(AllocIDResponse)
	err := c.cc.Invoke(ctx, RootCoord_AllocID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) UpdateChannelTimeTick(ctx context.Context, in *internalpb.ChannelTimeTickMsg, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_UpdateChannelTimeTick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) InvalidateCollectionMetaCache(ctx context.Context, in *proxypb.InvalidateCollMetaCacheRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_InvalidateCollectionMetaCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error) {
	out := new(internalpb.ShowConfigurationsResponse)
	err := c.cc.Invoke(ctx, RootCoord_ShowConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, RootCoord_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) UpdateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DeleteCredential(ctx context.Context, in *milvuspb.DeleteCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListCredUsers(ctx context.Context, in *milvuspb.ListCredUsersRequest, opts ...grpc.CallOption) (*milvuspb.ListCredUsersResponse, error) {
	out := new(milvuspb.ListCredUsersResponse)
	err := c.cc.Invoke(ctx, RootCoord_ListCredUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, RootCoord_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateRole(ctx context.Context, in *milvuspb.CreateRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropRole(ctx context.Context, in *milvuspb.DropRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DropRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) OperateUserRole(ctx context.Context, in *milvuspb.OperateUserRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_OperateUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectRole(ctx context.Context, in *milvuspb.SelectRoleRequest, opts ...grpc.CallOption) (*milvuspb.SelectRoleResponse, error) {
	out := new(milvuspb.SelectRoleResponse)
	err := c.cc.Invoke(ctx, RootCoord_SelectRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectUser(ctx context.Context, in *milvuspb.SelectUserRequest, opts ...grpc.CallOption) (*milvuspb.SelectUserResponse, error) {
	out := new(milvuspb.SelectUserResponse)
	err := c.cc.Invoke(ctx, RootCoord_SelectUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) OperatePrivilege(ctx context.Context, in *milvuspb.OperatePrivilegeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_OperatePrivilege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectGrant(ctx context.Context, in *milvuspb.SelectGrantRequest, opts ...grpc.CallOption) (*milvuspb.SelectGrantResponse, error) {
	out := new(milvuspb.SelectGrantResponse)
	err := c.cc.Invoke(ctx, RootCoord_SelectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListPolicy(ctx context.Context, in *internalpb.ListPolicyRequest, opts ...grpc.CallOption) (*internalpb.ListPolicyResponse, error) {
	out := new(internalpb.ListPolicyResponse)
	err := c.cc.Invoke(ctx, RootCoord_ListPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) BackupRBAC(ctx context.Context, in *milvuspb.BackupRBACMetaRequest, opts ...grpc.CallOption) (*milvuspb.BackupRBACMetaResponse, error) {
	out := new(milvuspb.BackupRBACMetaResponse)
	err := c.cc.Invoke(ctx, RootCoord_BackupRBAC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) RestoreRBAC(ctx context.Context, in *milvuspb.RestoreRBACMetaRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_RestoreRBAC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreatePrivilegeGroup(ctx context.Context, in *milvuspb.CreatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreatePrivilegeGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropPrivilegeGroup(ctx context.Context, in *milvuspb.DropPrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DropPrivilegeGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListPrivilegeGroups(ctx context.Context, in *milvuspb.ListPrivilegeGroupsRequest, opts ...grpc.CallOption) (*milvuspb.ListPrivilegeGroupsResponse, error) {
	out := new(milvuspb.ListPrivilegeGroupsResponse)
	err := c.cc.Invoke(ctx, RootCoord_ListPrivilegeGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) OperatePrivilegeGroup(ctx context.Context, in *milvuspb.OperatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_OperatePrivilegeGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CheckHealth(ctx context.Context, in *milvuspb.CheckHealthRequest, opts ...grpc.CallOption) (*milvuspb.CheckHealthResponse, error) {
	out := new(milvuspb.CheckHealthResponse)
	err := c.cc.Invoke(ctx, RootCoord_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) RenameCollection(ctx context.Context, in *milvuspb.RenameCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_RenameCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateDatabase(ctx context.Context, in *milvuspb.CreateDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_CreateDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropDatabase(ctx context.Context, in *milvuspb.DropDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_DropDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListDatabases(ctx context.Context, in *milvuspb.ListDatabasesRequest, opts ...grpc.CallOption) (*milvuspb.ListDatabasesResponse, error) {
	out := new(milvuspb.ListDatabasesResponse)
	err := c.cc.Invoke(ctx, RootCoord_ListDatabases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeDatabase(ctx context.Context, in *DescribeDatabaseRequest, opts ...grpc.CallOption) (*DescribeDatabaseResponse, error) {
	out := new(DescribeDatabaseResponse)
	err := c.cc.Invoke(ctx, RootCoord_DescribeDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AlterDatabase(ctx context.Context, in *AlterDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, RootCoord_AlterDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootCoordServer is the server API for RootCoord service.
// All implementations should embed UnimplementedRootCoordServer
// for forward compatibility
type RootCoordServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	// *
	// @brief This method is used to create collection
	//
	// @param CreateCollectionRequest, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(context.Context, *milvuspb.CreateCollectionRequest) (*commonpb.Status, error)
	// *
	// @brief This method is used to delete collection.
	//
	// @param DropCollectionRequest, collection name is going to be deleted.
	//
	// @return Status
	DropCollection(context.Context, *milvuspb.DropCollectionRequest) (*commonpb.Status, error)
	// *
	// @brief This method is used to test collection existence.
	//
	// @param HasCollectionRequest, collection name is going to be tested.
	//
	// @return BoolResponse
	HasCollection(context.Context, *milvuspb.HasCollectionRequest) (*milvuspb.BoolResponse, error)
	// *
	// @brief This method is used to get collection schema.
	//
	// @param DescribeCollectionRequest, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(context.Context, *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error)
	DescribeCollectionInternal(context.Context, *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error)
	CreateAlias(context.Context, *milvuspb.CreateAliasRequest) (*commonpb.Status, error)
	DropAlias(context.Context, *milvuspb.DropAliasRequest) (*commonpb.Status, error)
	AlterAlias(context.Context, *milvuspb.AlterAliasRequest) (*commonpb.Status, error)
	DescribeAlias(context.Context, *milvuspb.DescribeAliasRequest) (*milvuspb.DescribeAliasResponse, error)
	ListAliases(context.Context, *milvuspb.ListAliasesRequest) (*milvuspb.ListAliasesResponse, error)
	// *
	// @brief This method is used to list all collections.
	//
	// @return StringListResponse, collection name list
	ShowCollections(context.Context, *milvuspb.ShowCollectionsRequest) (*milvuspb.ShowCollectionsResponse, error)
	AlterCollection(context.Context, *milvuspb.AlterCollectionRequest) (*commonpb.Status, error)
	AlterCollectionField(context.Context, *milvuspb.AlterCollectionFieldRequest) (*commonpb.Status, error)
	// *
	// @brief This method is used to create partition
	//
	// @return Status
	CreatePartition(context.Context, *milvuspb.CreatePartitionRequest) (*commonpb.Status, error)
	// *
	// @brief This method is used to drop partition
	//
	// @return Status
	DropPartition(context.Context, *milvuspb.DropPartitionRequest) (*commonpb.Status, error)
	// *
	// @brief This method is used to test partition existence.
	//
	// @return BoolResponse
	HasPartition(context.Context, *milvuspb.HasPartitionRequest) (*milvuspb.BoolResponse, error)
	// *
	// @brief This method is used to show partition information
	//
	// @param ShowPartitionRequest, target collection name.
	//
	// @return StringListResponse
	ShowPartitions(context.Context, *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error)
	ShowPartitionsInternal(context.Context, *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error)
	ShowSegments(context.Context, *milvuspb.ShowSegmentsRequest) (*milvuspb.ShowSegmentsResponse, error)
	GetPChannelInfo(context.Context, *GetPChannelInfoRequest) (*GetPChannelInfoResponse, error)
	AllocTimestamp(context.Context, *AllocTimestampRequest) (*AllocTimestampResponse, error)
	AllocID(context.Context, *AllocIDRequest) (*AllocIDResponse, error)
	UpdateChannelTimeTick(context.Context, *internalpb.ChannelTimeTickMsg) (*commonpb.Status, error)
	InvalidateCollectionMetaCache(context.Context, *proxypb.InvalidateCollMetaCacheRequest) (*commonpb.Status, error)
	ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(context.Context, *internalpb.CredentialInfo) (*commonpb.Status, error)
	UpdateCredential(context.Context, *internalpb.CredentialInfo) (*commonpb.Status, error)
	DeleteCredential(context.Context, *milvuspb.DeleteCredentialRequest) (*commonpb.Status, error)
	ListCredUsers(context.Context, *milvuspb.ListCredUsersRequest) (*milvuspb.ListCredUsersResponse, error)
	// userd by proxy, not exposed to sdk
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(context.Context, *milvuspb.CreateRoleRequest) (*commonpb.Status, error)
	DropRole(context.Context, *milvuspb.DropRoleRequest) (*commonpb.Status, error)
	OperateUserRole(context.Context, *milvuspb.OperateUserRoleRequest) (*commonpb.Status, error)
	SelectRole(context.Context, *milvuspb.SelectRoleRequest) (*milvuspb.SelectRoleResponse, error)
	SelectUser(context.Context, *milvuspb.SelectUserRequest) (*milvuspb.SelectUserResponse, error)
	OperatePrivilege(context.Context, *milvuspb.OperatePrivilegeRequest) (*commonpb.Status, error)
	SelectGrant(context.Context, *milvuspb.SelectGrantRequest) (*milvuspb.SelectGrantResponse, error)
	ListPolicy(context.Context, *internalpb.ListPolicyRequest) (*internalpb.ListPolicyResponse, error)
	BackupRBAC(context.Context, *milvuspb.BackupRBACMetaRequest) (*milvuspb.BackupRBACMetaResponse, error)
	RestoreRBAC(context.Context, *milvuspb.RestoreRBACMetaRequest) (*commonpb.Status, error)
	CreatePrivilegeGroup(context.Context, *milvuspb.CreatePrivilegeGroupRequest) (*commonpb.Status, error)
	DropPrivilegeGroup(context.Context, *milvuspb.DropPrivilegeGroupRequest) (*commonpb.Status, error)
	ListPrivilegeGroups(context.Context, *milvuspb.ListPrivilegeGroupsRequest) (*milvuspb.ListPrivilegeGroupsResponse, error)
	OperatePrivilegeGroup(context.Context, *milvuspb.OperatePrivilegeGroupRequest) (*commonpb.Status, error)
	CheckHealth(context.Context, *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error)
	RenameCollection(context.Context, *milvuspb.RenameCollectionRequest) (*commonpb.Status, error)
	CreateDatabase(context.Context, *milvuspb.CreateDatabaseRequest) (*commonpb.Status, error)
	DropDatabase(context.Context, *milvuspb.DropDatabaseRequest) (*commonpb.Status, error)
	ListDatabases(context.Context, *milvuspb.ListDatabasesRequest) (*milvuspb.ListDatabasesResponse, error)
	DescribeDatabase(context.Context, *DescribeDatabaseRequest) (*DescribeDatabaseResponse, error)
	AlterDatabase(context.Context, *AlterDatabaseRequest) (*commonpb.Status, error)
}

// UnimplementedRootCoordServer should be embedded to have forward compatible implementations.
type UnimplementedRootCoordServer struct {
}

func (UnimplementedRootCoordServer) GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (UnimplementedRootCoordServer) GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (UnimplementedRootCoordServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (UnimplementedRootCoordServer) CreateCollection(context.Context, *milvuspb.CreateCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedRootCoordServer) DropCollection(context.Context, *milvuspb.DropCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedRootCoordServer) HasCollection(context.Context, *milvuspb.HasCollectionRequest) (*milvuspb.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (UnimplementedRootCoordServer) DescribeCollection(context.Context, *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (UnimplementedRootCoordServer) DescribeCollectionInternal(context.Context, *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollectionInternal not implemented")
}
func (UnimplementedRootCoordServer) CreateAlias(context.Context, *milvuspb.CreateAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlias not implemented")
}
func (UnimplementedRootCoordServer) DropAlias(context.Context, *milvuspb.DropAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAlias not implemented")
}
func (UnimplementedRootCoordServer) AlterAlias(context.Context, *milvuspb.AlterAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAlias not implemented")
}
func (UnimplementedRootCoordServer) DescribeAlias(context.Context, *milvuspb.DescribeAliasRequest) (*milvuspb.DescribeAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAlias not implemented")
}
func (UnimplementedRootCoordServer) ListAliases(context.Context, *milvuspb.ListAliasesRequest) (*milvuspb.ListAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAliases not implemented")
}
func (UnimplementedRootCoordServer) ShowCollections(context.Context, *milvuspb.ShowCollectionsRequest) (*milvuspb.ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (UnimplementedRootCoordServer) AlterCollection(context.Context, *milvuspb.AlterCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterCollection not implemented")
}
func (UnimplementedRootCoordServer) AlterCollectionField(context.Context, *milvuspb.AlterCollectionFieldRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterCollectionField not implemented")
}
func (UnimplementedRootCoordServer) CreatePartition(context.Context, *milvuspb.CreatePartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (UnimplementedRootCoordServer) DropPartition(context.Context, *milvuspb.DropPartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (UnimplementedRootCoordServer) HasPartition(context.Context, *milvuspb.HasPartitionRequest) (*milvuspb.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (UnimplementedRootCoordServer) ShowPartitions(context.Context, *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (UnimplementedRootCoordServer) ShowPartitionsInternal(context.Context, *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitionsInternal not implemented")
}
func (UnimplementedRootCoordServer) ShowSegments(context.Context, *milvuspb.ShowSegmentsRequest) (*milvuspb.ShowSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSegments not implemented")
}
func (UnimplementedRootCoordServer) GetPChannelInfo(context.Context, *GetPChannelInfoRequest) (*GetPChannelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPChannelInfo not implemented")
}
func (UnimplementedRootCoordServer) AllocTimestamp(context.Context, *AllocTimestampRequest) (*AllocTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocTimestamp not implemented")
}
func (UnimplementedRootCoordServer) AllocID(context.Context, *AllocIDRequest) (*AllocIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocID not implemented")
}
func (UnimplementedRootCoordServer) UpdateChannelTimeTick(context.Context, *internalpb.ChannelTimeTickMsg) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelTimeTick not implemented")
}
func (UnimplementedRootCoordServer) InvalidateCollectionMetaCache(context.Context, *proxypb.InvalidateCollMetaCacheRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCollectionMetaCache not implemented")
}
func (UnimplementedRootCoordServer) ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfigurations not implemented")
}
func (UnimplementedRootCoordServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedRootCoordServer) CreateCredential(context.Context, *internalpb.CredentialInfo) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedRootCoordServer) UpdateCredential(context.Context, *internalpb.CredentialInfo) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedRootCoordServer) DeleteCredential(context.Context, *milvuspb.DeleteCredentialRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedRootCoordServer) ListCredUsers(context.Context, *milvuspb.ListCredUsersRequest) (*milvuspb.ListCredUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredUsers not implemented")
}
func (UnimplementedRootCoordServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedRootCoordServer) CreateRole(context.Context, *milvuspb.CreateRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRootCoordServer) DropRole(context.Context, *milvuspb.DropRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropRole not implemented")
}
func (UnimplementedRootCoordServer) OperateUserRole(context.Context, *milvuspb.OperateUserRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateUserRole not implemented")
}
func (UnimplementedRootCoordServer) SelectRole(context.Context, *milvuspb.SelectRoleRequest) (*milvuspb.SelectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRole not implemented")
}
func (UnimplementedRootCoordServer) SelectUser(context.Context, *milvuspb.SelectUserRequest) (*milvuspb.SelectUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUser not implemented")
}
func (UnimplementedRootCoordServer) OperatePrivilege(context.Context, *milvuspb.OperatePrivilegeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatePrivilege not implemented")
}
func (UnimplementedRootCoordServer) SelectGrant(context.Context, *milvuspb.SelectGrantRequest) (*milvuspb.SelectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectGrant not implemented")
}
func (UnimplementedRootCoordServer) ListPolicy(context.Context, *internalpb.ListPolicyRequest) (*internalpb.ListPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (UnimplementedRootCoordServer) BackupRBAC(context.Context, *milvuspb.BackupRBACMetaRequest) (*milvuspb.BackupRBACMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRBAC not implemented")
}
func (UnimplementedRootCoordServer) RestoreRBAC(context.Context, *milvuspb.RestoreRBACMetaRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRBAC not implemented")
}
func (UnimplementedRootCoordServer) CreatePrivilegeGroup(context.Context, *milvuspb.CreatePrivilegeGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivilegeGroup not implemented")
}
func (UnimplementedRootCoordServer) DropPrivilegeGroup(context.Context, *milvuspb.DropPrivilegeGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPrivilegeGroup not implemented")
}
func (UnimplementedRootCoordServer) ListPrivilegeGroups(context.Context, *milvuspb.ListPrivilegeGroupsRequest) (*milvuspb.ListPrivilegeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivilegeGroups not implemented")
}
func (UnimplementedRootCoordServer) OperatePrivilegeGroup(context.Context, *milvuspb.OperatePrivilegeGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatePrivilegeGroup not implemented")
}
func (UnimplementedRootCoordServer) CheckHealth(context.Context, *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedRootCoordServer) RenameCollection(context.Context, *milvuspb.RenameCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameCollection not implemented")
}
func (UnimplementedRootCoordServer) CreateDatabase(context.Context, *milvuspb.CreateDatabaseRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedRootCoordServer) DropDatabase(context.Context, *milvuspb.DropDatabaseRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedRootCoordServer) ListDatabases(context.Context, *milvuspb.ListDatabasesRequest) (*milvuspb.ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedRootCoordServer) DescribeDatabase(context.Context, *DescribeDatabaseRequest) (*DescribeDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDatabase not implemented")
}
func (UnimplementedRootCoordServer) AlterDatabase(context.Context, *AlterDatabaseRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterDatabase not implemented")
}

// UnsafeRootCoordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootCoordServer will
// result in compilation errors.
type UnsafeRootCoordServer interface {
	mustEmbedUnimplementedRootCoordServer()
}

func RegisterRootCoordServer(s grpc.ServiceRegistrar, srv RootCoordServer) {
	s.RegisterService(&RootCoord_ServiceDesc, srv)
}

func _RootCoord_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_GetComponentStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_GetTimeTickChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_GetStatisticsChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateCollection(ctx, req.(*milvuspb.CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropCollection(ctx, req.(*milvuspb.DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.HasCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_HasCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).HasCollection(ctx, req.(*milvuspb.HasCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DescribeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DescribeCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeCollection(ctx, req.(*milvuspb.DescribeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeCollectionInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DescribeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeCollectionInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DescribeCollectionInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeCollectionInternal(ctx, req.(*milvuspb.DescribeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreateAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateAlias(ctx, req.(*milvuspb.CreateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DropAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropAlias(ctx, req.(*milvuspb.DropAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AlterAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.AlterAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AlterAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_AlterAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AlterAlias(ctx, req.(*milvuspb.AlterAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DescribeAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DescribeAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeAlias(ctx, req.(*milvuspb.DescribeAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ListAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListAliases(ctx, req.(*milvuspb.ListAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ShowCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowCollections(ctx, req.(*milvuspb.ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AlterCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.AlterCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AlterCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_AlterCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AlterCollection(ctx, req.(*milvuspb.AlterCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AlterCollectionField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.AlterCollectionFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AlterCollectionField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_AlterCollectionField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AlterCollectionField(ctx, req.(*milvuspb.AlterCollectionFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreatePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreatePartition(ctx, req.(*milvuspb.CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DropPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropPartition(ctx, req.(*milvuspb.DropPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.HasPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_HasPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).HasPartition(ctx, req.(*milvuspb.HasPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ShowPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowPartitions(ctx, req.(*milvuspb.ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowPartitionsInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowPartitionsInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ShowPartitionsInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowPartitionsInternal(ctx, req.(*milvuspb.ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ShowSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowSegments(ctx, req.(*milvuspb.ShowSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetPChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetPChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_GetPChannelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetPChannelInfo(ctx, req.(*GetPChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AllocTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AllocTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_AllocTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AllocTimestamp(ctx, req.(*AllocTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AllocID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AllocID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_AllocID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AllocID(ctx, req.(*AllocIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_UpdateChannelTimeTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ChannelTimeTickMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).UpdateChannelTimeTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_UpdateChannelTimeTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).UpdateChannelTimeTick(ctx, req.(*internalpb.ChannelTimeTickMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_InvalidateCollectionMetaCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proxypb.InvalidateCollMetaCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).InvalidateCollectionMetaCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_InvalidateCollectionMetaCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).InvalidateCollectionMetaCache(ctx, req.(*proxypb.InvalidateCollMetaCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ShowConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ShowConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowConfigurations(ctx, req.(*internalpb.ShowConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.CredentialInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateCredential(ctx, req.(*internalpb.CredentialInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.CredentialInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).UpdateCredential(ctx, req.(*internalpb.CredentialInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DeleteCredential(ctx, req.(*milvuspb.DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListCredUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListCredUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListCredUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ListCredUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListCredUsers(ctx, req.(*milvuspb.ListCredUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateRole(ctx, req.(*milvuspb.CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DropRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropRole(ctx, req.(*milvuspb.DropRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_OperateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.OperateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).OperateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_OperateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).OperateUserRole(ctx, req.(*milvuspb.OperateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_SelectRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectRole(ctx, req.(*milvuspb.SelectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_SelectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectUser(ctx, req.(*milvuspb.SelectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_OperatePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.OperatePrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).OperatePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_OperatePrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).OperatePrivilege(ctx, req.(*milvuspb.OperatePrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_SelectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectGrant(ctx, req.(*milvuspb.SelectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ListPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ListPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListPolicy(ctx, req.(*internalpb.ListPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_BackupRBAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.BackupRBACMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).BackupRBAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_BackupRBAC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).BackupRBAC(ctx, req.(*milvuspb.BackupRBACMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_RestoreRBAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.RestoreRBACMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).RestoreRBAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_RestoreRBAC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).RestoreRBAC(ctx, req.(*milvuspb.RestoreRBACMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreatePrivilegeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreatePrivilegeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreatePrivilegeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreatePrivilegeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreatePrivilegeGroup(ctx, req.(*milvuspb.CreatePrivilegeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropPrivilegeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropPrivilegeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropPrivilegeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DropPrivilegeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropPrivilegeGroup(ctx, req.(*milvuspb.DropPrivilegeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListPrivilegeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListPrivilegeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListPrivilegeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ListPrivilegeGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListPrivilegeGroups(ctx, req.(*milvuspb.ListPrivilegeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_OperatePrivilegeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.OperatePrivilegeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).OperatePrivilegeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_OperatePrivilegeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).OperatePrivilegeGroup(ctx, req.(*milvuspb.OperatePrivilegeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CheckHealth(ctx, req.(*milvuspb.CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_RenameCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.RenameCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).RenameCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_RenameCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).RenameCollection(ctx, req.(*milvuspb.RenameCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_CreateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateDatabase(ctx, req.(*milvuspb.CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DropDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropDatabase(ctx, req.(*milvuspb.DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListDatabases(ctx, req.(*milvuspb.ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_DescribeDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeDatabase(ctx, req.(*DescribeDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AlterDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AlterDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootCoord_AlterDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AlterDatabase(ctx, req.(*AlterDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RootCoord_ServiceDesc is the grpc.ServiceDesc for RootCoord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootCoord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.rootcoord.RootCoord",
	HandlerType: (*RootCoordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _RootCoord_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _RootCoord_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _RootCoord_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _RootCoord_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _RootCoord_DropCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _RootCoord_HasCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _RootCoord_DescribeCollection_Handler,
		},
		{
			MethodName: "DescribeCollectionInternal",
			Handler:    _RootCoord_DescribeCollectionInternal_Handler,
		},
		{
			MethodName: "CreateAlias",
			Handler:    _RootCoord_CreateAlias_Handler,
		},
		{
			MethodName: "DropAlias",
			Handler:    _RootCoord_DropAlias_Handler,
		},
		{
			MethodName: "AlterAlias",
			Handler:    _RootCoord_AlterAlias_Handler,
		},
		{
			MethodName: "DescribeAlias",
			Handler:    _RootCoord_DescribeAlias_Handler,
		},
		{
			MethodName: "ListAliases",
			Handler:    _RootCoord_ListAliases_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _RootCoord_ShowCollections_Handler,
		},
		{
			MethodName: "AlterCollection",
			Handler:    _RootCoord_AlterCollection_Handler,
		},
		{
			MethodName: "AlterCollectionField",
			Handler:    _RootCoord_AlterCollectionField_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _RootCoord_CreatePartition_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _RootCoord_DropPartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _RootCoord_HasPartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _RootCoord_ShowPartitions_Handler,
		},
		{
			MethodName: "ShowPartitionsInternal",
			Handler:    _RootCoord_ShowPartitionsInternal_Handler,
		},
		{
			MethodName: "ShowSegments",
			Handler:    _RootCoord_ShowSegments_Handler,
		},
		{
			MethodName: "GetPChannelInfo",
			Handler:    _RootCoord_GetPChannelInfo_Handler,
		},
		{
			MethodName: "AllocTimestamp",
			Handler:    _RootCoord_AllocTimestamp_Handler,
		},
		{
			MethodName: "AllocID",
			Handler:    _RootCoord_AllocID_Handler,
		},
		{
			MethodName: "UpdateChannelTimeTick",
			Handler:    _RootCoord_UpdateChannelTimeTick_Handler,
		},
		{
			MethodName: "InvalidateCollectionMetaCache",
			Handler:    _RootCoord_InvalidateCollectionMetaCache_Handler,
		},
		{
			MethodName: "ShowConfigurations",
			Handler:    _RootCoord_ShowConfigurations_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _RootCoord_GetMetrics_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _RootCoord_CreateCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _RootCoord_UpdateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _RootCoord_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredUsers",
			Handler:    _RootCoord_ListCredUsers_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _RootCoord_GetCredential_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RootCoord_CreateRole_Handler,
		},
		{
			MethodName: "DropRole",
			Handler:    _RootCoord_DropRole_Handler,
		},
		{
			MethodName: "OperateUserRole",
			Handler:    _RootCoord_OperateUserRole_Handler,
		},
		{
			MethodName: "SelectRole",
			Handler:    _RootCoord_SelectRole_Handler,
		},
		{
			MethodName: "SelectUser",
			Handler:    _RootCoord_SelectUser_Handler,
		},
		{
			MethodName: "OperatePrivilege",
			Handler:    _RootCoord_OperatePrivilege_Handler,
		},
		{
			MethodName: "SelectGrant",
			Handler:    _RootCoord_SelectGrant_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _RootCoord_ListPolicy_Handler,
		},
		{
			MethodName: "BackupRBAC",
			Handler:    _RootCoord_BackupRBAC_Handler,
		},
		{
			MethodName: "RestoreRBAC",
			Handler:    _RootCoord_RestoreRBAC_Handler,
		},
		{
			MethodName: "CreatePrivilegeGroup",
			Handler:    _RootCoord_CreatePrivilegeGroup_Handler,
		},
		{
			MethodName: "DropPrivilegeGroup",
			Handler:    _RootCoord_DropPrivilegeGroup_Handler,
		},
		{
			MethodName: "ListPrivilegeGroups",
			Handler:    _RootCoord_ListPrivilegeGroups_Handler,
		},
		{
			MethodName: "OperatePrivilegeGroup",
			Handler:    _RootCoord_OperatePrivilegeGroup_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _RootCoord_CheckHealth_Handler,
		},
		{
			MethodName: "RenameCollection",
			Handler:    _RootCoord_RenameCollection_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _RootCoord_CreateDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _RootCoord_DropDatabase_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _RootCoord_ListDatabases_Handler,
		},
		{
			MethodName: "DescribeDatabase",
			Handler:    _RootCoord_DescribeDatabase_Handler,
		},
		{
			MethodName: "AlterDatabase",
			Handler:    _RootCoord_AlterDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "root_coord.proto",
}
