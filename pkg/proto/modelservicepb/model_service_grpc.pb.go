// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: model_service.proto

package modelservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextEmbeddingService_Embedding_FullMethodName = "/milvus.proto.modelservice.TextEmbeddingService/Embedding"
)

// TextEmbeddingServiceClient is the client API for TextEmbeddingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextEmbeddingServiceClient interface {
	Embedding(ctx context.Context, in *TextEmbeddingRequest, opts ...grpc.CallOption) (*TextEmbeddingResponse, error)
}

type textEmbeddingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextEmbeddingServiceClient(cc grpc.ClientConnInterface) TextEmbeddingServiceClient {
	return &textEmbeddingServiceClient{cc}
}

func (c *textEmbeddingServiceClient) Embedding(ctx context.Context, in *TextEmbeddingRequest, opts ...grpc.CallOption) (*TextEmbeddingResponse, error) {
	out := new(TextEmbeddingResponse)
	err := c.cc.Invoke(ctx, TextEmbeddingService_Embedding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextEmbeddingServiceServer is the server API for TextEmbeddingService service.
// All implementations should embed UnimplementedTextEmbeddingServiceServer
// for forward compatibility
type TextEmbeddingServiceServer interface {
	Embedding(context.Context, *TextEmbeddingRequest) (*TextEmbeddingResponse, error)
}

// UnimplementedTextEmbeddingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTextEmbeddingServiceServer struct {
}

func (UnimplementedTextEmbeddingServiceServer) Embedding(context.Context, *TextEmbeddingRequest) (*TextEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embedding not implemented")
}

// UnsafeTextEmbeddingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextEmbeddingServiceServer will
// result in compilation errors.
type UnsafeTextEmbeddingServiceServer interface {
	mustEmbedUnimplementedTextEmbeddingServiceServer()
}

func RegisterTextEmbeddingServiceServer(s grpc.ServiceRegistrar, srv TextEmbeddingServiceServer) {
	s.RegisterService(&TextEmbeddingService_ServiceDesc, srv)
}

func _TextEmbeddingService_Embedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextEmbeddingServiceServer).Embedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextEmbeddingService_Embedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextEmbeddingServiceServer).Embedding(ctx, req.(*TextEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextEmbeddingService_ServiceDesc is the grpc.ServiceDesc for TextEmbeddingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextEmbeddingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.modelservice.TextEmbeddingService",
	HandlerType: (*TextEmbeddingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Embedding",
			Handler:    _TextEmbeddingService_Embedding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model_service.proto",
}

const (
	RerankService_Rerank_FullMethodName = "/milvus.proto.modelservice.RerankService/Rerank"
)

// RerankServiceClient is the client API for RerankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RerankServiceClient interface {
	Rerank(ctx context.Context, in *TextRerankRequest, opts ...grpc.CallOption) (*TextRerankResponse, error)
}

type rerankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRerankServiceClient(cc grpc.ClientConnInterface) RerankServiceClient {
	return &rerankServiceClient{cc}
}

func (c *rerankServiceClient) Rerank(ctx context.Context, in *TextRerankRequest, opts ...grpc.CallOption) (*TextRerankResponse, error) {
	out := new(TextRerankResponse)
	err := c.cc.Invoke(ctx, RerankService_Rerank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RerankServiceServer is the server API for RerankService service.
// All implementations should embed UnimplementedRerankServiceServer
// for forward compatibility
type RerankServiceServer interface {
	Rerank(context.Context, *TextRerankRequest) (*TextRerankResponse, error)
}

// UnimplementedRerankServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRerankServiceServer struct {
}

func (UnimplementedRerankServiceServer) Rerank(context.Context, *TextRerankRequest) (*TextRerankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rerank not implemented")
}

// UnsafeRerankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RerankServiceServer will
// result in compilation errors.
type UnsafeRerankServiceServer interface {
	mustEmbedUnimplementedRerankServiceServer()
}

func RegisterRerankServiceServer(s grpc.ServiceRegistrar, srv RerankServiceServer) {
	s.RegisterService(&RerankService_ServiceDesc, srv)
}

func _RerankService_Rerank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRerankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankServiceServer).Rerank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RerankService_Rerank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankServiceServer).Rerank(ctx, req.(*TextRerankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RerankService_ServiceDesc is the grpc.ServiceDesc for RerankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RerankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.modelservice.RerankService",
	HandlerType: (*RerankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rerank",
			Handler:    _RerankService_Rerank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model_service.proto",
}
