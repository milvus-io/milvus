// Code generated by mockery v2.46.0. DO NOT EDIT.

package predicates

import mock "github.com/stretchr/testify/mock"

// MockPredicate is an autogenerated mock type for the Predicate type
type MockPredicate struct {
	mock.Mock
}

type MockPredicate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPredicate) EXPECT() *MockPredicate_Expecter {
	return &MockPredicate_Expecter{mock: &_m.Mock}
}

// IsTrue provides a mock function with given fields: _a0
func (_m *MockPredicate) IsTrue(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsTrue")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPredicate_IsTrue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTrue'
type MockPredicate_IsTrue_Call struct {
	*mock.Call
}

// IsTrue is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockPredicate_Expecter) IsTrue(_a0 interface{}) *MockPredicate_IsTrue_Call {
	return &MockPredicate_IsTrue_Call{Call: _e.mock.On("IsTrue", _a0)}
}

func (_c *MockPredicate_IsTrue_Call) Run(run func(_a0 interface{})) *MockPredicate_IsTrue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockPredicate_IsTrue_Call) Return(_a0 bool) *MockPredicate_IsTrue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredicate_IsTrue_Call) RunAndReturn(run func(interface{}) bool) *MockPredicate_IsTrue_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with given fields:
func (_m *MockPredicate) Key() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPredicate_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockPredicate_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockPredicate_Expecter) Key() *MockPredicate_Key_Call {
	return &MockPredicate_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockPredicate_Key_Call) Run(run func()) *MockPredicate_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPredicate_Key_Call) Return(_a0 string) *MockPredicate_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredicate_Key_Call) RunAndReturn(run func() string) *MockPredicate_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Target provides a mock function with given fields:
func (_m *MockPredicate) Target() PredicateTarget {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Target")
	}

	var r0 PredicateTarget
	if rf, ok := ret.Get(0).(func() PredicateTarget); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PredicateTarget)
	}

	return r0
}

// MockPredicate_Target_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Target'
type MockPredicate_Target_Call struct {
	*mock.Call
}

// Target is a helper method to define mock.On call
func (_e *MockPredicate_Expecter) Target() *MockPredicate_Target_Call {
	return &MockPredicate_Target_Call{Call: _e.mock.On("Target")}
}

func (_c *MockPredicate_Target_Call) Run(run func()) *MockPredicate_Target_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPredicate_Target_Call) Return(_a0 PredicateTarget) *MockPredicate_Target_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredicate_Target_Call) RunAndReturn(run func() PredicateTarget) *MockPredicate_Target_Call {
	_c.Call.Return(run)
	return _c
}

// TargetValue provides a mock function with given fields:
func (_m *MockPredicate) TargetValue() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetValue")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockPredicate_TargetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetValue'
type MockPredicate_TargetValue_Call struct {
	*mock.Call
}

// TargetValue is a helper method to define mock.On call
func (_e *MockPredicate_Expecter) TargetValue() *MockPredicate_TargetValue_Call {
	return &MockPredicate_TargetValue_Call{Call: _e.mock.On("TargetValue")}
}

func (_c *MockPredicate_TargetValue_Call) Run(run func()) *MockPredicate_TargetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPredicate_TargetValue_Call) Return(_a0 interface{}) *MockPredicate_TargetValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredicate_TargetValue_Call) RunAndReturn(run func() interface{}) *MockPredicate_TargetValue_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockPredicate) Type() PredicateType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 PredicateType
	if rf, ok := ret.Get(0).(func() PredicateType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PredicateType)
	}

	return r0
}

// MockPredicate_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockPredicate_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockPredicate_Expecter) Type() *MockPredicate_Type_Call {
	return &MockPredicate_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockPredicate_Type_Call) Run(run func()) *MockPredicate_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPredicate_Type_Call) Return(_a0 PredicateType) *MockPredicate_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredicate_Type_Call) RunAndReturn(run func() PredicateType) *MockPredicate_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPredicate creates a new instance of MockPredicate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPredicate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPredicate {
	mock := &MockPredicate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
