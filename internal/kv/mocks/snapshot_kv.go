// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SnapShotKV is an autogenerated mock type for the SnapShotKV type
type SnapShotKV struct {
	mock.Mock
}

type SnapShotKV_Expecter struct {
	mock *mock.Mock
}

func (_m *SnapShotKV) EXPECT() *SnapShotKV_Expecter {
	return &SnapShotKV_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx, key, ts
func (_m *SnapShotKV) Load(ctx context.Context, key string, ts uint64) (string, error) {
	ret := _m.Called(ctx, key, ts)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) (string, error)); ok {
		return rf(ctx, key, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) string); ok {
		r0 = rf(ctx, key, ts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, key, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapShotKV_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type SnapShotKV_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ts uint64
func (_e *SnapShotKV_Expecter) Load(ctx interface{}, key interface{}, ts interface{}) *SnapShotKV_Load_Call {
	return &SnapShotKV_Load_Call{Call: _e.mock.On("Load", ctx, key, ts)}
}

func (_c *SnapShotKV_Load_Call) Run(run func(ctx context.Context, key string, ts uint64)) *SnapShotKV_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64))
	})
	return _c
}

func (_c *SnapShotKV_Load_Call) Return(_a0 string, _a1 error) *SnapShotKV_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SnapShotKV_Load_Call) RunAndReturn(run func(context.Context, string, uint64) (string, error)) *SnapShotKV_Load_Call {
	_c.Call.Return(run)
	return _c
}

// LoadWithPrefix provides a mock function with given fields: ctx, key, ts
func (_m *SnapShotKV) LoadWithPrefix(ctx context.Context, key string, ts uint64) ([]string, []string, error) {
	ret := _m.Called(ctx, key, ts)

	if len(ret) == 0 {
		panic("no return value specified for LoadWithPrefix")
	}

	var r0 []string
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) ([]string, []string, error)); ok {
		return rf(ctx, key, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) []string); ok {
		r0 = rf(ctx, key, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) []string); ok {
		r1 = rf(ctx, key, ts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, uint64) error); ok {
		r2 = rf(ctx, key, ts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapShotKV_LoadWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadWithPrefix'
type SnapShotKV_LoadWithPrefix_Call struct {
	*mock.Call
}

// LoadWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ts uint64
func (_e *SnapShotKV_Expecter) LoadWithPrefix(ctx interface{}, key interface{}, ts interface{}) *SnapShotKV_LoadWithPrefix_Call {
	return &SnapShotKV_LoadWithPrefix_Call{Call: _e.mock.On("LoadWithPrefix", ctx, key, ts)}
}

func (_c *SnapShotKV_LoadWithPrefix_Call) Run(run func(ctx context.Context, key string, ts uint64)) *SnapShotKV_LoadWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64))
	})
	return _c
}

func (_c *SnapShotKV_LoadWithPrefix_Call) Return(_a0 []string, _a1 []string, _a2 error) *SnapShotKV_LoadWithPrefix_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SnapShotKV_LoadWithPrefix_Call) RunAndReturn(run func(context.Context, string, uint64) ([]string, []string, error)) *SnapShotKV_LoadWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// MultiSave provides a mock function with given fields: ctx, kvs, ts
func (_m *SnapShotKV) MultiSave(ctx context.Context, kvs map[string]string, ts uint64) error {
	ret := _m.Called(ctx, kvs, ts)

	if len(ret) == 0 {
		panic("no return value specified for MultiSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, uint64) error); ok {
		r0 = rf(ctx, kvs, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapShotKV_MultiSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSave'
type SnapShotKV_MultiSave_Call struct {
	*mock.Call
}

// MultiSave is a helper method to define mock.On call
//   - ctx context.Context
//   - kvs map[string]string
//   - ts uint64
func (_e *SnapShotKV_Expecter) MultiSave(ctx interface{}, kvs interface{}, ts interface{}) *SnapShotKV_MultiSave_Call {
	return &SnapShotKV_MultiSave_Call{Call: _e.mock.On("MultiSave", ctx, kvs, ts)}
}

func (_c *SnapShotKV_MultiSave_Call) Run(run func(ctx context.Context, kvs map[string]string, ts uint64)) *SnapShotKV_MultiSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].(uint64))
	})
	return _c
}

func (_c *SnapShotKV_MultiSave_Call) Return(_a0 error) *SnapShotKV_MultiSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapShotKV_MultiSave_Call) RunAndReturn(run func(context.Context, map[string]string, uint64) error) *SnapShotKV_MultiSave_Call {
	_c.Call.Return(run)
	return _c
}

// MultiSaveAndRemove provides a mock function with given fields: ctx, saves, removals, ts
func (_m *SnapShotKV) MultiSaveAndRemove(ctx context.Context, saves map[string]string, removals []string, ts uint64) error {
	ret := _m.Called(ctx, saves, removals, ts)

	if len(ret) == 0 {
		panic("no return value specified for MultiSaveAndRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []string, uint64) error); ok {
		r0 = rf(ctx, saves, removals, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapShotKV_MultiSaveAndRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSaveAndRemove'
type SnapShotKV_MultiSaveAndRemove_Call struct {
	*mock.Call
}

// MultiSaveAndRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - saves map[string]string
//   - removals []string
//   - ts uint64
func (_e *SnapShotKV_Expecter) MultiSaveAndRemove(ctx interface{}, saves interface{}, removals interface{}, ts interface{}) *SnapShotKV_MultiSaveAndRemove_Call {
	return &SnapShotKV_MultiSaveAndRemove_Call{Call: _e.mock.On("MultiSaveAndRemove", ctx, saves, removals, ts)}
}

func (_c *SnapShotKV_MultiSaveAndRemove_Call) Run(run func(ctx context.Context, saves map[string]string, removals []string, ts uint64)) *SnapShotKV_MultiSaveAndRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].([]string), args[3].(uint64))
	})
	return _c
}

func (_c *SnapShotKV_MultiSaveAndRemove_Call) Return(_a0 error) *SnapShotKV_MultiSaveAndRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapShotKV_MultiSaveAndRemove_Call) RunAndReturn(run func(context.Context, map[string]string, []string, uint64) error) *SnapShotKV_MultiSaveAndRemove_Call {
	_c.Call.Return(run)
	return _c
}

// MultiSaveAndRemoveWithPrefix provides a mock function with given fields: ctx, saves, removals, ts
func (_m *SnapShotKV) MultiSaveAndRemoveWithPrefix(ctx context.Context, saves map[string]string, removals []string, ts uint64) error {
	ret := _m.Called(ctx, saves, removals, ts)

	if len(ret) == 0 {
		panic("no return value specified for MultiSaveAndRemoveWithPrefix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, []string, uint64) error); ok {
		r0 = rf(ctx, saves, removals, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapShotKV_MultiSaveAndRemoveWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSaveAndRemoveWithPrefix'
type SnapShotKV_MultiSaveAndRemoveWithPrefix_Call struct {
	*mock.Call
}

// MultiSaveAndRemoveWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - saves map[string]string
//   - removals []string
//   - ts uint64
func (_e *SnapShotKV_Expecter) MultiSaveAndRemoveWithPrefix(ctx interface{}, saves interface{}, removals interface{}, ts interface{}) *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call {
	return &SnapShotKV_MultiSaveAndRemoveWithPrefix_Call{Call: _e.mock.On("MultiSaveAndRemoveWithPrefix", ctx, saves, removals, ts)}
}

func (_c *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call) Run(run func(ctx context.Context, saves map[string]string, removals []string, ts uint64)) *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].([]string), args[3].(uint64))
	})
	return _c
}

func (_c *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call) Return(_a0 error) *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call) RunAndReturn(run func(context.Context, map[string]string, []string, uint64) error) *SnapShotKV_MultiSaveAndRemoveWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, key, value, ts
func (_m *SnapShotKV) Save(ctx context.Context, key string, value string, ts uint64) error {
	ret := _m.Called(ctx, key, value, ts)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64) error); ok {
		r0 = rf(ctx, key, value, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapShotKV_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type SnapShotKV_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
//   - ts uint64
func (_e *SnapShotKV_Expecter) Save(ctx interface{}, key interface{}, value interface{}, ts interface{}) *SnapShotKV_Save_Call {
	return &SnapShotKV_Save_Call{Call: _e.mock.On("Save", ctx, key, value, ts)}
}

func (_c *SnapShotKV_Save_Call) Run(run func(ctx context.Context, key string, value string, ts uint64)) *SnapShotKV_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uint64))
	})
	return _c
}

func (_c *SnapShotKV_Save_Call) Return(_a0 error) *SnapShotKV_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapShotKV_Save_Call) RunAndReturn(run func(context.Context, string, string, uint64) error) *SnapShotKV_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewSnapShotKV creates a new instance of SnapShotKV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapShotKV(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnapShotKV {
	mock := &SnapShotKV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
