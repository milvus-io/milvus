// Code generated by mockery v2.53.3. DO NOT EDIT.

package importv2

import mock "github.com/stretchr/testify/mock"

// MockTaskManager is an autogenerated mock type for the TaskManager type
type MockTaskManager struct {
	mock.Mock
}

type MockTaskManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskManager) EXPECT() *MockTaskManager_Expecter {
	return &MockTaskManager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: task
func (_m *MockTaskManager) Add(task Task) {
	_m.Called(task)
}

// MockTaskManager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockTaskManager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - task Task
func (_e *MockTaskManager_Expecter) Add(task interface{}) *MockTaskManager_Add_Call {
	return &MockTaskManager_Add_Call{Call: _e.mock.On("Add", task)}
}

func (_c *MockTaskManager_Add_Call) Run(run func(task Task)) *MockTaskManager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Task))
	})
	return _c
}

func (_c *MockTaskManager_Add_Call) Return() *MockTaskManager_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_Add_Call) RunAndReturn(run func(Task)) *MockTaskManager_Add_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: taskID
func (_m *MockTaskManager) Get(taskID int64) Task {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 Task
	if rf, ok := ret.Get(0).(func(int64) Task); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Task)
		}
	}

	return r0
}

// MockTaskManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTaskManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - taskID int64
func (_e *MockTaskManager_Expecter) Get(taskID interface{}) *MockTaskManager_Get_Call {
	return &MockTaskManager_Get_Call{Call: _e.mock.On("Get", taskID)}
}

func (_c *MockTaskManager_Get_Call) Run(run func(taskID int64)) *MockTaskManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockTaskManager_Get_Call) Return(_a0 Task) *MockTaskManager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskManager_Get_Call) RunAndReturn(run func(int64) Task) *MockTaskManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBy provides a mock function with given fields: filters
func (_m *MockTaskManager) GetBy(filters ...TaskFilter) []Task {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBy")
	}

	var r0 []Task
	if rf, ok := ret.Get(0).(func(...TaskFilter) []Task); ok {
		r0 = rf(filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	return r0
}

// MockTaskManager_GetBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBy'
type MockTaskManager_GetBy_Call struct {
	*mock.Call
}

// GetBy is a helper method to define mock.On call
//   - filters ...TaskFilter
func (_e *MockTaskManager_Expecter) GetBy(filters ...interface{}) *MockTaskManager_GetBy_Call {
	return &MockTaskManager_GetBy_Call{Call: _e.mock.On("GetBy",
		append([]interface{}{}, filters...)...)}
}

func (_c *MockTaskManager_GetBy_Call) Run(run func(filters ...TaskFilter)) *MockTaskManager_GetBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]TaskFilter, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(TaskFilter)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockTaskManager_GetBy_Call) Return(_a0 []Task) *MockTaskManager_GetBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskManager_GetBy_Call) RunAndReturn(run func(...TaskFilter) []Task) *MockTaskManager_GetBy_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: taskID
func (_m *MockTaskManager) Remove(taskID int64) {
	_m.Called(taskID)
}

// MockTaskManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockTaskManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - taskID int64
func (_e *MockTaskManager_Expecter) Remove(taskID interface{}) *MockTaskManager_Remove_Call {
	return &MockTaskManager_Remove_Call{Call: _e.mock.On("Remove", taskID)}
}

func (_c *MockTaskManager_Remove_Call) Run(run func(taskID int64)) *MockTaskManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockTaskManager_Remove_Call) Return() *MockTaskManager_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_Remove_Call) RunAndReturn(run func(int64)) *MockTaskManager_Remove_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: taskID, actions
func (_m *MockTaskManager) Update(taskID int64, actions ...UpdateAction) {
	_va := make([]interface{}, len(actions))
	for _i := range actions {
		_va[_i] = actions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, taskID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockTaskManager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskManager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - taskID int64
//   - actions ...UpdateAction
func (_e *MockTaskManager_Expecter) Update(taskID interface{}, actions ...interface{}) *MockTaskManager_Update_Call {
	return &MockTaskManager_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{taskID}, actions...)...)}
}

func (_c *MockTaskManager_Update_Call) Run(run func(taskID int64, actions ...UpdateAction)) *MockTaskManager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]UpdateAction, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(UpdateAction)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockTaskManager_Update_Call) Return() *MockTaskManager_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskManager_Update_Call) RunAndReturn(run func(int64, ...UpdateAction)) *MockTaskManager_Update_Call {
	_c.Run(run)
	return _c
}

// NewMockTaskManager creates a new instance of MockTaskManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskManager {
	mock := &MockTaskManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
