// Code generated by mockery v2.53.3. DO NOT EDIT.

package cluster

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetAllWorkers provides a mock function with no fields
func (_m *MockManager) GetAllWorkers() []Worker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllWorkers")
	}

	var r0 []Worker
	if rf, ok := ret.Get(0).(func() []Worker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Worker)
		}
	}

	return r0
}

// MockManager_GetAllWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWorkers'
type MockManager_GetAllWorkers_Call struct {
	*mock.Call
}

// GetAllWorkers is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetAllWorkers() *MockManager_GetAllWorkers_Call {
	return &MockManager_GetAllWorkers_Call{Call: _e.mock.On("GetAllWorkers")}
}

func (_c *MockManager_GetAllWorkers_Call) Run(run func()) *MockManager_GetAllWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetAllWorkers_Call) Return(_a0 []Worker) *MockManager_GetAllWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetAllWorkers_Call) RunAndReturn(run func() []Worker) *MockManager_GetAllWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorker provides a mock function with given fields: ctx, nodeID
func (_m *MockManager) GetWorker(ctx context.Context, nodeID int64) (Worker, error) {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorker")
	}

	var r0 Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (Worker, error)); ok {
		return rf(ctx, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) Worker); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Worker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorker'
type MockManager_GetWorker_Call struct {
	*mock.Call
}

// GetWorker is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID int64
func (_e *MockManager_Expecter) GetWorker(ctx interface{}, nodeID interface{}) *MockManager_GetWorker_Call {
	return &MockManager_GetWorker_Call{Call: _e.mock.On("GetWorker", ctx, nodeID)}
}

func (_c *MockManager_GetWorker_Call) Run(run func(ctx context.Context, nodeID int64)) *MockManager_GetWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockManager_GetWorker_Call) Return(_a0 Worker, _a1 error) *MockManager_GetWorker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetWorker_Call) RunAndReturn(run func(context.Context, int64) (Worker, error)) *MockManager_GetWorker_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
