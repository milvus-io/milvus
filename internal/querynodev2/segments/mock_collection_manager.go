// Code generated by mockery v2.46.0. DO NOT EDIT.

package segments

import (
	schemapb "github.com/milvus-io/milvus-proto/go-api/v2/schemapb"
	querypb "github.com/milvus-io/milvus/internal/proto/querypb"
	mock "github.com/stretchr/testify/mock"

	segcorepb "github.com/milvus-io/milvus/internal/proto/segcorepb"
)

// MockCollectionManager is an autogenerated mock type for the CollectionManager type
type MockCollectionManager struct {
	mock.Mock
}

type MockCollectionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionManager) EXPECT() *MockCollectionManager_Expecter {
	return &MockCollectionManager_Expecter{mock: &_m.Mock}
}

// AddPartition provides a mock function with given fields: collectionID, partitions
func (_m *MockCollectionManager) AddPartition(collectionID int64, partitions ...int64) {
	_va := make([]interface{}, len(partitions))
	for _i := range partitions {
		_va[_i] = partitions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, collectionID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockCollectionManager_AddPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPartition'
type MockCollectionManager_AddPartition_Call struct {
	*mock.Call
}

// AddPartition is a helper method to define mock.On call
//   - collectionID int64
//   - partitions ...int64
func (_e *MockCollectionManager_Expecter) AddPartition(collectionID interface{}, partitions ...interface{}) *MockCollectionManager_AddPartition_Call {
	return &MockCollectionManager_AddPartition_Call{Call: _e.mock.On("AddPartition",
		append([]interface{}{collectionID}, partitions...)...)}
}

func (_c *MockCollectionManager_AddPartition_Call) Run(run func(collectionID int64, partitions ...int64)) *MockCollectionManager_AddPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockCollectionManager_AddPartition_Call) Return() *MockCollectionManager_AddPartition_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionManager_AddPartition_Call) RunAndReturn(run func(int64, ...int64)) *MockCollectionManager_AddPartition_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: collectionID
func (_m *MockCollectionManager) Get(collectionID int64) *Collection {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Collection
	if rf, ok := ret.Get(0).(func(int64) *Collection); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Collection)
		}
	}

	return r0
}

// MockCollectionManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCollectionManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockCollectionManager_Expecter) Get(collectionID interface{}) *MockCollectionManager_Get_Call {
	return &MockCollectionManager_Get_Call{Call: _e.mock.On("Get", collectionID)}
}

func (_c *MockCollectionManager_Get_Call) Run(run func(collectionID int64)) *MockCollectionManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCollectionManager_Get_Call) Return(_a0 *Collection) *MockCollectionManager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_Get_Call) RunAndReturn(run func(int64) *Collection) *MockCollectionManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartitions provides a mock function with given fields: collectionID
func (_m *MockCollectionManager) GetPartitions(collectionID int64) []int64 {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetPartitions")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func(int64) []int64); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// MockCollectionManager_GetPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartitions'
type MockCollectionManager_GetPartitions_Call struct {
	*mock.Call
}

// GetPartitions is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockCollectionManager_Expecter) GetPartitions(collectionID interface{}) *MockCollectionManager_GetPartitions_Call {
	return &MockCollectionManager_GetPartitions_Call{Call: _e.mock.On("GetPartitions", collectionID)}
}

func (_c *MockCollectionManager_GetPartitions_Call) Run(run func(collectionID int64)) *MockCollectionManager_GetPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCollectionManager_GetPartitions_Call) Return(_a0 []int64) *MockCollectionManager_GetPartitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_GetPartitions_Call) RunAndReturn(run func(int64) []int64) *MockCollectionManager_GetPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *MockCollectionManager) List() []int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// MockCollectionManager_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCollectionManager_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockCollectionManager_Expecter) List() *MockCollectionManager_List_Call {
	return &MockCollectionManager_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockCollectionManager_List_Call) Run(run func()) *MockCollectionManager_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionManager_List_Call) Return(_a0 []int64) *MockCollectionManager_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_List_Call) RunAndReturn(run func() []int64) *MockCollectionManager_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListWithName provides a mock function with given fields:
func (_m *MockCollectionManager) ListWithName() map[int64]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListWithName")
	}

	var r0 map[int64]string
	if rf, ok := ret.Get(0).(func() map[int64]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]string)
		}
	}

	return r0
}

// MockCollectionManager_ListWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWithName'
type MockCollectionManager_ListWithName_Call struct {
	*mock.Call
}

// ListWithName is a helper method to define mock.On call
func (_e *MockCollectionManager_Expecter) ListWithName() *MockCollectionManager_ListWithName_Call {
	return &MockCollectionManager_ListWithName_Call{Call: _e.mock.On("ListWithName")}
}

func (_c *MockCollectionManager_ListWithName_Call) Run(run func()) *MockCollectionManager_ListWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionManager_ListWithName_Call) Return(_a0 map[int64]string) *MockCollectionManager_ListWithName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_ListWithName_Call) RunAndReturn(run func() map[int64]string) *MockCollectionManager_ListWithName_Call {
	_c.Call.Return(run)
	return _c
}

// PutOrRef provides a mock function with given fields: collectionID, schema, meta, loadMeta
func (_m *MockCollectionManager) PutOrRef(collectionID int64, schema *schemapb.CollectionSchema, meta *segcorepb.CollectionIndexMeta, loadMeta *querypb.LoadMetaInfo) {
	_m.Called(collectionID, schema, meta, loadMeta)
}

// MockCollectionManager_PutOrRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutOrRef'
type MockCollectionManager_PutOrRef_Call struct {
	*mock.Call
}

// PutOrRef is a helper method to define mock.On call
//   - collectionID int64
//   - schema *schemapb.CollectionSchema
//   - meta *segcorepb.CollectionIndexMeta
//   - loadMeta *querypb.LoadMetaInfo
func (_e *MockCollectionManager_Expecter) PutOrRef(collectionID interface{}, schema interface{}, meta interface{}, loadMeta interface{}) *MockCollectionManager_PutOrRef_Call {
	return &MockCollectionManager_PutOrRef_Call{Call: _e.mock.On("PutOrRef", collectionID, schema, meta, loadMeta)}
}

func (_c *MockCollectionManager_PutOrRef_Call) Run(run func(collectionID int64, schema *schemapb.CollectionSchema, meta *segcorepb.CollectionIndexMeta, loadMeta *querypb.LoadMetaInfo)) *MockCollectionManager_PutOrRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*schemapb.CollectionSchema), args[2].(*segcorepb.CollectionIndexMeta), args[3].(*querypb.LoadMetaInfo))
	})
	return _c
}

func (_c *MockCollectionManager_PutOrRef_Call) Return() *MockCollectionManager_PutOrRef_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionManager_PutOrRef_Call) RunAndReturn(run func(int64, *schemapb.CollectionSchema, *segcorepb.CollectionIndexMeta, *querypb.LoadMetaInfo)) *MockCollectionManager_PutOrRef_Call {
	_c.Call.Return(run)
	return _c
}

// Ref provides a mock function with given fields: collectionID, count
func (_m *MockCollectionManager) Ref(collectionID int64, count uint32) bool {
	ret := _m.Called(collectionID, count)

	if len(ret) == 0 {
		panic("no return value specified for Ref")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, uint32) bool); ok {
		r0 = rf(collectionID, count)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCollectionManager_Ref_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ref'
type MockCollectionManager_Ref_Call struct {
	*mock.Call
}

// Ref is a helper method to define mock.On call
//   - collectionID int64
//   - count uint32
func (_e *MockCollectionManager_Expecter) Ref(collectionID interface{}, count interface{}) *MockCollectionManager_Ref_Call {
	return &MockCollectionManager_Ref_Call{Call: _e.mock.On("Ref", collectionID, count)}
}

func (_c *MockCollectionManager_Ref_Call) Run(run func(collectionID int64, count uint32)) *MockCollectionManager_Ref_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(uint32))
	})
	return _c
}

func (_c *MockCollectionManager_Ref_Call) Return(_a0 bool) *MockCollectionManager_Ref_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_Ref_Call) RunAndReturn(run func(int64, uint32) bool) *MockCollectionManager_Ref_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePartition provides a mock function with given fields: collectionID, partition
func (_m *MockCollectionManager) RemovePartition(collectionID int64, partition ...int64) {
	_va := make([]interface{}, len(partition))
	for _i := range partition {
		_va[_i] = partition[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, collectionID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockCollectionManager_RemovePartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePartition'
type MockCollectionManager_RemovePartition_Call struct {
	*mock.Call
}

// RemovePartition is a helper method to define mock.On call
//   - collectionID int64
//   - partition ...int64
func (_e *MockCollectionManager_Expecter) RemovePartition(collectionID interface{}, partition ...interface{}) *MockCollectionManager_RemovePartition_Call {
	return &MockCollectionManager_RemovePartition_Call{Call: _e.mock.On("RemovePartition",
		append([]interface{}{collectionID}, partition...)...)}
}

func (_c *MockCollectionManager_RemovePartition_Call) Run(run func(collectionID int64, partition ...int64)) *MockCollectionManager_RemovePartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockCollectionManager_RemovePartition_Call) Return() *MockCollectionManager_RemovePartition_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionManager_RemovePartition_Call) RunAndReturn(run func(int64, ...int64)) *MockCollectionManager_RemovePartition_Call {
	_c.Call.Return(run)
	return _c
}

// Unref provides a mock function with given fields: collectionID, count
func (_m *MockCollectionManager) Unref(collectionID int64, count uint32) bool {
	ret := _m.Called(collectionID, count)

	if len(ret) == 0 {
		panic("no return value specified for Unref")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, uint32) bool); ok {
		r0 = rf(collectionID, count)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCollectionManager_Unref_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unref'
type MockCollectionManager_Unref_Call struct {
	*mock.Call
}

// Unref is a helper method to define mock.On call
//   - collectionID int64
//   - count uint32
func (_e *MockCollectionManager_Expecter) Unref(collectionID interface{}, count interface{}) *MockCollectionManager_Unref_Call {
	return &MockCollectionManager_Unref_Call{Call: _e.mock.On("Unref", collectionID, count)}
}

func (_c *MockCollectionManager_Unref_Call) Run(run func(collectionID int64, count uint32)) *MockCollectionManager_Unref_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(uint32))
	})
	return _c
}

func (_c *MockCollectionManager_Unref_Call) Return(_a0 bool) *MockCollectionManager_Unref_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_Unref_Call) RunAndReturn(run func(int64, uint32) bool) *MockCollectionManager_Unref_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollectionManager creates a new instance of MockCollectionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionManager {
	mock := &MockCollectionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
