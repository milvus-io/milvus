// Code generated by mockery v2.32.4. DO NOT EDIT.

package allocator

import mock "github.com/stretchr/testify/mock"

// MockGlobalIDAllocator is an autogenerated mock type for the GlobalIDAllocatorInterface type
type MockGlobalIDAllocator struct {
	mock.Mock
}

type MockGlobalIDAllocator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalIDAllocator) EXPECT() *MockGlobalIDAllocator_Expecter {
	return &MockGlobalIDAllocator_Expecter{mock: &_m.Mock}
}

// Alloc provides a mock function with given fields: count
func (_m *MockGlobalIDAllocator) Alloc(count uint32) (int64, int64, error) {
	ret := _m.Called(count)

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint32) (int64, int64, error)); ok {
		return rf(count)
	}
	if rf, ok := ret.Get(0).(func(uint32) int64); ok {
		r0 = rf(count)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint32) int64); ok {
		r1 = rf(count)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint32) error); ok {
		r2 = rf(count)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGlobalIDAllocator_Alloc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Alloc'
type MockGlobalIDAllocator_Alloc_Call struct {
	*mock.Call
}

// Alloc is a helper method to define mock.On call
//   - count uint32
func (_e *MockGlobalIDAllocator_Expecter) Alloc(count interface{}) *MockGlobalIDAllocator_Alloc_Call {
	return &MockGlobalIDAllocator_Alloc_Call{Call: _e.mock.On("Alloc", count)}
}

func (_c *MockGlobalIDAllocator_Alloc_Call) Run(run func(count uint32)) *MockGlobalIDAllocator_Alloc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *MockGlobalIDAllocator_Alloc_Call) Return(_a0 int64, _a1 int64, _a2 error) *MockGlobalIDAllocator_Alloc_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGlobalIDAllocator_Alloc_Call) RunAndReturn(run func(uint32) (int64, int64, error)) *MockGlobalIDAllocator_Alloc_Call {
	_c.Call.Return(run)
	return _c
}

// AllocOne provides a mock function with given fields:
func (_m *MockGlobalIDAllocator) AllocOne() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalIDAllocator_AllocOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocOne'
type MockGlobalIDAllocator_AllocOne_Call struct {
	*mock.Call
}

// AllocOne is a helper method to define mock.On call
func (_e *MockGlobalIDAllocator_Expecter) AllocOne() *MockGlobalIDAllocator_AllocOne_Call {
	return &MockGlobalIDAllocator_AllocOne_Call{Call: _e.mock.On("AllocOne")}
}

func (_c *MockGlobalIDAllocator_AllocOne_Call) Run(run func()) *MockGlobalIDAllocator_AllocOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalIDAllocator_AllocOne_Call) Return(_a0 int64, _a1 error) *MockGlobalIDAllocator_AllocOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalIDAllocator_AllocOne_Call) RunAndReturn(run func() (int64, error)) *MockGlobalIDAllocator_AllocOne_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields:
func (_m *MockGlobalIDAllocator) Initialize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalIDAllocator_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockGlobalIDAllocator_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockGlobalIDAllocator_Expecter) Initialize() *MockGlobalIDAllocator_Initialize_Call {
	return &MockGlobalIDAllocator_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockGlobalIDAllocator_Initialize_Call) Run(run func()) *MockGlobalIDAllocator_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalIDAllocator_Initialize_Call) Return(_a0 error) *MockGlobalIDAllocator_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalIDAllocator_Initialize_Call) RunAndReturn(run func() error) *MockGlobalIDAllocator_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGlobalIDAllocator creates a new instance of MockGlobalIDAllocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGlobalIDAllocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGlobalIDAllocator {
	mock := &MockGlobalIDAllocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
