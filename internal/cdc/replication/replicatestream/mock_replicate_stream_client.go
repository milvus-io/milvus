// Code generated by mockery v2.53.3. DO NOT EDIT.

package replicatestream

import (
	message "github.com/milvus-io/milvus/pkg/v2/streaming/util/message"
	mock "github.com/stretchr/testify/mock"
)

// MockReplicateStreamClient is an autogenerated mock type for the ReplicateStreamClient type
type MockReplicateStreamClient struct {
	mock.Mock
}

type MockReplicateStreamClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicateStreamClient) EXPECT() *MockReplicateStreamClient_Expecter {
	return &MockReplicateStreamClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockReplicateStreamClient) Close() {
	_m.Called()
}

// MockReplicateStreamClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReplicateStreamClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockReplicateStreamClient_Expecter) Close() *MockReplicateStreamClient_Close_Call {
	return &MockReplicateStreamClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockReplicateStreamClient_Close_Call) Run(run func()) *MockReplicateStreamClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReplicateStreamClient_Close_Call) Return() *MockReplicateStreamClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReplicateStreamClient_Close_Call) RunAndReturn(run func()) *MockReplicateStreamClient_Close_Call {
	_c.Run(run)
	return _c
}

// Replicate provides a mock function with given fields: msg
func (_m *MockReplicateStreamClient) Replicate(msg message.ImmutableMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Replicate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(message.ImmutableMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicateStreamClient_Replicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replicate'
type MockReplicateStreamClient_Replicate_Call struct {
	*mock.Call
}

// Replicate is a helper method to define mock.On call
//   - msg message.ImmutableMessage
func (_e *MockReplicateStreamClient_Expecter) Replicate(msg interface{}) *MockReplicateStreamClient_Replicate_Call {
	return &MockReplicateStreamClient_Replicate_Call{Call: _e.mock.On("Replicate", msg)}
}

func (_c *MockReplicateStreamClient_Replicate_Call) Run(run func(msg message.ImmutableMessage)) *MockReplicateStreamClient_Replicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(message.ImmutableMessage))
	})
	return _c
}

func (_c *MockReplicateStreamClient_Replicate_Call) Return(_a0 error) *MockReplicateStreamClient_Replicate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicateStreamClient_Replicate_Call) RunAndReturn(run func(message.ImmutableMessage) error) *MockReplicateStreamClient_Replicate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplicateStreamClient creates a new instance of MockReplicateStreamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicateStreamClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicateStreamClient {
	mock := &MockReplicateStreamClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
