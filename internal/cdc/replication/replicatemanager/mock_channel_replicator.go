// Code generated by mockery v2.53.3. DO NOT EDIT.

package replicatemanager

import (
	typeutil "github.com/milvus-io/milvus/pkg/v2/util/typeutil"
	mock "github.com/stretchr/testify/mock"
)

// MockChannelReplicator is an autogenerated mock type for the ChannelReplicator type
type MockChannelReplicator struct {
	mock.Mock
}

type MockChannelReplicator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelReplicator) EXPECT() *MockChannelReplicator_Expecter {
	return &MockChannelReplicator_Expecter{mock: &_m.Mock}
}

// GetState provides a mock function with no fields
func (_m *MockChannelReplicator) GetState() typeutil.LifetimeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 typeutil.LifetimeState
	if rf, ok := ret.Get(0).(func() typeutil.LifetimeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(typeutil.LifetimeState)
	}

	return r0
}

// MockChannelReplicator_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockChannelReplicator_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *MockChannelReplicator_Expecter) GetState() *MockChannelReplicator_GetState_Call {
	return &MockChannelReplicator_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *MockChannelReplicator_GetState_Call) Run(run func()) *MockChannelReplicator_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannelReplicator_GetState_Call) Return(_a0 typeutil.LifetimeState) *MockChannelReplicator_GetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelReplicator_GetState_Call) RunAndReturn(run func() typeutil.LifetimeState) *MockChannelReplicator_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// StartReplicateChannel provides a mock function with no fields
func (_m *MockChannelReplicator) StartReplicateChannel() {
	_m.Called()
}

// MockChannelReplicator_StartReplicateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartReplicateChannel'
type MockChannelReplicator_StartReplicateChannel_Call struct {
	*mock.Call
}

// StartReplicateChannel is a helper method to define mock.On call
func (_e *MockChannelReplicator_Expecter) StartReplicateChannel() *MockChannelReplicator_StartReplicateChannel_Call {
	return &MockChannelReplicator_StartReplicateChannel_Call{Call: _e.mock.On("StartReplicateChannel")}
}

func (_c *MockChannelReplicator_StartReplicateChannel_Call) Run(run func()) *MockChannelReplicator_StartReplicateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannelReplicator_StartReplicateChannel_Call) Return() *MockChannelReplicator_StartReplicateChannel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChannelReplicator_StartReplicateChannel_Call) RunAndReturn(run func()) *MockChannelReplicator_StartReplicateChannel_Call {
	_c.Run(run)
	return _c
}

// StopReplicateChannel provides a mock function with no fields
func (_m *MockChannelReplicator) StopReplicateChannel() {
	_m.Called()
}

// MockChannelReplicator_StopReplicateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopReplicateChannel'
type MockChannelReplicator_StopReplicateChannel_Call struct {
	*mock.Call
}

// StopReplicateChannel is a helper method to define mock.On call
func (_e *MockChannelReplicator_Expecter) StopReplicateChannel() *MockChannelReplicator_StopReplicateChannel_Call {
	return &MockChannelReplicator_StopReplicateChannel_Call{Call: _e.mock.On("StopReplicateChannel")}
}

func (_c *MockChannelReplicator_StopReplicateChannel_Call) Run(run func()) *MockChannelReplicator_StopReplicateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannelReplicator_StopReplicateChannel_Call) Return() *MockChannelReplicator_StopReplicateChannel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChannelReplicator_StopReplicateChannel_Call) RunAndReturn(run func()) *MockChannelReplicator_StopReplicateChannel_Call {
	_c.Run(run)
	return _c
}

// NewMockChannelReplicator creates a new instance of MockChannelReplicator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelReplicator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelReplicator {
	mock := &MockChannelReplicator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
