// Code generated by mockery v2.53.3. DO NOT EDIT.

package controller

import mock "github.com/stretchr/testify/mock"

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

type MockController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockController) EXPECT() *MockController_Expecter {
	return &MockController_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with no fields
func (_m *MockController) Start() {
	_m.Called()
}

// MockController_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockController_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockController_Expecter) Start() *MockController_Start_Call {
	return &MockController_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockController_Start_Call) Run(run func()) *MockController_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockController_Start_Call) Return() *MockController_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_Start_Call) RunAndReturn(run func()) *MockController_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockController) Stop() {
	_m.Called()
}

// MockController_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockController_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockController_Expecter) Stop() *MockController_Stop_Call {
	return &MockController_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockController_Stop_Call) Run(run func()) *MockController_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockController_Stop_Call) Return() *MockController_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_Stop_Call) RunAndReturn(run func()) *MockController_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
