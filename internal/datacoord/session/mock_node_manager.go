// Code generated by mockery v2.53.3. DO NOT EDIT.

package session

import (
	context "context"

	types "github.com/milvus-io/milvus/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockNodeManager is an autogenerated mock type for the NodeManager type
type MockNodeManager struct {
	mock.Mock
}

type MockNodeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeManager) EXPECT() *MockNodeManager_Expecter {
	return &MockNodeManager_Expecter{mock: &_m.Mock}
}

// AddNode provides a mock function with given fields: nodeID, address
func (_m *MockNodeManager) AddNode(nodeID int64, address string) error {
	ret := _m.Called(nodeID, address)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(nodeID, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeManager_AddNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNode'
type MockNodeManager_AddNode_Call struct {
	*mock.Call
}

// AddNode is a helper method to define mock.On call
//   - nodeID int64
//   - address string
func (_e *MockNodeManager_Expecter) AddNode(nodeID interface{}, address interface{}) *MockNodeManager_AddNode_Call {
	return &MockNodeManager_AddNode_Call{Call: _e.mock.On("AddNode", nodeID, address)}
}

func (_c *MockNodeManager_AddNode_Call) Run(run func(nodeID int64, address string)) *MockNodeManager_AddNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockNodeManager_AddNode_Call) Return(_a0 error) *MockNodeManager_AddNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeManager_AddNode_Call) RunAndReturn(run func(int64, string) error) *MockNodeManager_AddNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function with given fields: nodeID
func (_m *MockNodeManager) GetClient(nodeID int64) (types.DataNodeClient, error) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 types.DataNodeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (types.DataNodeClient, error)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(int64) types.DataNodeClient); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.DataNodeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeManager_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockNodeManager_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - nodeID int64
func (_e *MockNodeManager_Expecter) GetClient(nodeID interface{}) *MockNodeManager_GetClient_Call {
	return &MockNodeManager_GetClient_Call{Call: _e.mock.On("GetClient", nodeID)}
}

func (_c *MockNodeManager_GetClient_Call) Run(run func(nodeID int64)) *MockNodeManager_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockNodeManager_GetClient_Call) Return(_a0 types.DataNodeClient, _a1 error) *MockNodeManager_GetClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeManager_GetClient_Call) RunAndReturn(run func(int64) (types.DataNodeClient, error)) *MockNodeManager_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientIDs provides a mock function with no fields
func (_m *MockNodeManager) GetClientIDs() []int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientIDs")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// MockNodeManager_GetClientIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientIDs'
type MockNodeManager_GetClientIDs_Call struct {
	*mock.Call
}

// GetClientIDs is a helper method to define mock.On call
func (_e *MockNodeManager_Expecter) GetClientIDs() *MockNodeManager_GetClientIDs_Call {
	return &MockNodeManager_GetClientIDs_Call{Call: _e.mock.On("GetClientIDs")}
}

func (_c *MockNodeManager_GetClientIDs_Call) Run(run func()) *MockNodeManager_GetClientIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeManager_GetClientIDs_Call) Return(_a0 []int64) *MockNodeManager_GetClientIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeManager_GetClientIDs_Call) RunAndReturn(run func() []int64) *MockNodeManager_GetClientIDs_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNode provides a mock function with given fields: nodeID
func (_m *MockNodeManager) RemoveNode(nodeID int64) {
	_m.Called(nodeID)
}

// MockNodeManager_RemoveNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNode'
type MockNodeManager_RemoveNode_Call struct {
	*mock.Call
}

// RemoveNode is a helper method to define mock.On call
//   - nodeID int64
func (_e *MockNodeManager_Expecter) RemoveNode(nodeID interface{}) *MockNodeManager_RemoveNode_Call {
	return &MockNodeManager_RemoveNode_Call{Call: _e.mock.On("RemoveNode", nodeID)}
}

func (_c *MockNodeManager_RemoveNode_Call) Run(run func(nodeID int64)) *MockNodeManager_RemoveNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockNodeManager_RemoveNode_Call) Return() *MockNodeManager_RemoveNode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNodeManager_RemoveNode_Call) RunAndReturn(run func(int64)) *MockNodeManager_RemoveNode_Call {
	_c.Run(run)
	return _c
}

// Startup provides a mock function with given fields: ctx, nodes
func (_m *MockNodeManager) Startup(ctx context.Context, nodes []*NodeInfo) error {
	ret := _m.Called(ctx, nodes)

	if len(ret) == 0 {
		panic("no return value specified for Startup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*NodeInfo) error); ok {
		r0 = rf(ctx, nodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeManager_Startup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Startup'
type MockNodeManager_Startup_Call struct {
	*mock.Call
}

// Startup is a helper method to define mock.On call
//   - ctx context.Context
//   - nodes []*NodeInfo
func (_e *MockNodeManager_Expecter) Startup(ctx interface{}, nodes interface{}) *MockNodeManager_Startup_Call {
	return &MockNodeManager_Startup_Call{Call: _e.mock.On("Startup", ctx, nodes)}
}

func (_c *MockNodeManager_Startup_Call) Run(run func(ctx context.Context, nodes []*NodeInfo)) *MockNodeManager_Startup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*NodeInfo))
	})
	return _c
}

func (_c *MockNodeManager_Startup_Call) Return(_a0 error) *MockNodeManager_Startup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeManager_Startup_Call) RunAndReturn(run func(context.Context, []*NodeInfo) error) *MockNodeManager_Startup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeManager creates a new instance of MockNodeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeManager(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockNodeManager {
	mock := &MockNodeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
