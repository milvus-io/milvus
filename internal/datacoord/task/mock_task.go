// Code generated by mockery v2.53.3. DO NOT EDIT.

package task

import (
	indexpb "github.com/milvus-io/milvus/pkg/v2/proto/indexpb"
	mock "github.com/stretchr/testify/mock"

	session "github.com/milvus-io/milvus/internal/datacoord/session"

	taskcommon "github.com/milvus-io/milvus/pkg/v2/taskcommon"

	time "time"
)

// MockTask is an autogenerated mock type for the Task type
type MockTask struct {
	mock.Mock
}

type MockTask_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTask) EXPECT() *MockTask_Expecter {
	return &MockTask_Expecter{mock: &_m.Mock}
}

// CreateTaskOnWorker provides a mock function with given fields: nodeID, cluster
func (_m *MockTask) CreateTaskOnWorker(nodeID int64, cluster session.Cluster) {
	_m.Called(nodeID, cluster)
}

// MockTask_CreateTaskOnWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskOnWorker'
type MockTask_CreateTaskOnWorker_Call struct {
	*mock.Call
}

// CreateTaskOnWorker is a helper method to define mock.On call
//   - nodeID int64
//   - cluster session.Cluster
func (_e *MockTask_Expecter) CreateTaskOnWorker(nodeID interface{}, cluster interface{}) *MockTask_CreateTaskOnWorker_Call {
	return &MockTask_CreateTaskOnWorker_Call{Call: _e.mock.On("CreateTaskOnWorker", nodeID, cluster)}
}

func (_c *MockTask_CreateTaskOnWorker_Call) Run(run func(nodeID int64, cluster session.Cluster)) *MockTask_CreateTaskOnWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(session.Cluster))
	})
	return _c
}

func (_c *MockTask_CreateTaskOnWorker_Call) Return() *MockTask_CreateTaskOnWorker_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTask_CreateTaskOnWorker_Call) RunAndReturn(run func(int64, session.Cluster)) *MockTask_CreateTaskOnWorker_Call {
	_c.Run(run)
	return _c
}

// DropTaskOnWorker provides a mock function with given fields: cluster
func (_m *MockTask) DropTaskOnWorker(cluster session.Cluster) {
	_m.Called(cluster)
}

// MockTask_DropTaskOnWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropTaskOnWorker'
type MockTask_DropTaskOnWorker_Call struct {
	*mock.Call
}

// DropTaskOnWorker is a helper method to define mock.On call
//   - cluster session.Cluster
func (_e *MockTask_Expecter) DropTaskOnWorker(cluster interface{}) *MockTask_DropTaskOnWorker_Call {
	return &MockTask_DropTaskOnWorker_Call{Call: _e.mock.On("DropTaskOnWorker", cluster)}
}

func (_c *MockTask_DropTaskOnWorker_Call) Run(run func(cluster session.Cluster)) *MockTask_DropTaskOnWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Cluster))
	})
	return _c
}

func (_c *MockTask_DropTaskOnWorker_Call) Return() *MockTask_DropTaskOnWorker_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTask_DropTaskOnWorker_Call) RunAndReturn(run func(session.Cluster)) *MockTask_DropTaskOnWorker_Call {
	_c.Run(run)
	return _c
}

// GetTaskID provides a mock function with no fields
func (_m *MockTask) GetTaskID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockTask_GetTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskID'
type MockTask_GetTaskID_Call struct {
	*mock.Call
}

// GetTaskID is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetTaskID() *MockTask_GetTaskID_Call {
	return &MockTask_GetTaskID_Call{Call: _e.mock.On("GetTaskID")}
}

func (_c *MockTask_GetTaskID_Call) Run(run func()) *MockTask_GetTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetTaskID_Call) Return(_a0 int64) *MockTask_GetTaskID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTaskID_Call) RunAndReturn(run func() int64) *MockTask_GetTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskSlot provides a mock function with no fields
func (_m *MockTask) GetTaskSlot() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskSlot")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockTask_GetTaskSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskSlot'
type MockTask_GetTaskSlot_Call struct {
	*mock.Call
}

// GetTaskSlot is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetTaskSlot() *MockTask_GetTaskSlot_Call {
	return &MockTask_GetTaskSlot_Call{Call: _e.mock.On("GetTaskSlot")}
}

func (_c *MockTask_GetTaskSlot_Call) Run(run func()) *MockTask_GetTaskSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetTaskSlot_Call) Return(_a0 int64) *MockTask_GetTaskSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTaskSlot_Call) RunAndReturn(run func() int64) *MockTask_GetTaskSlot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskState provides a mock function with no fields
func (_m *MockTask) GetTaskState() indexpb.JobState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskState")
	}

	var r0 indexpb.JobState
	if rf, ok := ret.Get(0).(func() indexpb.JobState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(indexpb.JobState)
	}

	return r0
}

// MockTask_GetTaskState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskState'
type MockTask_GetTaskState_Call struct {
	*mock.Call
}

// GetTaskState is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetTaskState() *MockTask_GetTaskState_Call {
	return &MockTask_GetTaskState_Call{Call: _e.mock.On("GetTaskState")}
}

func (_c *MockTask_GetTaskState_Call) Run(run func()) *MockTask_GetTaskState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetTaskState_Call) Return(_a0 indexpb.JobState) *MockTask_GetTaskState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTaskState_Call) RunAndReturn(run func() indexpb.JobState) *MockTask_GetTaskState_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskTime provides a mock function with given fields: timeType
func (_m *MockTask) GetTaskTime(timeType taskcommon.TimeType) time.Time {
	ret := _m.Called(timeType)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(taskcommon.TimeType) time.Time); ok {
		r0 = rf(timeType)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTask_GetTaskTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskTime'
type MockTask_GetTaskTime_Call struct {
	*mock.Call
}

// GetTaskTime is a helper method to define mock.On call
//   - timeType taskcommon.TimeType
func (_e *MockTask_Expecter) GetTaskTime(timeType interface{}) *MockTask_GetTaskTime_Call {
	return &MockTask_GetTaskTime_Call{Call: _e.mock.On("GetTaskTime", timeType)}
}

func (_c *MockTask_GetTaskTime_Call) Run(run func(timeType taskcommon.TimeType)) *MockTask_GetTaskTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(taskcommon.TimeType))
	})
	return _c
}

func (_c *MockTask_GetTaskTime_Call) Return(_a0 time.Time) *MockTask_GetTaskTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTaskTime_Call) RunAndReturn(run func(taskcommon.TimeType) time.Time) *MockTask_GetTaskTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskType provides a mock function with no fields
func (_m *MockTask) GetTaskType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTask_GetTaskType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskType'
type MockTask_GetTaskType_Call struct {
	*mock.Call
}

// GetTaskType is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetTaskType() *MockTask_GetTaskType_Call {
	return &MockTask_GetTaskType_Call{Call: _e.mock.On("GetTaskType")}
}

func (_c *MockTask_GetTaskType_Call) Run(run func()) *MockTask_GetTaskType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetTaskType_Call) Return(_a0 string) *MockTask_GetTaskType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTaskType_Call) RunAndReturn(run func() string) *MockTask_GetTaskType_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskVersion provides a mock function with no fields
func (_m *MockTask) GetTaskVersion() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskVersion")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockTask_GetTaskVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskVersion'
type MockTask_GetTaskVersion_Call struct {
	*mock.Call
}

// GetTaskVersion is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetTaskVersion() *MockTask_GetTaskVersion_Call {
	return &MockTask_GetTaskVersion_Call{Call: _e.mock.On("GetTaskVersion")}
}

func (_c *MockTask_GetTaskVersion_Call) Run(run func()) *MockTask_GetTaskVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetTaskVersion_Call) Return(_a0 int64) *MockTask_GetTaskVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTaskVersion_Call) RunAndReturn(run func() int64) *MockTask_GetTaskVersion_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTaskOnWorker provides a mock function with given fields: cluster
func (_m *MockTask) QueryTaskOnWorker(cluster session.Cluster) {
	_m.Called(cluster)
}

// MockTask_QueryTaskOnWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTaskOnWorker'
type MockTask_QueryTaskOnWorker_Call struct {
	*mock.Call
}

// QueryTaskOnWorker is a helper method to define mock.On call
//   - cluster session.Cluster
func (_e *MockTask_Expecter) QueryTaskOnWorker(cluster interface{}) *MockTask_QueryTaskOnWorker_Call {
	return &MockTask_QueryTaskOnWorker_Call{Call: _e.mock.On("QueryTaskOnWorker", cluster)}
}

func (_c *MockTask_QueryTaskOnWorker_Call) Run(run func(cluster session.Cluster)) *MockTask_QueryTaskOnWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Cluster))
	})
	return _c
}

func (_c *MockTask_QueryTaskOnWorker_Call) Return() *MockTask_QueryTaskOnWorker_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTask_QueryTaskOnWorker_Call) RunAndReturn(run func(session.Cluster)) *MockTask_QueryTaskOnWorker_Call {
	_c.Run(run)
	return _c
}

// SetTaskTime provides a mock function with given fields: timeType, _a1
func (_m *MockTask) SetTaskTime(timeType taskcommon.TimeType, _a1 time.Time) {
	_m.Called(timeType, _a1)
}

// MockTask_SetTaskTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTaskTime'
type MockTask_SetTaskTime_Call struct {
	*mock.Call
}

// SetTaskTime is a helper method to define mock.On call
//   - timeType taskcommon.TimeType
//   - _a1 time.Time
func (_e *MockTask_Expecter) SetTaskTime(timeType interface{}, _a1 interface{}) *MockTask_SetTaskTime_Call {
	return &MockTask_SetTaskTime_Call{Call: _e.mock.On("SetTaskTime", timeType, _a1)}
}

func (_c *MockTask_SetTaskTime_Call) Run(run func(timeType taskcommon.TimeType, _a1 time.Time)) *MockTask_SetTaskTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(taskcommon.TimeType), args[1].(time.Time))
	})
	return _c
}

func (_c *MockTask_SetTaskTime_Call) Return() *MockTask_SetTaskTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTask_SetTaskTime_Call) RunAndReturn(run func(taskcommon.TimeType, time.Time)) *MockTask_SetTaskTime_Call {
	_c.Run(run)
	return _c
}

// NewMockTask creates a new instance of MockTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTask {
	mock := &MockTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
