// Code generated by mockery v2.53.3. DO NOT EDIT.

package datacoord

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTrigger is an autogenerated mock type for the trigger type
type MockTrigger struct {
	mock.Mock
}

type MockTrigger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrigger) EXPECT() *MockTrigger_Expecter {
	return &MockTrigger_Expecter{mock: &_m.Mock}
}

// TriggerCompaction provides a mock function with given fields: ctx, signal
func (_m *MockTrigger) TriggerCompaction(ctx context.Context, signal *compactionSignal) (int64, error) {
	ret := _m.Called(ctx, signal)

	if len(ret) == 0 {
		panic("no return value specified for TriggerCompaction")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compactionSignal) (int64, error)); ok {
		return rf(ctx, signal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compactionSignal) int64); ok {
		r0 = rf(ctx, signal)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compactionSignal) error); ok {
		r1 = rf(ctx, signal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTrigger_TriggerCompaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerCompaction'
type MockTrigger_TriggerCompaction_Call struct {
	*mock.Call
}

// TriggerCompaction is a helper method to define mock.On call
//   - ctx context.Context
//   - signal *compactionSignal
func (_e *MockTrigger_Expecter) TriggerCompaction(ctx interface{}, signal interface{}) *MockTrigger_TriggerCompaction_Call {
	return &MockTrigger_TriggerCompaction_Call{Call: _e.mock.On("TriggerCompaction", ctx, signal)}
}

func (_c *MockTrigger_TriggerCompaction_Call) Run(run func(ctx context.Context, signal *compactionSignal)) *MockTrigger_TriggerCompaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compactionSignal))
	})
	return _c
}

func (_c *MockTrigger_TriggerCompaction_Call) Return(signalID int64, err error) *MockTrigger_TriggerCompaction_Call {
	_c.Call.Return(signalID, err)
	return _c
}

func (_c *MockTrigger_TriggerCompaction_Call) RunAndReturn(run func(context.Context, *compactionSignal) (int64, error)) *MockTrigger_TriggerCompaction_Call {
	_c.Call.Return(run)
	return _c
}

// start provides a mock function with no fields
func (_m *MockTrigger) start() {
	_m.Called()
}

// MockTrigger_start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'start'
type MockTrigger_start_Call struct {
	*mock.Call
}

// start is a helper method to define mock.On call
func (_e *MockTrigger_Expecter) start() *MockTrigger_start_Call {
	return &MockTrigger_start_Call{Call: _e.mock.On("start")}
}

func (_c *MockTrigger_start_Call) Run(run func()) *MockTrigger_start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrigger_start_Call) Return() *MockTrigger_start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrigger_start_Call) RunAndReturn(run func()) *MockTrigger_start_Call {
	_c.Run(run)
	return _c
}

// stop provides a mock function with no fields
func (_m *MockTrigger) stop() {
	_m.Called()
}

// MockTrigger_stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'stop'
type MockTrigger_stop_Call struct {
	*mock.Call
}

// stop is a helper method to define mock.On call
func (_e *MockTrigger_Expecter) stop() *MockTrigger_stop_Call {
	return &MockTrigger_stop_Call{Call: _e.mock.On("stop")}
}

func (_c *MockTrigger_stop_Call) Run(run func()) *MockTrigger_stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrigger_stop_Call) Return() *MockTrigger_stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrigger_stop_Call) RunAndReturn(run func()) *MockTrigger_stop_Call {
	_c.Run(run)
	return _c
}

// NewMockTrigger creates a new instance of MockTrigger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrigger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrigger {
	mock := &MockTrigger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
