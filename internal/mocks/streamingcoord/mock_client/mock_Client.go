// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_client

import (
	client "github.com/milvus-io/milvus/internal/streamingcoord/client"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Assignment provides a mock function with given fields:
func (_m *MockClient) Assignment() client.AssignmentService {
	ret := _m.Called()

	var r0 client.AssignmentService
	if rf, ok := ret.Get(0).(func() client.AssignmentService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.AssignmentService)
		}
	}

	return r0
}

// MockClient_Assignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assignment'
type MockClient_Assignment_Call struct {
	*mock.Call
}

// Assignment is a helper method to define mock.On call
func (_e *MockClient_Expecter) Assignment() *MockClient_Assignment_Call {
	return &MockClient_Assignment_Call{Call: _e.mock.On("Assignment")}
}

func (_c *MockClient_Assignment_Call) Run(run func()) *MockClient_Assignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Assignment_Call) Return(_a0 client.AssignmentService) *MockClient_Assignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Assignment_Call) RunAndReturn(run func() client.AssignmentService) *MockClient_Assignment_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockClient) Close() {
	_m.Called()
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return() *MockClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func()) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
