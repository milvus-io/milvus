// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_broadcaster

import (
	context "context"

	broadcaster "github.com/milvus-io/milvus/internal/streamingcoord/server/broadcaster"

	message "github.com/milvus-io/milvus/pkg/v2/streaming/util/message"

	mock "github.com/stretchr/testify/mock"
)

// MockBroadcaster is an autogenerated mock type for the Broadcaster type
type MockBroadcaster struct {
	mock.Mock
}

type MockBroadcaster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBroadcaster) EXPECT() *MockBroadcaster_Expecter {
	return &MockBroadcaster_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: ctx, msg
func (_m *MockBroadcaster) Ack(ctx context.Context, msg message.ImmutableMessage) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.ImmutableMessage) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroadcaster_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockBroadcaster_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - ctx context.Context
//   - msg message.ImmutableMessage
func (_e *MockBroadcaster_Expecter) Ack(ctx interface{}, msg interface{}) *MockBroadcaster_Ack_Call {
	return &MockBroadcaster_Ack_Call{Call: _e.mock.On("Ack", ctx, msg)}
}

func (_c *MockBroadcaster_Ack_Call) Run(run func(ctx context.Context, msg message.ImmutableMessage)) *MockBroadcaster_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.ImmutableMessage))
	})
	return _c
}

func (_c *MockBroadcaster_Ack_Call) Return(_a0 error) *MockBroadcaster_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroadcaster_Ack_Call) RunAndReturn(run func(context.Context, message.ImmutableMessage) error) *MockBroadcaster_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockBroadcaster) Close() {
	_m.Called()
}

// MockBroadcaster_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBroadcaster_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBroadcaster_Expecter) Close() *MockBroadcaster_Close_Call {
	return &MockBroadcaster_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBroadcaster_Close_Call) Run(run func()) *MockBroadcaster_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBroadcaster_Close_Call) Return() *MockBroadcaster_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBroadcaster_Close_Call) RunAndReturn(run func()) *MockBroadcaster_Close_Call {
	_c.Run(run)
	return _c
}

// LegacyAck provides a mock function with given fields: ctx, broadcastID, vchannel
func (_m *MockBroadcaster) LegacyAck(ctx context.Context, broadcastID uint64, vchannel string) error {
	ret := _m.Called(ctx, broadcastID, vchannel)

	if len(ret) == 0 {
		panic("no return value specified for LegacyAck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(ctx, broadcastID, vchannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroadcaster_LegacyAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LegacyAck'
type MockBroadcaster_LegacyAck_Call struct {
	*mock.Call
}

// LegacyAck is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcastID uint64
//   - vchannel string
func (_e *MockBroadcaster_Expecter) LegacyAck(ctx interface{}, broadcastID interface{}, vchannel interface{}) *MockBroadcaster_LegacyAck_Call {
	return &MockBroadcaster_LegacyAck_Call{Call: _e.mock.On("LegacyAck", ctx, broadcastID, vchannel)}
}

func (_c *MockBroadcaster_LegacyAck_Call) Run(run func(ctx context.Context, broadcastID uint64, vchannel string)) *MockBroadcaster_LegacyAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *MockBroadcaster_LegacyAck_Call) Return(_a0 error) *MockBroadcaster_LegacyAck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroadcaster_LegacyAck_Call) RunAndReturn(run func(context.Context, uint64, string) error) *MockBroadcaster_LegacyAck_Call {
	_c.Call.Return(run)
	return _c
}

// WithResourceKeys provides a mock function with given fields: ctx, resourceKeys
func (_m *MockBroadcaster) WithResourceKeys(ctx context.Context, resourceKeys ...message.ResourceKey) (broadcaster.BroadcastAPI, error) {
	_va := make([]interface{}, len(resourceKeys))
	for _i := range resourceKeys {
		_va[_i] = resourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithResourceKeys")
	}

	var r0 broadcaster.BroadcastAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...message.ResourceKey) (broadcaster.BroadcastAPI, error)); ok {
		return rf(ctx, resourceKeys...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...message.ResourceKey) broadcaster.BroadcastAPI); ok {
		r0 = rf(ctx, resourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(broadcaster.BroadcastAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...message.ResourceKey) error); ok {
		r1 = rf(ctx, resourceKeys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroadcaster_WithResourceKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithResourceKeys'
type MockBroadcaster_WithResourceKeys_Call struct {
	*mock.Call
}

// WithResourceKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceKeys ...message.ResourceKey
func (_e *MockBroadcaster_Expecter) WithResourceKeys(ctx interface{}, resourceKeys ...interface{}) *MockBroadcaster_WithResourceKeys_Call {
	return &MockBroadcaster_WithResourceKeys_Call{Call: _e.mock.On("WithResourceKeys",
		append([]interface{}{ctx}, resourceKeys...)...)}
}

func (_c *MockBroadcaster_WithResourceKeys_Call) Run(run func(ctx context.Context, resourceKeys ...message.ResourceKey)) *MockBroadcaster_WithResourceKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]message.ResourceKey, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(message.ResourceKey)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockBroadcaster_WithResourceKeys_Call) Return(_a0 broadcaster.BroadcastAPI, _a1 error) *MockBroadcaster_WithResourceKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroadcaster_WithResourceKeys_Call) RunAndReturn(run func(context.Context, ...message.ResourceKey) (broadcaster.BroadcastAPI, error)) *MockBroadcaster_WithResourceKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBroadcaster creates a new instance of MockBroadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBroadcaster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBroadcaster {
	mock := &MockBroadcaster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
