// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_discoverer

import (
	context "context"

	discoverer "github.com/milvus-io/milvus/internal/util/streamingutil/service/discoverer"
	mock "github.com/stretchr/testify/mock"
)

// MockDiscoverer is an autogenerated mock type for the Discoverer type
type MockDiscoverer struct {
	mock.Mock
}

type MockDiscoverer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscoverer) EXPECT() *MockDiscoverer_Expecter {
	return &MockDiscoverer_Expecter{mock: &_m.Mock}
}

// Discover provides a mock function with given fields: ctx, cb
func (_m *MockDiscoverer) Discover(ctx context.Context, cb func(discoverer.VersionedState) error) error {
	ret := _m.Called(ctx, cb)

	if len(ret) == 0 {
		panic("no return value specified for Discover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(discoverer.VersionedState) error) error); ok {
		r0 = rf(ctx, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscoverer_Discover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discover'
type MockDiscoverer_Discover_Call struct {
	*mock.Call
}

// Discover is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(discoverer.VersionedState) error
func (_e *MockDiscoverer_Expecter) Discover(ctx interface{}, cb interface{}) *MockDiscoverer_Discover_Call {
	return &MockDiscoverer_Discover_Call{Call: _e.mock.On("Discover", ctx, cb)}
}

func (_c *MockDiscoverer_Discover_Call) Run(run func(ctx context.Context, cb func(discoverer.VersionedState) error)) *MockDiscoverer_Discover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(discoverer.VersionedState) error))
	})
	return _c
}

func (_c *MockDiscoverer_Discover_Call) Return(_a0 error) *MockDiscoverer_Discover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoverer_Discover_Call) RunAndReturn(run func(context.Context, func(discoverer.VersionedState) error) error) *MockDiscoverer_Discover_Call {
	_c.Call.Return(run)
	return _c
}

// NewVersionedState provides a mock function with given fields:
func (_m *MockDiscoverer) NewVersionedState() discoverer.VersionedState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewVersionedState")
	}

	var r0 discoverer.VersionedState
	if rf, ok := ret.Get(0).(func() discoverer.VersionedState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(discoverer.VersionedState)
	}

	return r0
}

// MockDiscoverer_NewVersionedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewVersionedState'
type MockDiscoverer_NewVersionedState_Call struct {
	*mock.Call
}

// NewVersionedState is a helper method to define mock.On call
func (_e *MockDiscoverer_Expecter) NewVersionedState() *MockDiscoverer_NewVersionedState_Call {
	return &MockDiscoverer_NewVersionedState_Call{Call: _e.mock.On("NewVersionedState")}
}

func (_c *MockDiscoverer_NewVersionedState_Call) Run(run func()) *MockDiscoverer_NewVersionedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoverer_NewVersionedState_Call) Return(_a0 discoverer.VersionedState) *MockDiscoverer_NewVersionedState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscoverer_NewVersionedState_Call) RunAndReturn(run func() discoverer.VersionedState) *MockDiscoverer_NewVersionedState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscoverer creates a new instance of MockDiscoverer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscoverer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscoverer {
	mock := &MockDiscoverer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
