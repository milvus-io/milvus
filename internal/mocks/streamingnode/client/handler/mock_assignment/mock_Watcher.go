// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_assignment

import (
	context "context"

	types "github.com/milvus-io/milvus/pkg/streaming/util/types"
	mock "github.com/stretchr/testify/mock"
)

// MockWatcher is an autogenerated mock type for the Watcher type
type MockWatcher struct {
	mock.Mock
}

type MockWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcher) EXPECT() *MockWatcher_Expecter {
	return &MockWatcher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockWatcher) Close() {
	_m.Called()
}

// MockWatcher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWatcher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWatcher_Expecter) Close() *MockWatcher_Close_Call {
	return &MockWatcher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWatcher_Close_Call) Run(run func()) *MockWatcher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWatcher_Close_Call) Return() *MockWatcher_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWatcher_Close_Call) RunAndReturn(run func()) *MockWatcher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, channel
func (_m *MockWatcher) Get(ctx context.Context, channel string) *types.PChannelInfoAssigned {
	ret := _m.Called(ctx, channel)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.PChannelInfoAssigned
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.PChannelInfoAssigned); ok {
		r0 = rf(ctx, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PChannelInfoAssigned)
		}
	}

	return r0
}

// MockWatcher_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWatcher_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
func (_e *MockWatcher_Expecter) Get(ctx interface{}, channel interface{}) *MockWatcher_Get_Call {
	return &MockWatcher_Get_Call{Call: _e.mock.On("Get", ctx, channel)}
}

func (_c *MockWatcher_Get_Call) Run(run func(ctx context.Context, channel string)) *MockWatcher_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWatcher_Get_Call) Return(_a0 *types.PChannelInfoAssigned) *MockWatcher_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcher_Get_Call) RunAndReturn(run func(context.Context, string) *types.PChannelInfoAssigned) *MockWatcher_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, channel, previous
func (_m *MockWatcher) Watch(ctx context.Context, channel string, previous *types.PChannelInfoAssigned) error {
	ret := _m.Called(ctx, channel, previous)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.PChannelInfoAssigned) error); ok {
		r0 = rf(ctx, channel, previous)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockWatcher_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - previous *types.PChannelInfoAssigned
func (_e *MockWatcher_Expecter) Watch(ctx interface{}, channel interface{}, previous interface{}) *MockWatcher_Watch_Call {
	return &MockWatcher_Watch_Call{Call: _e.mock.On("Watch", ctx, channel, previous)}
}

func (_c *MockWatcher_Watch_Call) Run(run func(ctx context.Context, channel string, previous *types.PChannelInfoAssigned)) *MockWatcher_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*types.PChannelInfoAssigned))
	})
	return _c
}

func (_c *MockWatcher_Watch_Call) Return(_a0 error) *MockWatcher_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcher_Watch_Call) RunAndReturn(run func(context.Context, string, *types.PChannelInfoAssigned) error) *MockWatcher_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatcher creates a new instance of MockWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcher {
	mock := &MockWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
