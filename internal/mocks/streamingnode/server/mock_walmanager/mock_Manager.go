// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_walmanager

import (
	context "context"

	types "github.com/milvus-io/milvus/pkg/streaming/util/types"
	mock "github.com/stretchr/testify/mock"

	wal "github.com/milvus-io/milvus/internal/streamingnode/server/wal"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockManager) Close() {
	_m.Called()
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return() *MockManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func()) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAvailableChannels provides a mock function with given fields:
func (_m *MockManager) GetAllAvailableChannels() ([]types.PChannelInfo, error) {
	ret := _m.Called()

	var r0 []types.PChannelInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.PChannelInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.PChannelInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PChannelInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetAllAvailableChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAvailableChannels'
type MockManager_GetAllAvailableChannels_Call struct {
	*mock.Call
}

// GetAllAvailableChannels is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetAllAvailableChannels() *MockManager_GetAllAvailableChannels_Call {
	return &MockManager_GetAllAvailableChannels_Call{Call: _e.mock.On("GetAllAvailableChannels")}
}

func (_c *MockManager_GetAllAvailableChannels_Call) Run(run func()) *MockManager_GetAllAvailableChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetAllAvailableChannels_Call) Return(_a0 []types.PChannelInfo, _a1 error) *MockManager_GetAllAvailableChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetAllAvailableChannels_Call) RunAndReturn(run func() ([]types.PChannelInfo, error)) *MockManager_GetAllAvailableChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableWAL provides a mock function with given fields: channel
func (_m *MockManager) GetAvailableWAL(channel types.PChannelInfo) (wal.WAL, error) {
	ret := _m.Called(channel)

	var r0 wal.WAL
	var r1 error
	if rf, ok := ret.Get(0).(func(types.PChannelInfo) (wal.WAL, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(types.PChannelInfo) wal.WAL); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wal.WAL)
		}
	}

	if rf, ok := ret.Get(1).(func(types.PChannelInfo) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetAvailableWAL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableWAL'
type MockManager_GetAvailableWAL_Call struct {
	*mock.Call
}

// GetAvailableWAL is a helper method to define mock.On call
//   - channel types.PChannelInfo
func (_e *MockManager_Expecter) GetAvailableWAL(channel interface{}) *MockManager_GetAvailableWAL_Call {
	return &MockManager_GetAvailableWAL_Call{Call: _e.mock.On("GetAvailableWAL", channel)}
}

func (_c *MockManager_GetAvailableWAL_Call) Run(run func(channel types.PChannelInfo)) *MockManager_GetAvailableWAL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.PChannelInfo))
	})
	return _c
}

func (_c *MockManager_GetAvailableWAL_Call) Return(_a0 wal.WAL, _a1 error) *MockManager_GetAvailableWAL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetAvailableWAL_Call) RunAndReturn(run func(types.PChannelInfo) (wal.WAL, error)) *MockManager_GetAvailableWAL_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx, channel
func (_m *MockManager) Open(ctx context.Context, channel types.PChannelInfo) error {
	ret := _m.Called(ctx, channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PChannelInfo) error); ok {
		r0 = rf(ctx, channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockManager_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
//   - channel types.PChannelInfo
func (_e *MockManager_Expecter) Open(ctx interface{}, channel interface{}) *MockManager_Open_Call {
	return &MockManager_Open_Call{Call: _e.mock.On("Open", ctx, channel)}
}

func (_c *MockManager_Open_Call) Run(run func(ctx context.Context, channel types.PChannelInfo)) *MockManager_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PChannelInfo))
	})
	return _c
}

func (_c *MockManager_Open_Call) Return(_a0 error) *MockManager_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Open_Call) RunAndReturn(run func(context.Context, types.PChannelInfo) error) *MockManager_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, channel
func (_m *MockManager) Remove(ctx context.Context, channel types.PChannelInfo) error {
	ret := _m.Called(ctx, channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PChannelInfo) error); ok {
		r0 = rf(ctx, channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - channel types.PChannelInfo
func (_e *MockManager_Expecter) Remove(ctx interface{}, channel interface{}) *MockManager_Remove_Call {
	return &MockManager_Remove_Call{Call: _e.mock.On("Remove", ctx, channel)}
}

func (_c *MockManager_Remove_Call) Run(run func(ctx context.Context, channel types.PChannelInfo)) *MockManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PChannelInfo))
	})
	return _c
}

func (_c *MockManager_Remove_Call) Return(_a0 error) *MockManager_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Remove_Call) RunAndReturn(run func(context.Context, types.PChannelInfo) error) *MockManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
