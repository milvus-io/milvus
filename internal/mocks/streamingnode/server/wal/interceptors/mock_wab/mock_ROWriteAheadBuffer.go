// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_wab

import (
	context "context"

	wab "github.com/milvus-io/milvus/internal/streamingnode/server/wal/interceptors/wab"
	mock "github.com/stretchr/testify/mock"
)

// MockROWriteAheadBuffer is an autogenerated mock type for the ROWriteAheadBuffer type
type MockROWriteAheadBuffer struct {
	mock.Mock
}

type MockROWriteAheadBuffer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockROWriteAheadBuffer) EXPECT() *MockROWriteAheadBuffer_Expecter {
	return &MockROWriteAheadBuffer_Expecter{mock: &_m.Mock}
}

// ReadFromExclusiveTimeTick provides a mock function with given fields: ctx, timetick
func (_m *MockROWriteAheadBuffer) ReadFromExclusiveTimeTick(ctx context.Context, timetick uint64) (*wab.WriteAheadBufferReader, error) {
	ret := _m.Called(ctx, timetick)

	if len(ret) == 0 {
		panic("no return value specified for ReadFromExclusiveTimeTick")
	}

	var r0 *wab.WriteAheadBufferReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*wab.WriteAheadBufferReader, error)); ok {
		return rf(ctx, timetick)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *wab.WriteAheadBufferReader); ok {
		r0 = rf(ctx, timetick)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wab.WriteAheadBufferReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, timetick)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFromExclusiveTimeTick'
type MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call struct {
	*mock.Call
}

// ReadFromExclusiveTimeTick is a helper method to define mock.On call
//   - ctx context.Context
//   - timetick uint64
func (_e *MockROWriteAheadBuffer_Expecter) ReadFromExclusiveTimeTick(ctx interface{}, timetick interface{}) *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call {
	return &MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call{Call: _e.mock.On("ReadFromExclusiveTimeTick", ctx, timetick)}
}

func (_c *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call) Run(run func(ctx context.Context, timetick uint64)) *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call) Return(_a0 *wab.WriteAheadBufferReader, _a1 error) *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call) RunAndReturn(run func(context.Context, uint64) (*wab.WriteAheadBufferReader, error)) *MockROWriteAheadBuffer_ReadFromExclusiveTimeTick_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockROWriteAheadBuffer creates a new instance of MockROWriteAheadBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockROWriteAheadBuffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockROWriteAheadBuffer {
	mock := &MockROWriteAheadBuffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
