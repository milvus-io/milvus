// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_replicates

import mock "github.com/stretchr/testify/mock"

// MockReplicateAcker is an autogenerated mock type for the ReplicateAcker type
type MockReplicateAcker struct {
	mock.Mock
}

type MockReplicateAcker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicateAcker) EXPECT() *MockReplicateAcker_Expecter {
	return &MockReplicateAcker_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: err
func (_m *MockReplicateAcker) Ack(err error) {
	_m.Called(err)
}

// MockReplicateAcker_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockReplicateAcker_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - err error
func (_e *MockReplicateAcker_Expecter) Ack(err interface{}) *MockReplicateAcker_Ack_Call {
	return &MockReplicateAcker_Ack_Call{Call: _e.mock.On("Ack", err)}
}

func (_c *MockReplicateAcker_Ack_Call) Run(run func(err error)) *MockReplicateAcker_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockReplicateAcker_Ack_Call) Return() *MockReplicateAcker_Ack_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReplicateAcker_Ack_Call) RunAndReturn(run func(error)) *MockReplicateAcker_Ack_Call {
	_c.Run(run)
	return _c
}

// NewMockReplicateAcker creates a new instance of MockReplicateAcker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicateAcker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicateAcker {
	mock := &MockReplicateAcker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
