// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_inspector

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mvcc "github.com/milvus-io/milvus/internal/streamingnode/server/wal/interceptors/timetick/mvcc"

	types "github.com/milvus-io/milvus/pkg/v2/streaming/util/types"

	wab "github.com/milvus-io/milvus/internal/streamingnode/server/wal/interceptors/wab"
)

// MockTimeTickSyncOperator is an autogenerated mock type for the TimeTickSyncOperator type
type MockTimeTickSyncOperator struct {
	mock.Mock
}

type MockTimeTickSyncOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeTickSyncOperator) EXPECT() *MockTimeTickSyncOperator_Expecter {
	return &MockTimeTickSyncOperator_Expecter{mock: &_m.Mock}
}

// Channel provides a mock function with no fields
func (_m *MockTimeTickSyncOperator) Channel() types.PChannelInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 types.PChannelInfo
	if rf, ok := ret.Get(0).(func() types.PChannelInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.PChannelInfo)
	}

	return r0
}

// MockTimeTickSyncOperator_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type MockTimeTickSyncOperator_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
func (_e *MockTimeTickSyncOperator_Expecter) Channel() *MockTimeTickSyncOperator_Channel_Call {
	return &MockTimeTickSyncOperator_Channel_Call{Call: _e.mock.On("Channel")}
}

func (_c *MockTimeTickSyncOperator_Channel_Call) Run(run func()) *MockTimeTickSyncOperator_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeTickSyncOperator_Channel_Call) Return(_a0 types.PChannelInfo) *MockTimeTickSyncOperator_Channel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeTickSyncOperator_Channel_Call) RunAndReturn(run func() types.PChannelInfo) *MockTimeTickSyncOperator_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// MVCCManager provides a mock function with no fields
func (_m *MockTimeTickSyncOperator) MVCCManager() *mvcc.MVCCManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MVCCManager")
	}

	var r0 *mvcc.MVCCManager
	if rf, ok := ret.Get(0).(func() *mvcc.MVCCManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mvcc.MVCCManager)
		}
	}

	return r0
}

// MockTimeTickSyncOperator_MVCCManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MVCCManager'
type MockTimeTickSyncOperator_MVCCManager_Call struct {
	*mock.Call
}

// MVCCManager is a helper method to define mock.On call
func (_e *MockTimeTickSyncOperator_Expecter) MVCCManager() *MockTimeTickSyncOperator_MVCCManager_Call {
	return &MockTimeTickSyncOperator_MVCCManager_Call{Call: _e.mock.On("MVCCManager")}
}

func (_c *MockTimeTickSyncOperator_MVCCManager_Call) Run(run func()) *MockTimeTickSyncOperator_MVCCManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeTickSyncOperator_MVCCManager_Call) Return(_a0 *mvcc.MVCCManager) *MockTimeTickSyncOperator_MVCCManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeTickSyncOperator_MVCCManager_Call) RunAndReturn(run func() *mvcc.MVCCManager) *MockTimeTickSyncOperator_MVCCManager_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx, forcePersisted
func (_m *MockTimeTickSyncOperator) Sync(ctx context.Context, forcePersisted bool) {
	_m.Called(ctx, forcePersisted)
}

// MockTimeTickSyncOperator_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockTimeTickSyncOperator_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
//   - forcePersisted bool
func (_e *MockTimeTickSyncOperator_Expecter) Sync(ctx interface{}, forcePersisted interface{}) *MockTimeTickSyncOperator_Sync_Call {
	return &MockTimeTickSyncOperator_Sync_Call{Call: _e.mock.On("Sync", ctx, forcePersisted)}
}

func (_c *MockTimeTickSyncOperator_Sync_Call) Run(run func(ctx context.Context, forcePersisted bool)) *MockTimeTickSyncOperator_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockTimeTickSyncOperator_Sync_Call) Return() *MockTimeTickSyncOperator_Sync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeTickSyncOperator_Sync_Call) RunAndReturn(run func(context.Context, bool)) *MockTimeTickSyncOperator_Sync_Call {
	_c.Run(run)
	return _c
}

// WriteAheadBuffer provides a mock function with no fields
func (_m *MockTimeTickSyncOperator) WriteAheadBuffer() wab.ROWriteAheadBuffer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WriteAheadBuffer")
	}

	var r0 wab.ROWriteAheadBuffer
	if rf, ok := ret.Get(0).(func() wab.ROWriteAheadBuffer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wab.ROWriteAheadBuffer)
		}
	}

	return r0
}

// MockTimeTickSyncOperator_WriteAheadBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAheadBuffer'
type MockTimeTickSyncOperator_WriteAheadBuffer_Call struct {
	*mock.Call
}

// WriteAheadBuffer is a helper method to define mock.On call
func (_e *MockTimeTickSyncOperator_Expecter) WriteAheadBuffer() *MockTimeTickSyncOperator_WriteAheadBuffer_Call {
	return &MockTimeTickSyncOperator_WriteAheadBuffer_Call{Call: _e.mock.On("WriteAheadBuffer")}
}

func (_c *MockTimeTickSyncOperator_WriteAheadBuffer_Call) Run(run func()) *MockTimeTickSyncOperator_WriteAheadBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeTickSyncOperator_WriteAheadBuffer_Call) Return(_a0 wab.ROWriteAheadBuffer) *MockTimeTickSyncOperator_WriteAheadBuffer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeTickSyncOperator_WriteAheadBuffer_Call) RunAndReturn(run func() wab.ROWriteAheadBuffer) *MockTimeTickSyncOperator_WriteAheadBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeTickSyncOperator creates a new instance of MockTimeTickSyncOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeTickSyncOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeTickSyncOperator {
	mock := &MockTimeTickSyncOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
