// Code generated by mockery v2.32.4. DO NOT EDIT.

package mock_streaming

import (
	context "context"

	message "github.com/milvus-io/milvus/pkg/streaming/util/message"
	mock "github.com/stretchr/testify/mock"

	streaming "github.com/milvus-io/milvus/internal/distributed/streaming"
)

// MockWALAccesser is an autogenerated mock type for the WALAccesser type
type MockWALAccesser struct {
	mock.Mock
}

type MockWALAccesser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWALAccesser) EXPECT() *MockWALAccesser_Expecter {
	return &MockWALAccesser_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: ctx, msgs
func (_m *MockWALAccesser) Append(ctx context.Context, msgs ...message.MutableMessage) streaming.AppendResponses {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 streaming.AppendResponses
	if rf, ok := ret.Get(0).(func(context.Context, ...message.MutableMessage) streaming.AppendResponses); ok {
		r0 = rf(ctx, msgs...)
	} else {
		r0 = ret.Get(0).(streaming.AppendResponses)
	}

	return r0
}

// MockWALAccesser_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockWALAccesser_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//  - ctx context.Context
//  - msgs ...message.MutableMessage
func (_e *MockWALAccesser_Expecter) Append(ctx interface{}, msgs ...interface{}) *MockWALAccesser_Append_Call {
	return &MockWALAccesser_Append_Call{Call: _e.mock.On("Append",
		append([]interface{}{ctx}, msgs...)...)}
}

func (_c *MockWALAccesser_Append_Call) Run(run func(ctx context.Context, msgs ...message.MutableMessage)) *MockWALAccesser_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]message.MutableMessage, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(message.MutableMessage)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockWALAccesser_Append_Call) Return(_a0 streaming.AppendResponses) *MockWALAccesser_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWALAccesser_Append_Call) RunAndReturn(run func(context.Context, ...message.MutableMessage) streaming.AppendResponses) *MockWALAccesser_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, opts
func (_m *MockWALAccesser) Read(ctx context.Context, opts streaming.ReadOption) streaming.Scanner {
	ret := _m.Called(ctx, opts)

	var r0 streaming.Scanner
	if rf, ok := ret.Get(0).(func(context.Context, streaming.ReadOption) streaming.Scanner); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(streaming.Scanner)
		}
	}

	return r0
}

// MockWALAccesser_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockWALAccesser_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//  - ctx context.Context
//  - opts streaming.ReadOption
func (_e *MockWALAccesser_Expecter) Read(ctx interface{}, opts interface{}) *MockWALAccesser_Read_Call {
	return &MockWALAccesser_Read_Call{Call: _e.mock.On("Read", ctx, opts)}
}

func (_c *MockWALAccesser_Read_Call) Run(run func(ctx context.Context, opts streaming.ReadOption)) *MockWALAccesser_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(streaming.ReadOption))
	})
	return _c
}

func (_c *MockWALAccesser_Read_Call) Return(_a0 streaming.Scanner) *MockWALAccesser_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWALAccesser_Read_Call) RunAndReturn(run func(context.Context, streaming.ReadOption) streaming.Scanner) *MockWALAccesser_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWALAccesser creates a new instance of MockWALAccesser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWALAccesser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWALAccesser {
	mock := &MockWALAccesser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
