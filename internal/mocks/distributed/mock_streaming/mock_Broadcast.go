// Code generated by mockery v2.46.0. DO NOT EDIT.

package mock_streaming

import (
	context "context"

	message "github.com/milvus-io/milvus/pkg/v2/streaming/util/message"
	mock "github.com/stretchr/testify/mock"

	types "github.com/milvus-io/milvus/pkg/v2/streaming/util/types"
)

// MockBroadcast is an autogenerated mock type for the Broadcast type
type MockBroadcast struct {
	mock.Mock
}

type MockBroadcast_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBroadcast) EXPECT() *MockBroadcast_Expecter {
	return &MockBroadcast_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: ctx, req
func (_m *MockBroadcast) Ack(ctx context.Context, req types.BroadcastAckRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.BroadcastAckRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroadcast_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockBroadcast_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.BroadcastAckRequest
func (_e *MockBroadcast_Expecter) Ack(ctx interface{}, req interface{}) *MockBroadcast_Ack_Call {
	return &MockBroadcast_Ack_Call{Call: _e.mock.On("Ack", ctx, req)}
}

func (_c *MockBroadcast_Ack_Call) Run(run func(ctx context.Context, req types.BroadcastAckRequest)) *MockBroadcast_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.BroadcastAckRequest))
	})
	return _c
}

func (_c *MockBroadcast_Ack_Call) Return(_a0 error) *MockBroadcast_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroadcast_Ack_Call) RunAndReturn(run func(context.Context, types.BroadcastAckRequest) error) *MockBroadcast_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Append provides a mock function with given fields: ctx, msg
func (_m *MockBroadcast) Append(ctx context.Context, msg message.BroadcastMutableMessage) (*types.BroadcastAppendResult, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 *types.BroadcastAppendResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, message.BroadcastMutableMessage) (*types.BroadcastAppendResult, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, message.BroadcastMutableMessage) *types.BroadcastAppendResult); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BroadcastAppendResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, message.BroadcastMutableMessage) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroadcast_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockBroadcast_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - ctx context.Context
//   - msg message.BroadcastMutableMessage
func (_e *MockBroadcast_Expecter) Append(ctx interface{}, msg interface{}) *MockBroadcast_Append_Call {
	return &MockBroadcast_Append_Call{Call: _e.mock.On("Append", ctx, msg)}
}

func (_c *MockBroadcast_Append_Call) Run(run func(ctx context.Context, msg message.BroadcastMutableMessage)) *MockBroadcast_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.BroadcastMutableMessage))
	})
	return _c
}

func (_c *MockBroadcast_Append_Call) Return(_a0 *types.BroadcastAppendResult, _a1 error) *MockBroadcast_Append_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroadcast_Append_Call) RunAndReturn(run func(context.Context, message.BroadcastMutableMessage) (*types.BroadcastAppendResult, error)) *MockBroadcast_Append_Call {
	_c.Call.Return(run)
	return _c
}

// BlockUntilResourceKeyAckAll provides a mock function with given fields: ctx, rk
func (_m *MockBroadcast) BlockUntilResourceKeyAckAll(ctx context.Context, rk message.ResourceKey) error {
	ret := _m.Called(ctx, rk)

	if len(ret) == 0 {
		panic("no return value specified for BlockUntilResourceKeyAckAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.ResourceKey) error); ok {
		r0 = rf(ctx, rk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroadcast_BlockUntilResourceKeyAckAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockUntilResourceKeyAckAll'
type MockBroadcast_BlockUntilResourceKeyAckAll_Call struct {
	*mock.Call
}

// BlockUntilResourceKeyAckAll is a helper method to define mock.On call
//   - ctx context.Context
//   - rk message.ResourceKey
func (_e *MockBroadcast_Expecter) BlockUntilResourceKeyAckAll(ctx interface{}, rk interface{}) *MockBroadcast_BlockUntilResourceKeyAckAll_Call {
	return &MockBroadcast_BlockUntilResourceKeyAckAll_Call{Call: _e.mock.On("BlockUntilResourceKeyAckAll", ctx, rk)}
}

func (_c *MockBroadcast_BlockUntilResourceKeyAckAll_Call) Run(run func(ctx context.Context, rk message.ResourceKey)) *MockBroadcast_BlockUntilResourceKeyAckAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.ResourceKey))
	})
	return _c
}

func (_c *MockBroadcast_BlockUntilResourceKeyAckAll_Call) Return(_a0 error) *MockBroadcast_BlockUntilResourceKeyAckAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroadcast_BlockUntilResourceKeyAckAll_Call) RunAndReturn(run func(context.Context, message.ResourceKey) error) *MockBroadcast_BlockUntilResourceKeyAckAll_Call {
	_c.Call.Return(run)
	return _c
}

// BlockUntilResourceKeyAckOnce provides a mock function with given fields: ctx, rk
func (_m *MockBroadcast) BlockUntilResourceKeyAckOnce(ctx context.Context, rk message.ResourceKey) error {
	ret := _m.Called(ctx, rk)

	if len(ret) == 0 {
		panic("no return value specified for BlockUntilResourceKeyAckOnce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.ResourceKey) error); ok {
		r0 = rf(ctx, rk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroadcast_BlockUntilResourceKeyAckOnce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockUntilResourceKeyAckOnce'
type MockBroadcast_BlockUntilResourceKeyAckOnce_Call struct {
	*mock.Call
}

// BlockUntilResourceKeyAckOnce is a helper method to define mock.On call
//   - ctx context.Context
//   - rk message.ResourceKey
func (_e *MockBroadcast_Expecter) BlockUntilResourceKeyAckOnce(ctx interface{}, rk interface{}) *MockBroadcast_BlockUntilResourceKeyAckOnce_Call {
	return &MockBroadcast_BlockUntilResourceKeyAckOnce_Call{Call: _e.mock.On("BlockUntilResourceKeyAckOnce", ctx, rk)}
}

func (_c *MockBroadcast_BlockUntilResourceKeyAckOnce_Call) Run(run func(ctx context.Context, rk message.ResourceKey)) *MockBroadcast_BlockUntilResourceKeyAckOnce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.ResourceKey))
	})
	return _c
}

func (_c *MockBroadcast_BlockUntilResourceKeyAckOnce_Call) Return(_a0 error) *MockBroadcast_BlockUntilResourceKeyAckOnce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroadcast_BlockUntilResourceKeyAckOnce_Call) RunAndReturn(run func(context.Context, message.ResourceKey) error) *MockBroadcast_BlockUntilResourceKeyAckOnce_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBroadcast creates a new instance of MockBroadcast. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBroadcast(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBroadcast {
	mock := &MockBroadcast{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
