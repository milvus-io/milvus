// Code generated by mockery v2.46.0. DO NOT EDIT.

package meta

import (
	metricsinfo "github.com/milvus-io/milvus/pkg/v2/util/metricsinfo"
	mock "github.com/stretchr/testify/mock"
)

// MockChannelDistManager is an autogenerated mock type for the ChannelDistManagerInterface type
type MockChannelDistManager struct {
	mock.Mock
}

type MockChannelDistManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelDistManager) EXPECT() *MockChannelDistManager_Expecter {
	return &MockChannelDistManager_Expecter{mock: &_m.Mock}
}

// GetByCollectionAndFilter provides a mock function with given fields: collectionID, filters
func (_m *MockChannelDistManager) GetByCollectionAndFilter(collectionID int64, filters ...ChannelDistFilter) []*DmChannel {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, collectionID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByCollectionAndFilter")
	}

	var r0 []*DmChannel
	if rf, ok := ret.Get(0).(func(int64, ...ChannelDistFilter) []*DmChannel); ok {
		r0 = rf(collectionID, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DmChannel)
		}
	}

	return r0
}

// MockChannelDistManager_GetByCollectionAndFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCollectionAndFilter'
type MockChannelDistManager_GetByCollectionAndFilter_Call struct {
	*mock.Call
}

// GetByCollectionAndFilter is a helper method to define mock.On call
//   - collectionID int64
//   - filters ...ChannelDistFilter
func (_e *MockChannelDistManager_Expecter) GetByCollectionAndFilter(collectionID interface{}, filters ...interface{}) *MockChannelDistManager_GetByCollectionAndFilter_Call {
	return &MockChannelDistManager_GetByCollectionAndFilter_Call{Call: _e.mock.On("GetByCollectionAndFilter",
		append([]interface{}{collectionID}, filters...)...)}
}

func (_c *MockChannelDistManager_GetByCollectionAndFilter_Call) Run(run func(collectionID int64, filters ...ChannelDistFilter)) *MockChannelDistManager_GetByCollectionAndFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ChannelDistFilter, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(ChannelDistFilter)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockChannelDistManager_GetByCollectionAndFilter_Call) Return(_a0 []*DmChannel) *MockChannelDistManager_GetByCollectionAndFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelDistManager_GetByCollectionAndFilter_Call) RunAndReturn(run func(int64, ...ChannelDistFilter) []*DmChannel) *MockChannelDistManager_GetByCollectionAndFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function with given fields: filters
func (_m *MockChannelDistManager) GetByFilter(filters ...ChannelDistFilter) []*DmChannel {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []*DmChannel
	if rf, ok := ret.Get(0).(func(...ChannelDistFilter) []*DmChannel); ok {
		r0 = rf(filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DmChannel)
		}
	}

	return r0
}

// MockChannelDistManager_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type MockChannelDistManager_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - filters ...ChannelDistFilter
func (_e *MockChannelDistManager_Expecter) GetByFilter(filters ...interface{}) *MockChannelDistManager_GetByFilter_Call {
	return &MockChannelDistManager_GetByFilter_Call{Call: _e.mock.On("GetByFilter",
		append([]interface{}{}, filters...)...)}
}

func (_c *MockChannelDistManager_GetByFilter_Call) Run(run func(filters ...ChannelDistFilter)) *MockChannelDistManager_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ChannelDistFilter, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(ChannelDistFilter)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockChannelDistManager_GetByFilter_Call) Return(_a0 []*DmChannel) *MockChannelDistManager_GetByFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelDistManager_GetByFilter_Call) RunAndReturn(run func(...ChannelDistFilter) []*DmChannel) *MockChannelDistManager_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelDist provides a mock function with given fields: collectionID
func (_m *MockChannelDistManager) GetChannelDist(collectionID int64) []*metricsinfo.DmChannel {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelDist")
	}

	var r0 []*metricsinfo.DmChannel
	if rf, ok := ret.Get(0).(func(int64) []*metricsinfo.DmChannel); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metricsinfo.DmChannel)
		}
	}

	return r0
}

// MockChannelDistManager_GetChannelDist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelDist'
type MockChannelDistManager_GetChannelDist_Call struct {
	*mock.Call
}

// GetChannelDist is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockChannelDistManager_Expecter) GetChannelDist(collectionID interface{}) *MockChannelDistManager_GetChannelDist_Call {
	return &MockChannelDistManager_GetChannelDist_Call{Call: _e.mock.On("GetChannelDist", collectionID)}
}

func (_c *MockChannelDistManager_GetChannelDist_Call) Run(run func(collectionID int64)) *MockChannelDistManager_GetChannelDist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockChannelDistManager_GetChannelDist_Call) Return(_a0 []*metricsinfo.DmChannel) *MockChannelDistManager_GetChannelDist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelDistManager_GetChannelDist_Call) RunAndReturn(run func(int64) []*metricsinfo.DmChannel) *MockChannelDistManager_GetChannelDist_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderView provides a mock function with given fields: collectionID
func (_m *MockChannelDistManager) GetLeaderView(collectionID int64) []*metricsinfo.LeaderView {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderView")
	}

	var r0 []*metricsinfo.LeaderView
	if rf, ok := ret.Get(0).(func(int64) []*metricsinfo.LeaderView); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metricsinfo.LeaderView)
		}
	}

	return r0
}

// MockChannelDistManager_GetLeaderView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderView'
type MockChannelDistManager_GetLeaderView_Call struct {
	*mock.Call
}

// GetLeaderView is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockChannelDistManager_Expecter) GetLeaderView(collectionID interface{}) *MockChannelDistManager_GetLeaderView_Call {
	return &MockChannelDistManager_GetLeaderView_Call{Call: _e.mock.On("GetLeaderView", collectionID)}
}

func (_c *MockChannelDistManager_GetLeaderView_Call) Run(run func(collectionID int64)) *MockChannelDistManager_GetLeaderView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockChannelDistManager_GetLeaderView_Call) Return(_a0 []*metricsinfo.LeaderView) *MockChannelDistManager_GetLeaderView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelDistManager_GetLeaderView_Call) RunAndReturn(run func(int64) []*metricsinfo.LeaderView) *MockChannelDistManager_GetLeaderView_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardLeader provides a mock function with given fields: channelName, replica
func (_m *MockChannelDistManager) GetShardLeader(channelName string, replica *Replica) *DmChannel {
	ret := _m.Called(channelName, replica)

	if len(ret) == 0 {
		panic("no return value specified for GetShardLeader")
	}

	var r0 *DmChannel
	if rf, ok := ret.Get(0).(func(string, *Replica) *DmChannel); ok {
		r0 = rf(channelName, replica)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DmChannel)
		}
	}

	return r0
}

// MockChannelDistManager_GetShardLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardLeader'
type MockChannelDistManager_GetShardLeader_Call struct {
	*mock.Call
}

// GetShardLeader is a helper method to define mock.On call
//   - channelName string
//   - replica *Replica
func (_e *MockChannelDistManager_Expecter) GetShardLeader(channelName interface{}, replica interface{}) *MockChannelDistManager_GetShardLeader_Call {
	return &MockChannelDistManager_GetShardLeader_Call{Call: _e.mock.On("GetShardLeader", channelName, replica)}
}

func (_c *MockChannelDistManager_GetShardLeader_Call) Run(run func(channelName string, replica *Replica)) *MockChannelDistManager_GetShardLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*Replica))
	})
	return _c
}

func (_c *MockChannelDistManager_GetShardLeader_Call) Return(_a0 *DmChannel) *MockChannelDistManager_GetShardLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelDistManager_GetShardLeader_Call) RunAndReturn(run func(string, *Replica) *DmChannel) *MockChannelDistManager_GetShardLeader_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: nodeID, channels
func (_m *MockChannelDistManager) Update(nodeID int64, channels ...*DmChannel) []*DmChannel {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, nodeID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 []*DmChannel
	if rf, ok := ret.Get(0).(func(int64, ...*DmChannel) []*DmChannel); ok {
		r0 = rf(nodeID, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DmChannel)
		}
	}

	return r0
}

// MockChannelDistManager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockChannelDistManager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - nodeID int64
//   - channels ...*DmChannel
func (_e *MockChannelDistManager_Expecter) Update(nodeID interface{}, channels ...interface{}) *MockChannelDistManager_Update_Call {
	return &MockChannelDistManager_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{nodeID}, channels...)...)}
}

func (_c *MockChannelDistManager_Update_Call) Run(run func(nodeID int64, channels ...*DmChannel)) *MockChannelDistManager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*DmChannel, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*DmChannel)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockChannelDistManager_Update_Call) Return(_a0 []*DmChannel) *MockChannelDistManager_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelDistManager_Update_Call) RunAndReturn(run func(int64, ...*DmChannel) []*DmChannel) *MockChannelDistManager_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannelDistManager creates a new instance of MockChannelDistManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelDistManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelDistManager {
	mock := &MockChannelDistManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
