// Code generated by mockery v2.46.0. DO NOT EDIT.

package meta

import (
	context "context"

	typeutil "github.com/milvus-io/milvus/pkg/v2/util/typeutil"
	mock "github.com/stretchr/testify/mock"
)

// MockReplicaManager is an autogenerated mock type for the ReplicaManagerInterface type
type MockReplicaManager struct {
	mock.Mock
}

type MockReplicaManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicaManager) EXPECT() *MockReplicaManager_Expecter {
	return &MockReplicaManager_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockReplicaManager) Get(ctx context.Context, id int64) *Replica {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Replica
	if rf, ok := ret.Get(0).(func(context.Context, int64) *Replica); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Replica)
		}
	}

	return r0
}

// MockReplicaManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockReplicaManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockReplicaManager_Expecter) Get(ctx interface{}, id interface{}) *MockReplicaManager_Get_Call {
	return &MockReplicaManager_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockReplicaManager_Get_Call) Run(run func(ctx context.Context, id int64)) *MockReplicaManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReplicaManager_Get_Call) Return(_a0 *Replica) *MockReplicaManager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_Get_Call) RunAndReturn(run func(context.Context, int64) *Replica) *MockReplicaManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCollection provides a mock function with given fields: ctx, collectionID
func (_m *MockReplicaManager) GetByCollection(ctx context.Context, collectionID int64) []*Replica {
	ret := _m.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCollection")
	}

	var r0 []*Replica
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*Replica); ok {
		r0 = rf(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Replica)
		}
	}

	return r0
}

// MockReplicaManager_GetByCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCollection'
type MockReplicaManager_GetByCollection_Call struct {
	*mock.Call
}

// GetByCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
func (_e *MockReplicaManager_Expecter) GetByCollection(ctx interface{}, collectionID interface{}) *MockReplicaManager_GetByCollection_Call {
	return &MockReplicaManager_GetByCollection_Call{Call: _e.mock.On("GetByCollection", ctx, collectionID)}
}

func (_c *MockReplicaManager_GetByCollection_Call) Run(run func(ctx context.Context, collectionID int64)) *MockReplicaManager_GetByCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReplicaManager_GetByCollection_Call) Return(_a0 []*Replica) *MockReplicaManager_GetByCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_GetByCollection_Call) RunAndReturn(run func(context.Context, int64) []*Replica) *MockReplicaManager_GetByCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCollectionAndNode provides a mock function with given fields: ctx, collectionID, nodeID
func (_m *MockReplicaManager) GetByCollectionAndNode(ctx context.Context, collectionID int64, nodeID int64) *Replica {
	ret := _m.Called(ctx, collectionID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCollectionAndNode")
	}

	var r0 *Replica
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *Replica); ok {
		r0 = rf(ctx, collectionID, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Replica)
		}
	}

	return r0
}

// MockReplicaManager_GetByCollectionAndNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCollectionAndNode'
type MockReplicaManager_GetByCollectionAndNode_Call struct {
	*mock.Call
}

// GetByCollectionAndNode is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - nodeID int64
func (_e *MockReplicaManager_Expecter) GetByCollectionAndNode(ctx interface{}, collectionID interface{}, nodeID interface{}) *MockReplicaManager_GetByCollectionAndNode_Call {
	return &MockReplicaManager_GetByCollectionAndNode_Call{Call: _e.mock.On("GetByCollectionAndNode", ctx, collectionID, nodeID)}
}

func (_c *MockReplicaManager_GetByCollectionAndNode_Call) Run(run func(ctx context.Context, collectionID int64, nodeID int64)) *MockReplicaManager_GetByCollectionAndNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockReplicaManager_GetByCollectionAndNode_Call) Return(_a0 *Replica) *MockReplicaManager_GetByCollectionAndNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_GetByCollectionAndNode_Call) RunAndReturn(run func(context.Context, int64, int64) *Replica) *MockReplicaManager_GetByCollectionAndNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNode provides a mock function with given fields: ctx, nodeID
func (_m *MockReplicaManager) GetByNode(ctx context.Context, nodeID int64) []*Replica {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByNode")
	}

	var r0 []*Replica
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*Replica); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Replica)
		}
	}

	return r0
}

// MockReplicaManager_GetByNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNode'
type MockReplicaManager_GetByNode_Call struct {
	*mock.Call
}

// GetByNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID int64
func (_e *MockReplicaManager_Expecter) GetByNode(ctx interface{}, nodeID interface{}) *MockReplicaManager_GetByNode_Call {
	return &MockReplicaManager_GetByNode_Call{Call: _e.mock.On("GetByNode", ctx, nodeID)}
}

func (_c *MockReplicaManager_GetByNode_Call) Run(run func(ctx context.Context, nodeID int64)) *MockReplicaManager_GetByNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReplicaManager_GetByNode_Call) Return(_a0 []*Replica) *MockReplicaManager_GetByNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_GetByNode_Call) RunAndReturn(run func(context.Context, int64) []*Replica) *MockReplicaManager_GetByNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByResourceGroup provides a mock function with given fields: ctx, rgName
func (_m *MockReplicaManager) GetByResourceGroup(ctx context.Context, rgName string) []*Replica {
	ret := _m.Called(ctx, rgName)

	if len(ret) == 0 {
		panic("no return value specified for GetByResourceGroup")
	}

	var r0 []*Replica
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Replica); ok {
		r0 = rf(ctx, rgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Replica)
		}
	}

	return r0
}

// MockReplicaManager_GetByResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByResourceGroup'
type MockReplicaManager_GetByResourceGroup_Call struct {
	*mock.Call
}

// GetByResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - rgName string
func (_e *MockReplicaManager_Expecter) GetByResourceGroup(ctx interface{}, rgName interface{}) *MockReplicaManager_GetByResourceGroup_Call {
	return &MockReplicaManager_GetByResourceGroup_Call{Call: _e.mock.On("GetByResourceGroup", ctx, rgName)}
}

func (_c *MockReplicaManager_GetByResourceGroup_Call) Run(run func(ctx context.Context, rgName string)) *MockReplicaManager_GetByResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReplicaManager_GetByResourceGroup_Call) Return(_a0 []*Replica) *MockReplicaManager_GetByResourceGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_GetByResourceGroup_Call) RunAndReturn(run func(context.Context, string) []*Replica) *MockReplicaManager_GetByResourceGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicasJSON provides a mock function with given fields: ctx, meta
func (_m *MockReplicaManager) GetReplicasJSON(ctx context.Context, meta *Meta) string {
	ret := _m.Called(ctx, meta)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicasJSON")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *Meta) string); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockReplicaManager_GetReplicasJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicasJSON'
type MockReplicaManager_GetReplicasJSON_Call struct {
	*mock.Call
}

// GetReplicasJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - meta *Meta
func (_e *MockReplicaManager_Expecter) GetReplicasJSON(ctx interface{}, meta interface{}) *MockReplicaManager_GetReplicasJSON_Call {
	return &MockReplicaManager_GetReplicasJSON_Call{Call: _e.mock.On("GetReplicasJSON", ctx, meta)}
}

func (_c *MockReplicaManager_GetReplicasJSON_Call) Run(run func(ctx context.Context, meta *Meta)) *MockReplicaManager_GetReplicasJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Meta))
	})
	return _c
}

func (_c *MockReplicaManager_GetReplicasJSON_Call) Return(_a0 string) *MockReplicaManager_GetReplicasJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_GetReplicasJSON_Call) RunAndReturn(run func(context.Context, *Meta) string) *MockReplicaManager_GetReplicasJSON_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceGroupByCollection provides a mock function with given fields: ctx, collection
func (_m *MockReplicaManager) GetResourceGroupByCollection(ctx context.Context, collection int64) typeutil.Set[string] {
	ret := _m.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceGroupByCollection")
	}

	var r0 typeutil.Set[string]
	if rf, ok := ret.Get(0).(func(context.Context, int64) typeutil.Set[string]); ok {
		r0 = rf(ctx, collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(typeutil.Set[string])
		}
	}

	return r0
}

// MockReplicaManager_GetResourceGroupByCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceGroupByCollection'
type MockReplicaManager_GetResourceGroupByCollection_Call struct {
	*mock.Call
}

// GetResourceGroupByCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collection int64
func (_e *MockReplicaManager_Expecter) GetResourceGroupByCollection(ctx interface{}, collection interface{}) *MockReplicaManager_GetResourceGroupByCollection_Call {
	return &MockReplicaManager_GetResourceGroupByCollection_Call{Call: _e.mock.On("GetResourceGroupByCollection", ctx, collection)}
}

func (_c *MockReplicaManager_GetResourceGroupByCollection_Call) Run(run func(ctx context.Context, collection int64)) *MockReplicaManager_GetResourceGroupByCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReplicaManager_GetResourceGroupByCollection_Call) Return(_a0 typeutil.Set[string]) *MockReplicaManager_GetResourceGroupByCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_GetResourceGroupByCollection_Call) RunAndReturn(run func(context.Context, int64) typeutil.Set[string]) *MockReplicaManager_GetResourceGroupByCollection_Call {
	_c.Call.Return(run)
	return _c
}

// MoveReplica provides a mock function with given fields: ctx, dstRGName, toMove
func (_m *MockReplicaManager) MoveReplica(ctx context.Context, dstRGName string, toMove []*Replica) error {
	ret := _m.Called(ctx, dstRGName, toMove)

	if len(ret) == 0 {
		panic("no return value specified for MoveReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*Replica) error); ok {
		r0 = rf(ctx, dstRGName, toMove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_MoveReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveReplica'
type MockReplicaManager_MoveReplica_Call struct {
	*mock.Call
}

// MoveReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - dstRGName string
//   - toMove []*Replica
func (_e *MockReplicaManager_Expecter) MoveReplica(ctx interface{}, dstRGName interface{}, toMove interface{}) *MockReplicaManager_MoveReplica_Call {
	return &MockReplicaManager_MoveReplica_Call{Call: _e.mock.On("MoveReplica", ctx, dstRGName, toMove)}
}

func (_c *MockReplicaManager_MoveReplica_Call) Run(run func(ctx context.Context, dstRGName string, toMove []*Replica)) *MockReplicaManager_MoveReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*Replica))
	})
	return _c
}

func (_c *MockReplicaManager_MoveReplica_Call) Return(_a0 error) *MockReplicaManager_MoveReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_MoveReplica_Call) RunAndReturn(run func(context.Context, string, []*Replica) error) *MockReplicaManager_MoveReplica_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function with given fields: ctx, collections
func (_m *MockReplicaManager) Recover(ctx context.Context, collections []int64) error {
	ret := _m.Called(ctx, collections)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, collections)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type MockReplicaManager_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - ctx context.Context
//   - collections []int64
func (_e *MockReplicaManager_Expecter) Recover(ctx interface{}, collections interface{}) *MockReplicaManager_Recover_Call {
	return &MockReplicaManager_Recover_Call{Call: _e.mock.On("Recover", ctx, collections)}
}

func (_c *MockReplicaManager_Recover_Call) Run(run func(ctx context.Context, collections []int64)) *MockReplicaManager_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockReplicaManager_Recover_Call) Return(_a0 error) *MockReplicaManager_Recover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_Recover_Call) RunAndReturn(run func(context.Context, []int64) error) *MockReplicaManager_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverNodesInCollection provides a mock function with given fields: ctx, collectionID, rgs
func (_m *MockReplicaManager) RecoverNodesInCollection(ctx context.Context, collectionID int64, rgs map[string]typeutil.Set[int64]) error {
	ret := _m.Called(ctx, collectionID, rgs)

	if len(ret) == 0 {
		panic("no return value specified for RecoverNodesInCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, map[string]typeutil.Set[int64]) error); ok {
		r0 = rf(ctx, collectionID, rgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_RecoverNodesInCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverNodesInCollection'
type MockReplicaManager_RecoverNodesInCollection_Call struct {
	*mock.Call
}

// RecoverNodesInCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - rgs map[string]typeutil.Set[int64]
func (_e *MockReplicaManager_Expecter) RecoverNodesInCollection(ctx interface{}, collectionID interface{}, rgs interface{}) *MockReplicaManager_RecoverNodesInCollection_Call {
	return &MockReplicaManager_RecoverNodesInCollection_Call{Call: _e.mock.On("RecoverNodesInCollection", ctx, collectionID, rgs)}
}

func (_c *MockReplicaManager_RecoverNodesInCollection_Call) Run(run func(ctx context.Context, collectionID int64, rgs map[string]typeutil.Set[int64])) *MockReplicaManager_RecoverNodesInCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(map[string]typeutil.Set[int64]))
	})
	return _c
}

func (_c *MockReplicaManager_RecoverNodesInCollection_Call) Return(_a0 error) *MockReplicaManager_RecoverNodesInCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_RecoverNodesInCollection_Call) RunAndReturn(run func(context.Context, int64, map[string]typeutil.Set[int64]) error) *MockReplicaManager_RecoverNodesInCollection_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCollection provides a mock function with given fields: ctx, collectionID
func (_m *MockReplicaManager) RemoveCollection(ctx context.Context, collectionID int64) error {
	ret := _m.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, collectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_RemoveCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCollection'
type MockReplicaManager_RemoveCollection_Call struct {
	*mock.Call
}

// RemoveCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
func (_e *MockReplicaManager_Expecter) RemoveCollection(ctx interface{}, collectionID interface{}) *MockReplicaManager_RemoveCollection_Call {
	return &MockReplicaManager_RemoveCollection_Call{Call: _e.mock.On("RemoveCollection", ctx, collectionID)}
}

func (_c *MockReplicaManager_RemoveCollection_Call) Run(run func(ctx context.Context, collectionID int64)) *MockReplicaManager_RemoveCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReplicaManager_RemoveCollection_Call) Return(_a0 error) *MockReplicaManager_RemoveCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_RemoveCollection_Call) RunAndReturn(run func(context.Context, int64) error) *MockReplicaManager_RemoveCollection_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNode provides a mock function with given fields: ctx, replicaID, nodes
func (_m *MockReplicaManager) RemoveNode(ctx context.Context, replicaID int64, nodes ...int64) error {
	_va := make([]interface{}, len(nodes))
	for _i := range nodes {
		_va[_i] = nodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, replicaID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...int64) error); ok {
		r0 = rf(ctx, replicaID, nodes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_RemoveNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNode'
type MockReplicaManager_RemoveNode_Call struct {
	*mock.Call
}

// RemoveNode is a helper method to define mock.On call
//   - ctx context.Context
//   - replicaID int64
//   - nodes ...int64
func (_e *MockReplicaManager_Expecter) RemoveNode(ctx interface{}, replicaID interface{}, nodes ...interface{}) *MockReplicaManager_RemoveNode_Call {
	return &MockReplicaManager_RemoveNode_Call{Call: _e.mock.On("RemoveNode",
		append([]interface{}{ctx, replicaID}, nodes...)...)}
}

func (_c *MockReplicaManager_RemoveNode_Call) Run(run func(ctx context.Context, replicaID int64, nodes ...int64)) *MockReplicaManager_RemoveNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockReplicaManager_RemoveNode_Call) Return(_a0 error) *MockReplicaManager_RemoveNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_RemoveNode_Call) RunAndReturn(run func(context.Context, int64, ...int64) error) *MockReplicaManager_RemoveNode_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReplicas provides a mock function with given fields: ctx, collectionID, replicas
func (_m *MockReplicaManager) RemoveReplicas(ctx context.Context, collectionID int64, replicas ...int64) error {
	_va := make([]interface{}, len(replicas))
	for _i := range replicas {
		_va[_i] = replicas[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveReplicas")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...int64) error); ok {
		r0 = rf(ctx, collectionID, replicas...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_RemoveReplicas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReplicas'
type MockReplicaManager_RemoveReplicas_Call struct {
	*mock.Call
}

// RemoveReplicas is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - replicas ...int64
func (_e *MockReplicaManager_Expecter) RemoveReplicas(ctx interface{}, collectionID interface{}, replicas ...interface{}) *MockReplicaManager_RemoveReplicas_Call {
	return &MockReplicaManager_RemoveReplicas_Call{Call: _e.mock.On("RemoveReplicas",
		append([]interface{}{ctx, collectionID}, replicas...)...)}
}

func (_c *MockReplicaManager_RemoveReplicas_Call) Run(run func(ctx context.Context, collectionID int64, replicas ...int64)) *MockReplicaManager_RemoveReplicas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockReplicaManager_RemoveReplicas_Call) Return(_a0 error) *MockReplicaManager_RemoveReplicas_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_RemoveReplicas_Call) RunAndReturn(run func(context.Context, int64, ...int64) error) *MockReplicaManager_RemoveReplicas_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSQNode provides a mock function with given fields: ctx, replicaID, nodes
func (_m *MockReplicaManager) RemoveSQNode(ctx context.Context, replicaID int64, nodes ...int64) error {
	_va := make([]interface{}, len(nodes))
	for _i := range nodes {
		_va[_i] = nodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, replicaID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSQNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...int64) error); ok {
		r0 = rf(ctx, replicaID, nodes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_RemoveSQNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSQNode'
type MockReplicaManager_RemoveSQNode_Call struct {
	*mock.Call
}

// RemoveSQNode is a helper method to define mock.On call
//   - ctx context.Context
//   - replicaID int64
//   - nodes ...int64
func (_e *MockReplicaManager_Expecter) RemoveSQNode(ctx interface{}, replicaID interface{}, nodes ...interface{}) *MockReplicaManager_RemoveSQNode_Call {
	return &MockReplicaManager_RemoveSQNode_Call{Call: _e.mock.On("RemoveSQNode",
		append([]interface{}{ctx, replicaID}, nodes...)...)}
}

func (_c *MockReplicaManager_RemoveSQNode_Call) Run(run func(ctx context.Context, replicaID int64, nodes ...int64)) *MockReplicaManager_RemoveSQNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockReplicaManager_RemoveSQNode_Call) Return(_a0 error) *MockReplicaManager_RemoveSQNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_RemoveSQNode_Call) RunAndReturn(run func(context.Context, int64, ...int64) error) *MockReplicaManager_RemoveSQNode_Call {
	_c.Call.Return(run)
	return _c
}

// Spawn provides a mock function with given fields: ctx, collection, replicaNumInRG, channels
func (_m *MockReplicaManager) Spawn(ctx context.Context, collection int64, replicaNumInRG map[string]int, channels []string) ([]*Replica, error) {
	ret := _m.Called(ctx, collection, replicaNumInRG, channels)

	if len(ret) == 0 {
		panic("no return value specified for Spawn")
	}

	var r0 []*Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, map[string]int, []string) ([]*Replica, error)); ok {
		return rf(ctx, collection, replicaNumInRG, channels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, map[string]int, []string) []*Replica); ok {
		r0 = rf(ctx, collection, replicaNumInRG, channels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Replica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, map[string]int, []string) error); ok {
		r1 = rf(ctx, collection, replicaNumInRG, channels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReplicaManager_Spawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spawn'
type MockReplicaManager_Spawn_Call struct {
	*mock.Call
}

// Spawn is a helper method to define mock.On call
//   - ctx context.Context
//   - collection int64
//   - replicaNumInRG map[string]int
//   - channels []string
func (_e *MockReplicaManager_Expecter) Spawn(ctx interface{}, collection interface{}, replicaNumInRG interface{}, channels interface{}) *MockReplicaManager_Spawn_Call {
	return &MockReplicaManager_Spawn_Call{Call: _e.mock.On("Spawn", ctx, collection, replicaNumInRG, channels)}
}

func (_c *MockReplicaManager_Spawn_Call) Run(run func(ctx context.Context, collection int64, replicaNumInRG map[string]int, channels []string)) *MockReplicaManager_Spawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(map[string]int), args[3].([]string))
	})
	return _c
}

func (_c *MockReplicaManager_Spawn_Call) Return(_a0 []*Replica, _a1 error) *MockReplicaManager_Spawn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReplicaManager_Spawn_Call) RunAndReturn(run func(context.Context, int64, map[string]int, []string) ([]*Replica, error)) *MockReplicaManager_Spawn_Call {
	_c.Call.Return(run)
	return _c
}

// TransferReplica provides a mock function with given fields: ctx, collectionID, srcRGName, dstRGName, replicaNum
func (_m *MockReplicaManager) TransferReplica(ctx context.Context, collectionID int64, srcRGName string, dstRGName string, replicaNum int) error {
	ret := _m.Called(ctx, collectionID, srcRGName, dstRGName, replicaNum)

	if len(ret) == 0 {
		panic("no return value specified for TransferReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, int) error); ok {
		r0 = rf(ctx, collectionID, srcRGName, dstRGName, replicaNum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaManager_TransferReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferReplica'
type MockReplicaManager_TransferReplica_Call struct {
	*mock.Call
}

// TransferReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - srcRGName string
//   - dstRGName string
//   - replicaNum int
func (_e *MockReplicaManager_Expecter) TransferReplica(ctx interface{}, collectionID interface{}, srcRGName interface{}, dstRGName interface{}, replicaNum interface{}) *MockReplicaManager_TransferReplica_Call {
	return &MockReplicaManager_TransferReplica_Call{Call: _e.mock.On("TransferReplica", ctx, collectionID, srcRGName, dstRGName, replicaNum)}
}

func (_c *MockReplicaManager_TransferReplica_Call) Run(run func(ctx context.Context, collectionID int64, srcRGName string, dstRGName string, replicaNum int)) *MockReplicaManager_TransferReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockReplicaManager_TransferReplica_Call) Return(_a0 error) *MockReplicaManager_TransferReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaManager_TransferReplica_Call) RunAndReturn(run func(context.Context, int64, string, string, int) error) *MockReplicaManager_TransferReplica_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplicaManager creates a new instance of MockReplicaManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicaManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicaManager {
	mock := &MockReplicaManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
