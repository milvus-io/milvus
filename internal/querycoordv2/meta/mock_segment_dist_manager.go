// Code generated by mockery v2.46.0. DO NOT EDIT.

package meta

import (
	metricsinfo "github.com/milvus-io/milvus/pkg/v2/util/metricsinfo"
	mock "github.com/stretchr/testify/mock"
)

// MockSegmentDistManager is an autogenerated mock type for the SegmentDistManagerInterface type
type MockSegmentDistManager struct {
	mock.Mock
}

type MockSegmentDistManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSegmentDistManager) EXPECT() *MockSegmentDistManager_Expecter {
	return &MockSegmentDistManager_Expecter{mock: &_m.Mock}
}

// GetByFilter provides a mock function with given fields: filters
func (_m *MockSegmentDistManager) GetByFilter(filters ...SegmentDistFilter) []*Segment {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []*Segment
	if rf, ok := ret.Get(0).(func(...SegmentDistFilter) []*Segment); ok {
		r0 = rf(filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Segment)
		}
	}

	return r0
}

// MockSegmentDistManager_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type MockSegmentDistManager_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - filters ...SegmentDistFilter
func (_e *MockSegmentDistManager_Expecter) GetByFilter(filters ...interface{}) *MockSegmentDistManager_GetByFilter_Call {
	return &MockSegmentDistManager_GetByFilter_Call{Call: _e.mock.On("GetByFilter",
		append([]interface{}{}, filters...)...)}
}

func (_c *MockSegmentDistManager_GetByFilter_Call) Run(run func(filters ...SegmentDistFilter)) *MockSegmentDistManager_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SegmentDistFilter, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(SegmentDistFilter)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockSegmentDistManager_GetByFilter_Call) Return(_a0 []*Segment) *MockSegmentDistManager_GetByFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSegmentDistManager_GetByFilter_Call) RunAndReturn(run func(...SegmentDistFilter) []*Segment) *MockSegmentDistManager_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentDist provides a mock function with given fields: collectionID
func (_m *MockSegmentDistManager) GetSegmentDist(collectionID int64) []*metricsinfo.Segment {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentDist")
	}

	var r0 []*metricsinfo.Segment
	if rf, ok := ret.Get(0).(func(int64) []*metricsinfo.Segment); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metricsinfo.Segment)
		}
	}

	return r0
}

// MockSegmentDistManager_GetSegmentDist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentDist'
type MockSegmentDistManager_GetSegmentDist_Call struct {
	*mock.Call
}

// GetSegmentDist is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockSegmentDistManager_Expecter) GetSegmentDist(collectionID interface{}) *MockSegmentDistManager_GetSegmentDist_Call {
	return &MockSegmentDistManager_GetSegmentDist_Call{Call: _e.mock.On("GetSegmentDist", collectionID)}
}

func (_c *MockSegmentDistManager_GetSegmentDist_Call) Run(run func(collectionID int64)) *MockSegmentDistManager_GetSegmentDist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockSegmentDistManager_GetSegmentDist_Call) Return(_a0 []*metricsinfo.Segment) *MockSegmentDistManager_GetSegmentDist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSegmentDistManager_GetSegmentDist_Call) RunAndReturn(run func(int64) []*metricsinfo.Segment) *MockSegmentDistManager_GetSegmentDist_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: nodeID, segments
func (_m *MockSegmentDistManager) Update(nodeID int64, segments ...*Segment) {
	_va := make([]interface{}, len(segments))
	for _i := range segments {
		_va[_i] = segments[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, nodeID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockSegmentDistManager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSegmentDistManager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - nodeID int64
//   - segments ...*Segment
func (_e *MockSegmentDistManager_Expecter) Update(nodeID interface{}, segments ...interface{}) *MockSegmentDistManager_Update_Call {
	return &MockSegmentDistManager_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{nodeID}, segments...)...)}
}

func (_c *MockSegmentDistManager_Update_Call) Run(run func(nodeID int64, segments ...*Segment)) *MockSegmentDistManager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*Segment, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*Segment)
			}
		}
		run(args[0].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockSegmentDistManager_Update_Call) Return() *MockSegmentDistManager_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSegmentDistManager_Update_Call) RunAndReturn(run func(int64, ...*Segment)) *MockSegmentDistManager_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSegmentDistManager creates a new instance of MockSegmentDistManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSegmentDistManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSegmentDistManager {
	mock := &MockSegmentDistManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
