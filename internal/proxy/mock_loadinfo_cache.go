// Code generated by mockery v2.46.0. DO NOT EDIT.

package proxy

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLoadInfoCache is an autogenerated mock type for the LoadInfoCache type
type MockLoadInfoCache struct {
	mock.Mock
}

type MockLoadInfoCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoadInfoCache) EXPECT() *MockLoadInfoCache_Expecter {
	return &MockLoadInfoCache_Expecter{mock: &_m.Mock}
}

// Expire provides a mock function with given fields: ctx, collectionID
func (_m *MockLoadInfoCache) Expire(ctx context.Context, collectionID int64) {
	_m.Called(ctx, collectionID)
}

// MockLoadInfoCache_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type MockLoadInfoCache_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
func (_e *MockLoadInfoCache_Expecter) Expire(ctx interface{}, collectionID interface{}) *MockLoadInfoCache_Expire_Call {
	return &MockLoadInfoCache_Expire_Call{Call: _e.mock.On("Expire", ctx, collectionID)}
}

func (_c *MockLoadInfoCache_Expire_Call) Run(run func(ctx context.Context, collectionID int64)) *MockLoadInfoCache_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoadInfoCache_Expire_Call) Return() *MockLoadInfoCache_Expire_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoadInfoCache_Expire_Call) RunAndReturn(run func(context.Context, int64)) *MockLoadInfoCache_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoadInfo provides a mock function with given fields: ctx, collectionID
func (_m *MockLoadInfoCache) GetLoadInfo(ctx context.Context, collectionID int64) (*LoadInfo, error) {
	ret := _m.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadInfo")
	}

	var r0 *LoadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*LoadInfo, error)); ok {
		return rf(ctx, collectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *LoadInfo); ok {
		r0 = rf(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoadInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoadInfoCache_GetLoadInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoadInfo'
type MockLoadInfoCache_GetLoadInfo_Call struct {
	*mock.Call
}

// GetLoadInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
func (_e *MockLoadInfoCache_Expecter) GetLoadInfo(ctx interface{}, collectionID interface{}) *MockLoadInfoCache_GetLoadInfo_Call {
	return &MockLoadInfoCache_GetLoadInfo_Call{Call: _e.mock.On("GetLoadInfo", ctx, collectionID)}
}

func (_c *MockLoadInfoCache_GetLoadInfo_Call) Run(run func(ctx context.Context, collectionID int64)) *MockLoadInfoCache_GetLoadInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoadInfoCache_GetLoadInfo_Call) Return(_a0 *LoadInfo, _a1 error) *MockLoadInfoCache_GetLoadInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoadInfoCache_GetLoadInfo_Call) RunAndReturn(run func(context.Context, int64) (*LoadInfo, error)) *MockLoadInfoCache_GetLoadInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoadInfoCache creates a new instance of MockLoadInfoCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoadInfoCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoadInfoCache {
	mock := &MockLoadInfoCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
