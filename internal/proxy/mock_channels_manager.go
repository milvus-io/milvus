// Code generated by mockery v2.46.0. DO NOT EDIT.

package proxy

import (
	context "context"

	msgstream "github.com/milvus-io/milvus/pkg/mq/msgstream"
	mock "github.com/stretchr/testify/mock"
)

// MockChannelsMgr is an autogenerated mock type for the channelsMgr type
type MockChannelsMgr struct {
	mock.Mock
}

type MockChannelsMgr_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelsMgr) EXPECT() *MockChannelsMgr_Expecter {
	return &MockChannelsMgr_Expecter{mock: &_m.Mock}
}

// getChannels provides a mock function with given fields: collectionID
func (_m *MockChannelsMgr) getChannels(collectionID int64) ([]string, error) {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for getChannels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]string, error)); ok {
		return rf(collectionID)
	}
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelsMgr_getChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getChannels'
type MockChannelsMgr_getChannels_Call struct {
	*mock.Call
}

// getChannels is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockChannelsMgr_Expecter) getChannels(collectionID interface{}) *MockChannelsMgr_getChannels_Call {
	return &MockChannelsMgr_getChannels_Call{Call: _e.mock.On("getChannels", collectionID)}
}

func (_c *MockChannelsMgr_getChannels_Call) Run(run func(collectionID int64)) *MockChannelsMgr_getChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockChannelsMgr_getChannels_Call) Return(_a0 []string, _a1 error) *MockChannelsMgr_getChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelsMgr_getChannels_Call) RunAndReturn(run func(int64) ([]string, error)) *MockChannelsMgr_getChannels_Call {
	_c.Call.Return(run)
	return _c
}

// getOrCreateDmlStream provides a mock function with given fields: ctx, collectionID
func (_m *MockChannelsMgr) getOrCreateDmlStream(ctx context.Context, collectionID int64) (msgstream.MsgStream, error) {
	ret := _m.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for getOrCreateDmlStream")
	}

	var r0 msgstream.MsgStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (msgstream.MsgStream, error)); ok {
		return rf(ctx, collectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) msgstream.MsgStream); ok {
		r0 = rf(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(msgstream.MsgStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelsMgr_getOrCreateDmlStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getOrCreateDmlStream'
type MockChannelsMgr_getOrCreateDmlStream_Call struct {
	*mock.Call
}

// getOrCreateDmlStream is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
func (_e *MockChannelsMgr_Expecter) getOrCreateDmlStream(ctx interface{}, collectionID interface{}) *MockChannelsMgr_getOrCreateDmlStream_Call {
	return &MockChannelsMgr_getOrCreateDmlStream_Call{Call: _e.mock.On("getOrCreateDmlStream", ctx, collectionID)}
}

func (_c *MockChannelsMgr_getOrCreateDmlStream_Call) Run(run func(ctx context.Context, collectionID int64)) *MockChannelsMgr_getOrCreateDmlStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockChannelsMgr_getOrCreateDmlStream_Call) Return(_a0 msgstream.MsgStream, _a1 error) *MockChannelsMgr_getOrCreateDmlStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelsMgr_getOrCreateDmlStream_Call) RunAndReturn(run func(context.Context, int64) (msgstream.MsgStream, error)) *MockChannelsMgr_getOrCreateDmlStream_Call {
	_c.Call.Return(run)
	return _c
}

// getVChannels provides a mock function with given fields: collectionID
func (_m *MockChannelsMgr) getVChannels(collectionID int64) ([]string, error) {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for getVChannels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]string, error)); ok {
		return rf(collectionID)
	}
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelsMgr_getVChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getVChannels'
type MockChannelsMgr_getVChannels_Call struct {
	*mock.Call
}

// getVChannels is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockChannelsMgr_Expecter) getVChannels(collectionID interface{}) *MockChannelsMgr_getVChannels_Call {
	return &MockChannelsMgr_getVChannels_Call{Call: _e.mock.On("getVChannels", collectionID)}
}

func (_c *MockChannelsMgr_getVChannels_Call) Run(run func(collectionID int64)) *MockChannelsMgr_getVChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockChannelsMgr_getVChannels_Call) Return(_a0 []string, _a1 error) *MockChannelsMgr_getVChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelsMgr_getVChannels_Call) RunAndReturn(run func(int64) ([]string, error)) *MockChannelsMgr_getVChannels_Call {
	_c.Call.Return(run)
	return _c
}

// removeAllDMLStream provides a mock function with given fields:
func (_m *MockChannelsMgr) removeAllDMLStream() {
	_m.Called()
}

// MockChannelsMgr_removeAllDMLStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'removeAllDMLStream'
type MockChannelsMgr_removeAllDMLStream_Call struct {
	*mock.Call
}

// removeAllDMLStream is a helper method to define mock.On call
func (_e *MockChannelsMgr_Expecter) removeAllDMLStream() *MockChannelsMgr_removeAllDMLStream_Call {
	return &MockChannelsMgr_removeAllDMLStream_Call{Call: _e.mock.On("removeAllDMLStream")}
}

func (_c *MockChannelsMgr_removeAllDMLStream_Call) Run(run func()) *MockChannelsMgr_removeAllDMLStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannelsMgr_removeAllDMLStream_Call) Return() *MockChannelsMgr_removeAllDMLStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChannelsMgr_removeAllDMLStream_Call) RunAndReturn(run func()) *MockChannelsMgr_removeAllDMLStream_Call {
	_c.Call.Return(run)
	return _c
}

// removeDMLStream provides a mock function with given fields: collectionID
func (_m *MockChannelsMgr) removeDMLStream(collectionID int64) {
	_m.Called(collectionID)
}

// MockChannelsMgr_removeDMLStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'removeDMLStream'
type MockChannelsMgr_removeDMLStream_Call struct {
	*mock.Call
}

// removeDMLStream is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockChannelsMgr_Expecter) removeDMLStream(collectionID interface{}) *MockChannelsMgr_removeDMLStream_Call {
	return &MockChannelsMgr_removeDMLStream_Call{Call: _e.mock.On("removeDMLStream", collectionID)}
}

func (_c *MockChannelsMgr_removeDMLStream_Call) Run(run func(collectionID int64)) *MockChannelsMgr_removeDMLStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockChannelsMgr_removeDMLStream_Call) Return() *MockChannelsMgr_removeDMLStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChannelsMgr_removeDMLStream_Call) RunAndReturn(run func(int64)) *MockChannelsMgr_removeDMLStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannelsMgr creates a new instance of MockChannelsMgr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelsMgr(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelsMgr {
	mock := &MockChannelsMgr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
